/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/startup.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@aurelia/jit/dist/index.umd.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aurelia/jit/dist/index.umd.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! @aurelia/kernel */ \"./node_modules/@aurelia/kernel/dist/index.umd.js\"), __webpack_require__(/*! @aurelia/runtime */ \"./node_modules/@aurelia/runtime/dist/index.umd.js\")) :\n  undefined;\n}(this, (function (exports,kernel,runtime) { 'use strict';\n\n  class AttrSyntax {\n      constructor(rawName, rawValue, target, command) {\n          this.rawName = rawName;\n          this.rawValue = rawValue;\n          this.target = target;\n          this.command = command;\n      }\n  }\n  const IAttributeParser = kernel.DI.createInterface()\n      .withDefault(x => x.singleton(AttributeParser));\n  /*@internal*/\n  class AttributeParser {\n      constructor() {\n          this.cache = {};\n      }\n      parse(name, value) {\n          let target;\n          let command;\n          const existing = this.cache[name];\n          if (existing === undefined) {\n              let lastIndex = 0;\n              target = name;\n              for (let i = 0, ii = name.length; i < ii; ++i) {\n                  if (name.charCodeAt(i) === 46 /* Dot */) {\n                      // set the targetName to only the part that comes before the first dot\n                      if (name === target) {\n                          target = name.slice(0, i);\n                      }\n                      lastIndex = i;\n                  }\n              }\n              command = lastIndex > 0 ? name.slice(lastIndex + 1) : null;\n              this.cache[name] = [target, command];\n          }\n          else {\n              target = existing[0];\n              command = existing[1];\n          }\n          return new AttrSyntax(name, value, target, command && command.length ? command : null);\n      }\n  }\n\n  /*! *****************************************************************************\n  Copyright (c) Microsoft Corporation. All rights reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n  this file except in compliance with the License. You may obtain a copy of the\n  License at http://www.apache.org/licenses/LICENSE-2.0\n\n  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n  MERCHANTABLITY OR NON-INFRINGEMENT.\n\n  See the Apache Version 2.0 License for specific language governing permissions\n  and limitations under the License.\n  ***************************************************************************** */\n\n  function __decorate(decorators, target, key, desc) {\n      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n      if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n      return c > 3 && r && Object.defineProperty(target, key, r), r;\n  }\n\n  // tslint:disable:no-reserved-keywords\n  // tslint:disable:no-any\n  class TextBindingInstruction {\n      constructor(from) {\n          this.from = from;\n          this.type = \"a\" /* textBinding */;\n      }\n  }\n  class InterpolationInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"b\" /* interpolation */;\n      }\n  }\n  class OneTimeBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"c\" /* propertyBinding */;\n          this.oneTime = true;\n          this.mode = runtime.BindingMode.oneTime;\n      }\n  }\n  class ToViewBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"c\" /* propertyBinding */;\n          this.oneTime = false;\n          this.mode = runtime.BindingMode.toView;\n      }\n  }\n  class FromViewBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"c\" /* propertyBinding */;\n          this.oneTime = false;\n          this.mode = runtime.BindingMode.fromView;\n      }\n  }\n  class TwoWayBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"c\" /* propertyBinding */;\n          this.oneTime = false;\n          this.mode = runtime.BindingMode.twoWay;\n      }\n  }\n  class IteratorBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"d\" /* iteratorBinding */;\n      }\n  }\n  class TriggerBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"e\" /* listenerBinding */;\n          this.strategy = runtime.DelegationStrategy.none;\n          this.preventDefault = true;\n      }\n  }\n  class DelegateBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"e\" /* listenerBinding */;\n          this.strategy = runtime.DelegationStrategy.bubbling;\n          this.preventDefault = false;\n      }\n  }\n  class CaptureBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"e\" /* listenerBinding */;\n          this.strategy = runtime.DelegationStrategy.capturing;\n          this.preventDefault = false;\n      }\n  }\n  class CallBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"f\" /* callBinding */;\n      }\n  }\n  class RefBindingInstruction {\n      constructor(from) {\n          this.from = from;\n          this.type = \"g\" /* refBinding */;\n      }\n  }\n  class StylePropertyBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"h\" /* stylePropertyBinding */;\n      }\n  }\n  class SetPropertyInstruction {\n      constructor(value, to) {\n          this.value = value;\n          this.to = to;\n          this.type = \"i\" /* setProperty */;\n      }\n  }\n  class SetAttributeInstruction {\n      constructor(value, to) {\n          this.value = value;\n          this.to = to;\n          this.type = \"j\" /* setAttribute */;\n      }\n  }\n  class HydrateElementInstruction {\n      constructor(res, instructions, parts, contentOverride) {\n          this.res = res;\n          this.instructions = instructions;\n          this.parts = parts;\n          this.contentOverride = contentOverride;\n          this.type = \"k\" /* hydrateElement */;\n      }\n  }\n  class HydrateAttributeInstruction {\n      constructor(res, instructions) {\n          this.res = res;\n          this.instructions = instructions;\n          this.type = \"l\" /* hydrateAttribute */;\n      }\n  }\n  class HydrateTemplateController {\n      constructor(def, res, instructions, link) {\n          this.def = def;\n          this.res = res;\n          this.instructions = instructions;\n          this.link = link;\n          this.type = \"m\" /* hydrateTemplateController */;\n      }\n  }\n  class LetElementInstruction {\n      constructor(instructions, toViewModel) {\n          this.instructions = instructions;\n          this.toViewModel = toViewModel;\n          this.type = \"n\" /* letElement */;\n      }\n  }\n  class LetBindingInstruction {\n      constructor(from, to) {\n          this.from = from;\n          this.to = to;\n          this.type = \"o\" /* letBinding */;\n      }\n  }\n\n  function bindingCommand(nameOrSource) {\n      return function (target) {\n          return BindingCommandResource.define(nameOrSource, target);\n      };\n  }\n  const BindingCommandResource = {\n      name: 'binding-command',\n      keyFrom(name) {\n          return `${this.name}:${name}`;\n      },\n      // tslint:disable-next-line:no-reserved-keywords\n      isType(type) {\n          return type.kind === this;\n      },\n      define(nameOrSource, ctor) {\n          const description = typeof nameOrSource === 'string' ? { name: nameOrSource, target: null } : nameOrSource;\n          const Type = ctor;\n          Type.kind = BindingCommandResource;\n          Type.description = description;\n          Type.register = function (container) {\n              container.register(kernel.Registration.singleton(Type.kind.keyFrom(description.name), Type));\n          };\n          const proto = Type.prototype;\n          proto.handles = proto.handles || defaultHandles;\n          return Type;\n      }\n  };\n  function defaultHandles($symbol) {\n      return !$symbol.isTemplateController;\n  }\n  exports.OneTimeBindingCommand = class OneTimeBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new OneTimeBindingInstruction(this.parser.parse($symbol.rawValue, 49 /* OneTimeCommand */), $symbol.to);\n      }\n  };\n  exports.OneTimeBindingCommand.inject = [runtime.IExpressionParser];\n  exports.OneTimeBindingCommand = __decorate([\n      bindingCommand('one-time')\n  ], exports.OneTimeBindingCommand);\n  exports.ToViewBindingCommand = class ToViewBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new ToViewBindingInstruction(this.parser.parse($symbol.rawValue, 50 /* ToViewCommand */), $symbol.to);\n      }\n  };\n  exports.ToViewBindingCommand.inject = [runtime.IExpressionParser];\n  exports.ToViewBindingCommand = __decorate([\n      bindingCommand('to-view')\n  ], exports.ToViewBindingCommand);\n  exports.FromViewBindingCommand = class FromViewBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new FromViewBindingInstruction(this.parser.parse($symbol.rawValue, 51 /* FromViewCommand */), $symbol.to);\n      }\n  };\n  exports.FromViewBindingCommand.inject = [runtime.IExpressionParser];\n  exports.FromViewBindingCommand = __decorate([\n      bindingCommand('from-view')\n  ], exports.FromViewBindingCommand);\n  exports.TwoWayBindingCommand = class TwoWayBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new TwoWayBindingInstruction(this.parser.parse($symbol.rawValue, 52 /* TwoWayCommand */), $symbol.to);\n      }\n  };\n  exports.TwoWayBindingCommand.inject = [runtime.IExpressionParser];\n  exports.TwoWayBindingCommand = __decorate([\n      bindingCommand('two-way')\n  ], exports.TwoWayBindingCommand);\n  // Not bothering to throw on non-existing modes, should never happen anyway.\n  // Keeping all array elements of the same type for better optimizeability.\n  const compileMode = ['', '$1', '$2', '', '$4', '', '$6'];\n  exports.DefaultBindingCommand = class DefaultBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return this[compileMode[$symbol.mode]]($symbol);\n      }\n  };\n  exports.DefaultBindingCommand.inject = [runtime.IExpressionParser];\n  exports.DefaultBindingCommand = __decorate([\n      bindingCommand('bind')\n  ], exports.DefaultBindingCommand);\n  exports.DefaultBindingCommand.prototype.$1 = exports.OneTimeBindingCommand.prototype.compile;\n  exports.DefaultBindingCommand.prototype.$2 = exports.ToViewBindingCommand.prototype.compile;\n  exports.DefaultBindingCommand.prototype.$4 = exports.FromViewBindingCommand.prototype.compile;\n  exports.DefaultBindingCommand.prototype.$6 = exports.TwoWayBindingCommand.prototype.compile;\n  exports.TriggerBindingCommand = class TriggerBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new TriggerBindingInstruction(this.parser.parse($symbol.rawValue, 86 /* TriggerCommand */), $symbol.to);\n      }\n  };\n  exports.TriggerBindingCommand.inject = [runtime.IExpressionParser];\n  exports.TriggerBindingCommand = __decorate([\n      bindingCommand('trigger')\n  ], exports.TriggerBindingCommand);\n  exports.DelegateBindingCommand = class DelegateBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new DelegateBindingInstruction(this.parser.parse($symbol.rawValue, 88 /* DelegateCommand */), $symbol.to);\n      }\n  };\n  exports.DelegateBindingCommand.inject = [runtime.IExpressionParser];\n  exports.DelegateBindingCommand = __decorate([\n      bindingCommand('delegate')\n  ], exports.DelegateBindingCommand);\n  exports.CaptureBindingCommand = class CaptureBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new CaptureBindingInstruction(this.parser.parse($symbol.rawValue, 87 /* CaptureCommand */), $symbol.to);\n      }\n  };\n  exports.CaptureBindingCommand.inject = [runtime.IExpressionParser];\n  exports.CaptureBindingCommand = __decorate([\n      bindingCommand('capture')\n  ], exports.CaptureBindingCommand);\n  exports.CallBindingCommand = class CallBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          return new CallBindingInstruction(this.parser.parse($symbol.rawValue, 153 /* CallCommand */), $symbol.to);\n      }\n  };\n  exports.CallBindingCommand.inject = [runtime.IExpressionParser];\n  exports.CallBindingCommand = __decorate([\n      bindingCommand('call')\n  ], exports.CallBindingCommand);\n  exports.ForBindingCommand = class ForBindingCommand {\n      constructor(parser) {\n          this.parser = parser;\n      }\n      compile($symbol) {\n          const def = {\n              name: 'repeat',\n              template: $symbol.$element.node,\n              instructions: []\n          };\n          return new HydrateTemplateController(def, 'repeat', [\n              new IteratorBindingInstruction(this.parser.parse($symbol.rawValue, 539 /* ForCommand */), 'items'),\n              new SetPropertyInstruction('item', 'local')\n              // tslint:disable-next-line:align\n          ], false);\n      }\n      handles($symbol) {\n          return $symbol.target === 'repeat';\n      }\n  };\n  exports.ForBindingCommand.inject = [runtime.IExpressionParser];\n  exports.ForBindingCommand = __decorate([\n      bindingCommand('for')\n  ], exports.ForBindingCommand);\n\n  /*@internal*/\n  function unescapeCode(code) {\n      switch (code) {\n          case 98 /* LowerB */: return 8 /* Backspace */;\n          case 116 /* LowerT */: return 9 /* Tab */;\n          case 110 /* LowerN */: return 10 /* LineFeed */;\n          case 118 /* LowerV */: return 11 /* VerticalTab */;\n          case 102 /* LowerF */: return 12 /* FormFeed */;\n          case 114 /* LowerR */: return 13 /* CarriageReturn */;\n          case 34 /* DoubleQuote */: return 34 /* DoubleQuote */;\n          case 39 /* SingleQuote */: return 39 /* SingleQuote */;\n          case 92 /* Backslash */: return 92 /* Backslash */;\n          default: return code;\n      }\n  }\n\n  // tslint:disable:no-non-null-assertion\n  const ParserRegistration = {\n      register(container) {\n          container.registerTransformer(runtime.IExpressionParser, parser => {\n              parser['parseCore'] = parseCore;\n              return parser;\n          });\n      }\n  };\n  const $false = runtime.PrimitiveLiteral.$false;\n  const $true = runtime.PrimitiveLiteral.$true;\n  const $null = runtime.PrimitiveLiteral.$null;\n  const $undefined = runtime.PrimitiveLiteral.$undefined;\n  const $this = runtime.AccessThis.$this;\n  const $parent = runtime.AccessThis.$parent;\n  /*@internal*/\n  class ParserState {\n      get tokenRaw() {\n          return this.input.slice(this.startIndex, this.index);\n      }\n      constructor(input) {\n          this.index = 0;\n          this.startIndex = 0;\n          this.lastIndex = 0;\n          this.input = input;\n          this.length = input.length;\n          this.currentToken = 1572864 /* EOF */;\n          this.tokenValue = '';\n          this.currentChar = input.charCodeAt(0);\n          this.assignable = true;\n      }\n  }\n  const $state = new ParserState('');\n  /*@internal*/\n  function parseCore(input, bindingType) {\n      $state.input = input;\n      $state.length = input.length;\n      $state.index = 0;\n      $state.currentChar = input.charCodeAt(0);\n      return parse($state, 0 /* Reset */, 61 /* Variadic */, bindingType === undefined ? 53 /* BindCommand */ : bindingType);\n  }\n  /*@internal*/\n  function parse(state, access, minPrecedence, bindingType) {\n      if (state.index === 0) {\n          if (bindingType & 2048 /* Interpolation */) {\n              // tslint:disable-next-line:no-any\n              return parseInterpolation(state);\n          }\n          nextToken(state);\n          if (state.currentToken & 1048576 /* ExpressionTerminal */) {\n              throw kernel.Reporter.error(100 /* InvalidExpressionStart */, { state });\n          }\n      }\n      state.assignable = 448 /* Binary */ > minPrecedence;\n      let result = undefined;\n      if (state.currentToken & 32768 /* UnaryOp */) {\n          /** parseUnaryExpression\n           * https://tc39.github.io/ecma262/#sec-unary-operators\n           *\n           * UnaryExpression :\n           *   1. LeftHandSideExpression\n           *   2. void UnaryExpression\n           *   3. typeof UnaryExpression\n           *   4. + UnaryExpression\n           *   5. - UnaryExpression\n           *   6. ! UnaryExpression\n           *\n           * IsValidAssignmentTarget\n           *   2,3,4,5,6 = false\n           *   1 = see parseLeftHandSideExpression\n           *\n           * Note: technically we should throw on ++ / -- / +++ / ---, but there's nothing to gain from that\n           */\n          const op = TokenValues[state.currentToken & 63 /* Type */];\n          nextToken(state);\n          result = new runtime.Unary(op, parse(state, access, 449 /* LeftHandSide */, bindingType));\n          state.assignable = false;\n      }\n      else {\n          /** parsePrimaryExpression\n           * https://tc39.github.io/ecma262/#sec-primary-expression\n           *\n           * PrimaryExpression :\n           *   1. this\n           *   2. IdentifierName\n           *   3. Literal\n           *   4. ArrayLiteral\n           *   5. ObjectLiteral\n           *   6. TemplateLiteral\n           *   7. ParenthesizedExpression\n           *\n           * Literal :\n           *    NullLiteral\n           *    BooleanLiteral\n           *    NumericLiteral\n           *    StringLiteral\n           *\n           * ParenthesizedExpression :\n           *   ( AssignmentExpression )\n           *\n           * IsValidAssignmentTarget\n           *   1,3,4,5,6,7 = false\n           *   2 = true\n           */\n          primary: switch (state.currentToken) {\n              case 3077 /* ParentScope */: // $parent\n                  state.assignable = false;\n                  do {\n                      nextToken(state);\n                      access++; // ancestor\n                      if (consumeOpt(state, 16392 /* Dot */)) {\n                          if (state.currentToken === 16392 /* Dot */) {\n                              throw kernel.Reporter.error(102 /* DoubleDot */, { state });\n                          }\n                          else if (state.currentToken === 1572864 /* EOF */) {\n                              throw kernel.Reporter.error(105 /* ExpectedIdentifier */, { state });\n                          }\n                          continue;\n                      }\n                      else if (state.currentToken & 524288 /* AccessScopeTerminal */) {\n                          const ancestor = access & 511 /* Ancestor */;\n                          result = ancestor === 0 ? $this : ancestor === 1 ? $parent : new runtime.AccessThis(ancestor);\n                          access = 512 /* This */;\n                          break primary;\n                      }\n                      else {\n                          throw kernel.Reporter.error(103 /* InvalidMemberExpression */, { state });\n                      }\n                  } while (state.currentToken === 3077 /* ParentScope */);\n              // falls through\n              case 1024 /* Identifier */: // identifier\n                  if (bindingType & 512 /* IsIterator */) {\n                      result = new runtime.BindingIdentifier(state.tokenValue);\n                  }\n                  else {\n                      result = new runtime.AccessScope(state.tokenValue, access & 511 /* Ancestor */);\n                      access = 1024 /* Scope */;\n                  }\n                  state.assignable = true;\n                  nextToken(state);\n                  break;\n              case 3076 /* ThisScope */: // $this\n                  state.assignable = false;\n                  nextToken(state);\n                  result = $this;\n                  access = 512 /* This */;\n                  break;\n              case 671750 /* OpenParen */: // parenthesized expression\n                  nextToken(state);\n                  result = parse(state, 0 /* Reset */, 62 /* Assign */, bindingType);\n                  consume(state, 1835018 /* CloseParen */);\n                  access = 0 /* Reset */;\n                  break;\n              case 671756 /* OpenBracket */:\n                  result = parseArrayLiteralExpression(state, access, bindingType);\n                  access = 0 /* Reset */;\n                  break;\n              case 131079 /* OpenBrace */:\n                  result = parseObjectLiteralExpression(state, bindingType);\n                  access = 0 /* Reset */;\n                  break;\n              case 540713 /* TemplateTail */:\n                  result = new runtime.Template([state.tokenValue]);\n                  state.assignable = false;\n                  nextToken(state);\n                  access = 0 /* Reset */;\n                  break;\n              case 540714 /* TemplateContinuation */:\n                  result = parseTemplate(state, access, bindingType, result, false);\n                  access = 0 /* Reset */;\n                  break;\n              case 4096 /* StringLiteral */:\n              case 8192 /* NumericLiteral */:\n                  result = new runtime.PrimitiveLiteral(state.tokenValue);\n                  state.assignable = false;\n                  nextToken(state);\n                  access = 0 /* Reset */;\n                  break;\n              case 2050 /* NullKeyword */:\n              case 2051 /* UndefinedKeyword */:\n              case 2049 /* TrueKeyword */:\n              case 2048 /* FalseKeyword */:\n                  result = TokenValues[state.currentToken & 63 /* Type */];\n                  state.assignable = false;\n                  nextToken(state);\n                  access = 0 /* Reset */;\n                  break;\n              default:\n                  if (state.index >= state.length) {\n                      throw kernel.Reporter.error(104 /* UnexpectedEndOfExpression */, { state });\n                  }\n                  else {\n                      throw kernel.Reporter.error(101 /* UnconsumedToken */, { state });\n                  }\n          }\n          if (bindingType & 512 /* IsIterator */) {\n              // tslint:disable-next-line:no-any\n              return parseForOfStatement(state, result);\n          }\n          // tslint:disable-next-line:no-any\n          if (449 /* LeftHandSide */ < minPrecedence)\n              return result;\n          /** parseMemberExpression (Token.Dot, Token.OpenBracket, Token.TemplateContinuation)\n           * MemberExpression :\n           *   1. PrimaryExpression\n           *   2. MemberExpression [ AssignmentExpression ]\n           *   3. MemberExpression . IdentifierName\n           *   4. MemberExpression TemplateLiteral\n           *\n           * IsValidAssignmentTarget\n           *   1,4 = false\n           *   2,3 = true\n           *\n           *\n           * parseCallExpression (Token.OpenParen)\n           * CallExpression :\n           *   1. MemberExpression Arguments\n           *   2. CallExpression Arguments\n           *   3. CallExpression [ AssignmentExpression ]\n           *   4. CallExpression . IdentifierName\n           *   5. CallExpression TemplateLiteral\n           *\n           * IsValidAssignmentTarget\n           *   1,2,5 = false\n           *   3,4 = true\n           */\n          let name = state.tokenValue;\n          while ((state.currentToken & 16384 /* LeftHandSide */) > 0) {\n              switch (state.currentToken) {\n                  case 16392 /* Dot */:\n                      state.assignable = true;\n                      nextToken(state);\n                      if ((state.currentToken & 3072 /* IdentifierName */) === 0) {\n                          throw kernel.Reporter.error(105 /* ExpectedIdentifier */, { state });\n                      }\n                      name = state.tokenValue;\n                      nextToken(state);\n                      // Change $This to $Scope, change $Scope to $Member, keep $Member as-is, change $Keyed to $Member, disregard other flags\n                      access = ((access & (512 /* This */ | 1024 /* Scope */)) << 1) | (access & 2048 /* Member */) | ((access & 4096 /* Keyed */) >> 1);\n                      if (state.currentToken === 671750 /* OpenParen */) {\n                          if (access === 0 /* Reset */) { // if the left hand side is a literal, make sure we parse a CallMember\n                              access = 2048 /* Member */;\n                          }\n                          continue;\n                      }\n                      if (access & 1024 /* Scope */) {\n                          result = new runtime.AccessScope(name, result.ancestor);\n                      }\n                      else { // if it's not $Scope, it's $Member\n                          result = new runtime.AccessMember(result, name);\n                      }\n                      continue;\n                  case 671756 /* OpenBracket */:\n                      state.assignable = true;\n                      nextToken(state);\n                      access = 4096 /* Keyed */;\n                      result = new runtime.AccessKeyed(result, parse(state, 0 /* Reset */, 62 /* Assign */, bindingType));\n                      consume(state, 1835021 /* CloseBracket */);\n                      break;\n                  case 671750 /* OpenParen */:\n                      state.assignable = false;\n                      nextToken(state);\n                      const args = new Array();\n                      while (state.currentToken !== 1835018 /* CloseParen */) {\n                          args.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType));\n                          if (!consumeOpt(state, 1572875 /* Comma */)) {\n                              break;\n                          }\n                      }\n                      consume(state, 1835018 /* CloseParen */);\n                      if (access & 1024 /* Scope */) {\n                          result = new runtime.CallScope(name, args, result.ancestor);\n                      }\n                      else if (access & 2048 /* Member */) {\n                          result = new runtime.CallMember(result, name, args);\n                      }\n                      else {\n                          result = new runtime.CallFunction(result, args);\n                      }\n                      access = 0;\n                      break;\n                  case 540713 /* TemplateTail */:\n                      state.assignable = false;\n                      const strings = [state.tokenValue];\n                      result = new runtime.TaggedTemplate(strings, strings, result);\n                      nextToken(state);\n                      break;\n                  case 540714 /* TemplateContinuation */:\n                      result = parseTemplate(state, access, bindingType, result, true);\n                  default:\n              }\n          }\n      }\n      // tslint:disable-next-line:no-any\n      if (448 /* Binary */ < minPrecedence)\n          return result;\n      /** parseBinaryExpression\n       * https://tc39.github.io/ecma262/#sec-multiplicative-operators\n       *\n       * MultiplicativeExpression : (local precedence 6)\n       *   UnaryExpression\n       *   MultiplicativeExpression * / % UnaryExpression\n       *\n       * AdditiveExpression : (local precedence 5)\n       *   MultiplicativeExpression\n       *   AdditiveExpression + - MultiplicativeExpression\n       *\n       * RelationalExpression : (local precedence 4)\n       *   AdditiveExpression\n       *   RelationalExpression < > <= >= instanceof in AdditiveExpression\n       *\n       * EqualityExpression : (local precedence 3)\n       *   RelationalExpression\n       *   EqualityExpression == != === !== RelationalExpression\n       *\n       * LogicalANDExpression : (local precedence 2)\n       *   EqualityExpression\n       *   LogicalANDExpression && EqualityExpression\n       *\n       * LogicalORExpression : (local precedence 1)\n       *   LogicalANDExpression\n       *   LogicalORExpression || LogicalANDExpression\n       */\n      while ((state.currentToken & 65536 /* BinaryOp */) > 0) {\n          const opToken = state.currentToken;\n          if ((opToken & 448 /* Precedence */) <= minPrecedence) {\n              break;\n          }\n          nextToken(state);\n          result = new runtime.Binary(TokenValues[opToken & 63 /* Type */], result, parse(state, access, opToken & 448 /* Precedence */, bindingType));\n          state.assignable = false;\n      }\n      // tslint:disable-next-line:no-any\n      if (63 /* Conditional */ < minPrecedence)\n          return result;\n      /**\n       * parseConditionalExpression\n       * https://tc39.github.io/ecma262/#prod-ConditionalExpression\n       *\n       * ConditionalExpression :\n       *   1. BinaryExpression\n       *   2. BinaryExpression ? AssignmentExpression : AssignmentExpression\n       *\n       * IsValidAssignmentTarget\n       *   1,2 = false\n       */\n      if (consumeOpt(state, 1572879 /* Question */)) {\n          const yes = parse(state, access, 62 /* Assign */, bindingType);\n          consume(state, 1572878 /* Colon */);\n          result = new runtime.Conditional(result, yes, parse(state, access, 62 /* Assign */, bindingType));\n          state.assignable = false;\n      }\n      // tslint:disable-next-line:no-any\n      if (62 /* Assign */ < minPrecedence)\n          return result;\n      /** parseAssignmentExpression\n       * https://tc39.github.io/ecma262/#prod-AssignmentExpression\n       * Note: AssignmentExpression here is equivalent to ES Expression because we don't parse the comma operator\n       *\n       * AssignmentExpression :\n       *   1. ConditionalExpression\n       *   2. LeftHandSideExpression = AssignmentExpression\n       *\n       * IsValidAssignmentTarget\n       *   1,2 = false\n       */\n      if (consumeOpt(state, 1048615 /* Equals */)) {\n          if (!state.assignable) {\n              throw kernel.Reporter.error(150 /* NotAssignable */, { state });\n          }\n          result = new runtime.Assign(result, parse(state, access, 62 /* Assign */, bindingType));\n      }\n      // tslint:disable-next-line:no-any\n      if (61 /* Variadic */ < minPrecedence)\n          return result;\n      /** parseValueConverter\n       */\n      while (consumeOpt(state, 1572883 /* Bar */)) {\n          if (state.currentToken === 1572864 /* EOF */) {\n              throw kernel.Reporter.error(112);\n          }\n          const name = state.tokenValue;\n          nextToken(state);\n          const args = new Array();\n          while (consumeOpt(state, 1572878 /* Colon */)) {\n              args.push(parse(state, access, 62 /* Assign */, bindingType));\n          }\n          result = new runtime.ValueConverter(result, name, args);\n      }\n      /** parseBindingBehavior\n       */\n      while (consumeOpt(state, 1572880 /* Ampersand */)) {\n          if (state.currentToken === 1572864 /* EOF */) {\n              throw kernel.Reporter.error(113);\n          }\n          const name = state.tokenValue;\n          nextToken(state);\n          const args = new Array();\n          while (consumeOpt(state, 1572878 /* Colon */)) {\n              args.push(parse(state, access, 62 /* Assign */, bindingType));\n          }\n          result = new runtime.BindingBehavior(result, name, args);\n      }\n      if (state.currentToken !== 1572864 /* EOF */) {\n          if (bindingType & 2048 /* Interpolation */) {\n              // tslint:disable-next-line:no-any\n              return result;\n          }\n          if (state.tokenRaw === 'of') {\n              throw kernel.Reporter.error(151 /* UnexpectedForOf */, { state });\n          }\n          throw kernel.Reporter.error(101 /* UnconsumedToken */, { state });\n      }\n      // tslint:disable-next-line:no-any\n      return result;\n  }\n  /**\n   * parseArrayLiteralExpression\n   * https://tc39.github.io/ecma262/#prod-ArrayLiteral\n   *\n   * ArrayLiteral :\n   *   [ Elision(opt) ]\n   *   [ ElementList ]\n   *   [ ElementList, Elision(opt) ]\n   *\n   * ElementList :\n   *   Elision(opt) AssignmentExpression\n   *   ElementList, Elision(opt) AssignmentExpression\n   *\n   * Elision :\n   *  ,\n   *  Elision ,\n   */\n  function parseArrayLiteralExpression(state, access, bindingType) {\n      nextToken(state);\n      const elements = new Array();\n      while (state.currentToken !== 1835021 /* CloseBracket */) {\n          if (consumeOpt(state, 1572875 /* Comma */)) {\n              elements.push($undefined);\n              if (state.currentToken === 1835021 /* CloseBracket */) {\n                  elements.push($undefined);\n                  break;\n              }\n          }\n          else {\n              elements.push(parse(state, access, 62 /* Assign */, bindingType & ~512 /* IsIterator */));\n              if (consumeOpt(state, 1572875 /* Comma */)) {\n                  if (state.currentToken === 1835021 /* CloseBracket */) {\n                      elements.push($undefined);\n                      break;\n                  }\n              }\n              else {\n                  break;\n              }\n          }\n      }\n      consume(state, 1835021 /* CloseBracket */);\n      if (bindingType & 512 /* IsIterator */) {\n          return new runtime.ArrayBindingPattern(elements);\n      }\n      else {\n          state.assignable = false;\n          return new runtime.ArrayLiteral(elements);\n      }\n  }\n  function parseForOfStatement(state, result) {\n      if ((result.$kind & 65536 /* IsForDeclaration */) === 0) {\n          throw kernel.Reporter.error(106 /* InvalidForDeclaration */, { state });\n      }\n      if (state.currentToken !== 1051179 /* OfKeyword */) {\n          throw kernel.Reporter.error(106 /* InvalidForDeclaration */, { state });\n      }\n      nextToken(state);\n      const declaration = result;\n      const statement = parse(state, 0 /* Reset */, 61 /* Variadic */, 0 /* None */);\n      return new runtime.ForOfStatement(declaration, statement);\n  }\n  /**\n   * parseObjectLiteralExpression\n   * https://tc39.github.io/ecma262/#prod-Literal\n   *\n   * ObjectLiteral :\n   *   { }\n   *   { PropertyDefinitionList }\n   *\n   * PropertyDefinitionList :\n   *   PropertyDefinition\n   *   PropertyDefinitionList, PropertyDefinition\n   *\n   * PropertyDefinition :\n   *   IdentifierName\n   *   PropertyName : AssignmentExpression\n   *\n   * PropertyName :\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   */\n  function parseObjectLiteralExpression(state, bindingType) {\n      const keys = new Array();\n      const values = new Array();\n      nextToken(state);\n      while (state.currentToken !== 1835017 /* CloseBrace */) {\n          keys.push(state.tokenValue);\n          // Literal = mandatory colon\n          if (state.currentToken & 12288 /* StringOrNumericLiteral */) {\n              nextToken(state);\n              consume(state, 1572878 /* Colon */);\n              values.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType & ~512 /* IsIterator */));\n          }\n          else if (state.currentToken & 3072 /* IdentifierName */) {\n              // IdentifierName = optional colon\n              const { currentChar, currentToken, index } = state;\n              nextToken(state);\n              if (consumeOpt(state, 1572878 /* Colon */)) {\n                  values.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType & ~512 /* IsIterator */));\n              }\n              else {\n                  // Shorthand\n                  state.currentChar = currentChar;\n                  state.currentToken = currentToken;\n                  state.index = index;\n                  values.push(parse(state, 0 /* Reset */, 450 /* Primary */, bindingType & ~512 /* IsIterator */));\n              }\n          }\n          else {\n              throw kernel.Reporter.error(107 /* InvalidObjectLiteralPropertyDefinition */, { state });\n          }\n          if (state.currentToken !== 1835017 /* CloseBrace */) {\n              consume(state, 1572875 /* Comma */);\n          }\n      }\n      consume(state, 1835017 /* CloseBrace */);\n      if (bindingType & 512 /* IsIterator */) {\n          return new runtime.ObjectBindingPattern(keys, values);\n      }\n      else {\n          state.assignable = false;\n          return new runtime.ObjectLiteral(keys, values);\n      }\n  }\n  function parseInterpolation(state) {\n      const parts = [];\n      const expressions = [];\n      const length = state.length;\n      let result = '';\n      while (state.index < length) {\n          switch (state.currentChar) {\n              case 36 /* Dollar */:\n                  if (state.input.charCodeAt(state.index + 1) === 123 /* OpenBrace */) {\n                      parts.push(result);\n                      result = '';\n                      state.index += 2;\n                      state.currentChar = state.input.charCodeAt(state.index);\n                      nextToken(state);\n                      const expression = parse(state, 0 /* Reset */, 61 /* Variadic */, 2048 /* Interpolation */);\n                      expressions.push(expression);\n                      continue;\n                  }\n                  else {\n                      result += '$';\n                  }\n                  break;\n              case 92 /* Backslash */:\n                  result += String.fromCharCode(unescapeCode(nextChar(state)));\n                  break;\n              default:\n                  result += String.fromCharCode(state.currentChar);\n          }\n          nextChar(state);\n      }\n      if (expressions.length) {\n          parts.push(result);\n          return new runtime.Interpolation(parts, expressions);\n      }\n      return null;\n  }\n  /**\n   * parseTemplateLiteralExpression\n   * https://tc39.github.io/ecma262/#prod-Literal\n   *\n   * Template :\n   *   NoSubstitutionTemplate\n   *   TemplateHead\n   *\n   * NoSubstitutionTemplate :\n   *   ` TemplateCharacters(opt) `\n   *\n   * TemplateHead :\n   *   ` TemplateCharacters(opt) ${\n   *\n   * TemplateSubstitutionTail :\n   *   TemplateMiddle\n   *   TemplateTail\n   *\n   * TemplateMiddle :\n   *   } TemplateCharacters(opt) ${\n   *\n   * TemplateTail :\n   *   } TemplateCharacters(opt) `\n   *\n   * TemplateCharacters :\n   *   TemplateCharacter TemplateCharacters(opt)\n   *\n   * TemplateCharacter :\n   *   $ [lookahead ≠ {]\n   *   \\ EscapeSequence\n   *   SourceCharacter (but not one of ` or \\ or $)\n   */\n  function parseTemplate(state, access, bindingType, result, tagged) {\n      const cooked = [state.tokenValue];\n      //const raw = [state.tokenRaw];\n      consume(state, 540714 /* TemplateContinuation */);\n      const expressions = [parse(state, access, 62 /* Assign */, bindingType)];\n      while ((state.currentToken = scanTemplateTail(state)) !== 540713 /* TemplateTail */) {\n          cooked.push(state.tokenValue);\n          // if (tagged) {\n          //   raw.push(state.tokenRaw);\n          // }\n          consume(state, 540714 /* TemplateContinuation */);\n          expressions.push(parse(state, access, 62 /* Assign */, bindingType));\n      }\n      cooked.push(state.tokenValue);\n      state.assignable = false;\n      if (tagged) {\n          //raw.push(state.tokenRaw);\n          nextToken(state);\n          return new runtime.TaggedTemplate(cooked, cooked, result, expressions);\n      }\n      else {\n          nextToken(state);\n          return new runtime.Template(cooked, expressions);\n      }\n  }\n  function nextToken(state) {\n      while (state.index < state.length) {\n          state.startIndex = state.index;\n          if ((state.currentToken = CharScanners[state.currentChar](state)) !== null) { // a null token means the character must be skipped\n              return;\n          }\n      }\n      state.currentToken = 1572864 /* EOF */;\n  }\n  function nextChar(state) {\n      return state.currentChar = state.input.charCodeAt(++state.index);\n  }\n  function scanIdentifier(state) {\n      // run to the next non-idPart\n      while (IdParts[nextChar(state)])\n          ;\n      const token = KeywordLookup[state.tokenValue = state.tokenRaw];\n      return token === undefined ? 1024 /* Identifier */ : token;\n  }\n  function scanNumber(state, isFloat) {\n      let char = state.currentChar;\n      if (isFloat === false) {\n          do {\n              char = nextChar(state);\n          } while (char <= 57 /* Nine */ && char >= 48 /* Zero */);\n          if (char !== 46 /* Dot */) {\n              state.tokenValue = parseInt(state.tokenRaw, 10);\n              return 8192 /* NumericLiteral */;\n          }\n          // past this point it's always a float\n          char = nextChar(state);\n          if (state.index >= state.length) {\n              // unless the number ends with a dot - that behaves a little different in native ES expressions\n              // but in our AST that behavior has no effect because numbers are always stored in variables\n              state.tokenValue = parseInt(state.tokenRaw.slice(0, -1), 10);\n              return 8192 /* NumericLiteral */;\n          }\n      }\n      if (char <= 57 /* Nine */ && char >= 48 /* Zero */) {\n          do {\n              char = nextChar(state);\n          } while (char <= 57 /* Nine */ && char >= 48 /* Zero */);\n      }\n      else {\n          state.currentChar = state.input.charCodeAt(--state.index);\n      }\n      state.tokenValue = parseFloat(state.tokenRaw);\n      return 8192 /* NumericLiteral */;\n  }\n  function scanString(state) {\n      const quote = state.currentChar;\n      nextChar(state); // Skip initial quote.\n      let unescaped = 0;\n      const buffer = new Array();\n      let marker = state.index;\n      while (state.currentChar !== quote) {\n          if (state.currentChar === 92 /* Backslash */) {\n              buffer.push(state.input.slice(marker, state.index));\n              nextChar(state);\n              unescaped = unescapeCode(state.currentChar);\n              nextChar(state);\n              buffer.push(String.fromCharCode(unescaped));\n              marker = state.index;\n          }\n          else if (state.index >= state.length) {\n              throw kernel.Reporter.error(108 /* UnterminatedQuote */, { state });\n          }\n          else {\n              nextChar(state);\n          }\n      }\n      const last = state.input.slice(marker, state.index);\n      nextChar(state); // Skip terminating quote.\n      // Compute the unescaped string value.\n      buffer.push(last);\n      const unescapedStr = buffer.join('');\n      state.tokenValue = unescapedStr;\n      return 4096 /* StringLiteral */;\n  }\n  function scanTemplate(state) {\n      let tail = true;\n      let result = '';\n      while (nextChar(state) !== 96 /* Backtick */) {\n          if (state.currentChar === 36 /* Dollar */) {\n              if ((state.index + 1) < state.length && state.input.charCodeAt(state.index + 1) === 123 /* OpenBrace */) {\n                  state.index++;\n                  tail = false;\n                  break;\n              }\n              else {\n                  result += '$';\n              }\n          }\n          else if (state.currentChar === 92 /* Backslash */) {\n              result += String.fromCharCode(unescapeCode(nextChar(state)));\n          }\n          else {\n              if (state.index >= state.length) {\n                  throw kernel.Reporter.error(109 /* UnterminatedTemplate */, { state });\n              }\n              result += String.fromCharCode(state.currentChar);\n          }\n      }\n      nextChar(state);\n      state.tokenValue = result;\n      if (tail) {\n          return 540713 /* TemplateTail */;\n      }\n      return 540714 /* TemplateContinuation */;\n  }\n  function scanTemplateTail(state) {\n      if (state.index >= state.length) {\n          throw kernel.Reporter.error(109 /* UnterminatedTemplate */, { state });\n      }\n      state.index--;\n      return scanTemplate(state);\n  }\n  function consumeOpt(state, token) {\n      // tslint:disable-next-line:possible-timing-attack\n      if (state.currentToken === token) {\n          nextToken(state);\n          return true;\n      }\n      return false;\n  }\n  function consume(state, token) {\n      // tslint:disable-next-line:possible-timing-attack\n      if (state.currentToken === token) {\n          nextToken(state);\n      }\n      else {\n          throw kernel.Reporter.error(110 /* MissingExpectedToken */, { state, expected: token });\n      }\n  }\n  /**\n   * Array for mapping tokens to token values. The indices of the values\n   * correspond to the token bits 0-38.\n   * For this to work properly, the values in the array must be kept in\n   * the same order as the token bits.\n   * Usage: TokenValues[token & Token.Type]\n   */\n  const TokenValues = [\n      $false, $true, $null, $undefined, '$this', '$parent',\n      '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\\'', '\"',\n      '&', '|', '||', '&&', '==', '!=', '===', '!==', '<', '>',\n      '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!',\n      540713 /* TemplateTail */, 540714 /* TemplateContinuation */,\n      'of'\n  ];\n  const KeywordLookup = Object.create(null);\n  KeywordLookup.true = 2049 /* TrueKeyword */;\n  KeywordLookup.null = 2050 /* NullKeyword */;\n  KeywordLookup.false = 2048 /* FalseKeyword */;\n  KeywordLookup.undefined = 2051 /* UndefinedKeyword */;\n  KeywordLookup.$this = 3076 /* ThisScope */;\n  KeywordLookup.$parent = 3077 /* ParentScope */;\n  KeywordLookup.in = 1640798 /* InKeyword */;\n  KeywordLookup.instanceof = 1640799 /* InstanceOfKeyword */;\n  KeywordLookup.typeof = 34850 /* TypeofKeyword */;\n  KeywordLookup.void = 34851 /* VoidKeyword */;\n  KeywordLookup.of = 1051179 /* OfKeyword */;\n  /**\n   * Ranges of code points in pairs of 2 (eg 0x41-0x5B, 0x61-0x7B, ...) where the second value is not inclusive (5-7 means 5 and 6)\n   * Single values are denoted by the second value being a 0\n   *\n   * Copied from output generated with \"node build/generate-unicode.js\"\n   *\n   * See also: https://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF\n   */\n  const codes = {\n      /* [$0-9A-Za_a-z] */\n      AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],\n      IdStart: /*IdentifierStart*/ [0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],\n      Digit: /*DecimalNumber*/ [0x30, 0x3A],\n      Skip: /*Skippable*/ [0, 0x21, 0x7F, 0xA1]\n  };\n  /**\n   * Decompress the ranges into an array of numbers so that the char code\n   * can be used as an index to the lookup\n   */\n  function decompress(lookup, $set, compressed, value) {\n      const rangeCount = compressed.length;\n      for (let i = 0; i < rangeCount; i += 2) {\n          const start = compressed[i];\n          let end = compressed[i + 1];\n          end = end > 0 ? end : start + 1;\n          if (lookup) {\n              lookup.fill(value, start, end);\n          }\n          if ($set) {\n              for (let ch = start; ch < end; ch++) {\n                  $set.add(ch);\n              }\n          }\n      }\n  }\n  // CharFuncLookup functions\n  function returnToken(token) {\n      return s => {\n          nextChar(s);\n          return token;\n      };\n  }\n  const unexpectedCharacter = s => {\n      throw kernel.Reporter.error(111 /* UnexpectedCharacter */, { state: s });\n  };\n  unexpectedCharacter.notMapped = true;\n  // ASCII IdentifierPart lookup\n  const AsciiIdParts = new Set();\n  decompress(null, AsciiIdParts, codes.AsciiIdPart, true);\n  // IdentifierPart lookup\n  const IdParts = new Uint8Array(0xFFFF);\n  // tslint:disable-next-line:no-any\n  decompress(IdParts, null, codes.IdStart, 1);\n  // tslint:disable-next-line:no-any\n  decompress(IdParts, null, codes.Digit, 1);\n  // Character scanning function lookup\n  const CharScanners = new Array(0xFFFF);\n  CharScanners.fill(unexpectedCharacter, 0, 0xFFFF);\n  decompress(CharScanners, null, codes.Skip, s => {\n      nextChar(s);\n      return null;\n  });\n  decompress(CharScanners, null, codes.IdStart, scanIdentifier);\n  decompress(CharScanners, null, codes.Digit, s => scanNumber(s, false));\n  CharScanners[34 /* DoubleQuote */] =\n      CharScanners[39 /* SingleQuote */] = s => {\n          return scanString(s);\n      };\n  CharScanners[96 /* Backtick */] = s => {\n      return scanTemplate(s);\n  };\n  // !, !=, !==\n  CharScanners[33 /* Exclamation */] = s => {\n      if (nextChar(s) !== 61 /* Equals */) {\n          return 32808 /* Exclamation */;\n      }\n      if (nextChar(s) !== 61 /* Equals */) {\n          return 1638679 /* ExclamationEquals */;\n      }\n      nextChar(s);\n      return 1638681 /* ExclamationEqualsEquals */;\n  };\n  // =, ==, ===\n  CharScanners[61 /* Equals */] = s => {\n      if (nextChar(s) !== 61 /* Equals */) {\n          return 1048615 /* Equals */;\n      }\n      if (nextChar(s) !== 61 /* Equals */) {\n          return 1638678 /* EqualsEquals */;\n      }\n      nextChar(s);\n      return 1638680 /* EqualsEqualsEquals */;\n  };\n  // &, &&\n  CharScanners[38 /* Ampersand */] = s => {\n      if (nextChar(s) !== 38 /* Ampersand */) {\n          return 1572880 /* Ampersand */;\n      }\n      nextChar(s);\n      return 1638613 /* AmpersandAmpersand */;\n  };\n  // |, ||\n  CharScanners[124 /* Bar */] = s => {\n      if (nextChar(s) !== 124 /* Bar */) {\n          return 1572883 /* Bar */;\n      }\n      nextChar(s);\n      return 1638548 /* BarBar */;\n  };\n  // .\n  CharScanners[46 /* Dot */] = s => {\n      if (nextChar(s) <= 57 /* Nine */ && s.currentChar >= 48 /* Zero */) {\n          return scanNumber(s, true);\n      }\n      return 16392 /* Dot */;\n  };\n  // <, <=\n  CharScanners[60 /* LessThan */] = s => {\n      if (nextChar(s) !== 61 /* Equals */) {\n          return 1638746 /* LessThan */;\n      }\n      nextChar(s);\n      return 1638748 /* LessThanEquals */;\n  };\n  // >, >=\n  CharScanners[62 /* GreaterThan */] = s => {\n      if (nextChar(s) !== 61 /* Equals */) {\n          return 1638747 /* GreaterThan */;\n      }\n      nextChar(s);\n      return 1638749 /* GreaterThanEquals */;\n  };\n  CharScanners[37 /* Percent */] = returnToken(1638885 /* Percent */);\n  CharScanners[40 /* OpenParen */] = returnToken(671750 /* OpenParen */);\n  CharScanners[41 /* CloseParen */] = returnToken(1835018 /* CloseParen */);\n  CharScanners[42 /* Asterisk */] = returnToken(1638884 /* Asterisk */);\n  CharScanners[43 /* Plus */] = returnToken(623008 /* Plus */);\n  CharScanners[44 /* Comma */] = returnToken(1572875 /* Comma */);\n  CharScanners[45 /* Minus */] = returnToken(623009 /* Minus */);\n  CharScanners[47 /* Slash */] = returnToken(1638886 /* Slash */);\n  CharScanners[58 /* Colon */] = returnToken(1572878 /* Colon */);\n  CharScanners[63 /* Question */] = returnToken(1572879 /* Question */);\n  CharScanners[91 /* OpenBracket */] = returnToken(671756 /* OpenBracket */);\n  CharScanners[93 /* CloseBracket */] = returnToken(1835021 /* CloseBracket */);\n  CharScanners[123 /* OpenBrace */] = returnToken(131079 /* OpenBrace */);\n  CharScanners[125 /* CloseBrace */] = returnToken(1835017 /* CloseBrace */);\n\n  const domParser = runtime.DOM.createElement('div');\n  const marker = runtime.DOM.createElement('au-marker');\n  marker.classList.add('au');\n  const createMarker = marker.cloneNode.bind(marker, false);\n  class ElementSyntax {\n      constructor(node, name, $content, $children, $attributes) {\n          this.node = node;\n          this.name = name;\n          this.$content = $content;\n          this.$children = $children;\n          this.$attributes = $attributes;\n      }\n      static createMarker() {\n          return new ElementSyntax(createMarker(), 'au-marker', null, kernel.PLATFORM.emptyArray, kernel.PLATFORM.emptyArray);\n      }\n  }\n  const IElementParser = kernel.DI.createInterface()\n      .withDefault(x => x.singleton(exports.ElementParser));\n  /*@internal*/\n  exports.ElementParser = class ElementParser {\n      constructor(attrParser) {\n          this.attrParser = attrParser;\n      }\n      parse(markupOrNode) {\n          let node;\n          if (typeof markupOrNode === 'string') {\n              domParser.innerHTML = markupOrNode;\n              node = domParser.firstElementChild;\n              domParser.removeChild(node);\n          }\n          else {\n              node = markupOrNode;\n          }\n          let children;\n          let content;\n          if (node.nodeName === 'TEMPLATE') {\n              content = this.parse(node.content);\n              children = kernel.PLATFORM.emptyArray;\n          }\n          else {\n              content = null;\n              const nodeChildNodes = node.childNodes;\n              const nodeLen = nodeChildNodes.length;\n              if (nodeLen > 0) {\n                  children = Array(nodeLen);\n                  for (let i = 0, ii = nodeLen; i < ii; ++i) {\n                      children[i] = this.parse(nodeChildNodes[i]);\n                  }\n              }\n              else {\n                  children = kernel.PLATFORM.emptyArray;\n              }\n          }\n          let attributes;\n          const nodeAttributes = node.attributes;\n          const attrLen = nodeAttributes === undefined ? 0 : nodeAttributes.length;\n          if (attrLen > 0) {\n              attributes = Array(attrLen);\n              for (let i = 0, ii = attrLen; i < ii; ++i) {\n                  const attr = nodeAttributes[i];\n                  attributes[i] = this.attrParser.parse(attr.name, attr.value);\n              }\n          }\n          else {\n              attributes = kernel.PLATFORM.emptyArray;\n          }\n          return new ElementSyntax(node, node.nodeName, content, children, attributes);\n      }\n  };\n  exports.ElementParser = __decorate([\n      kernel.inject(IAttributeParser)\n  ], exports.ElementParser);\n\n  class SemanticModel {\n      constructor(definition, resources, attrParser, elParser, exprParser) {\n          this.resources = resources;\n          this.attrParser = attrParser;\n          this.elParser = elParser;\n          this.exprParser = exprParser;\n          this.isSemanticModel = true;\n          this.attrDefCache = {};\n          this.elDefCache = {};\n          this.commandCache = {};\n          const syntax = this.elParser.parse(definition.template);\n          definition.template = syntax.node;\n          this.root = new ElementSymbol(\n          /*   semanticModel*/ this, \n          /*isDefinitionRoot*/ true, \n          /* $definitionRoot*/ null, \n          /*         $parent*/ null, \n          /*          syntax*/ syntax, \n          /*      definition*/ definition);\n      }\n      static create(definition, resources, attrParser, elParser, exprParser) {\n          if ('get' in attrParser) {\n              const locator = attrParser;\n              attrParser = locator.get(IAttributeParser);\n              elParser = locator.get(IElementParser);\n              exprParser = locator.get(runtime.IExpressionParser);\n          }\n          return new SemanticModel(definition, resources, attrParser, elParser, exprParser);\n      }\n      getAttributeDefinition(name) {\n          const existing = this.attrDefCache[name];\n          if (existing !== undefined) {\n              return existing;\n          }\n          const definition = this.resources.find(runtime.CustomAttributeResource, name);\n          return this.attrDefCache[name] = definition === undefined ? null : definition;\n      }\n      getElementDefinition(name) {\n          const existing = this.elDefCache[name];\n          if (existing !== undefined) {\n              return existing;\n          }\n          const definition = this.resources.find(runtime.CustomElementResource, name);\n          return this.elDefCache[name] = definition === undefined ? null : definition;\n      }\n      getBindingCommand(name) {\n          const existing = this.commandCache[name];\n          if (existing !== undefined) {\n              return existing;\n          }\n          const instance = this.resources.create(BindingCommandResource, name);\n          return this.commandCache[name] = instance === undefined ? null : instance;\n      }\n      getAttributeSymbol(syntax, element) {\n          const definition = this.getAttributeDefinition(kernel.PLATFORM.camelCase(syntax.target));\n          const command = this.getBindingCommand(syntax.command);\n          return new AttributeSymbol(this, element, syntax, definition, command);\n      }\n      getMultiAttrBindingSymbol(syntax, parent) {\n          const command = this.getBindingCommand(syntax.command);\n          return new MultiAttributeBindingSymbol(this, parent, syntax, command);\n      }\n      getElementSymbol(syntax, parent) {\n          const node = syntax.node;\n          let definition;\n          if (node.nodeType === 1 /* Element */) {\n              const resourceKey = (node.getAttribute('as-element') || node.nodeName).toLowerCase();\n              definition = this.getElementDefinition(resourceKey);\n          }\n          return new ElementSymbol(\n          /*   semanticModel*/ this, \n          /*isDefinitionRoot*/ false, \n          /* $definitionRoot*/ parent.$root, \n          /*         $parent*/ parent, \n          /*          syntax*/ syntax, \n          /*      definition*/ definition);\n      }\n      getTemplateElementSymbol(syntax, parent, definition, definitionRoot) {\n          return new ElementSymbol(\n          /*   semanticModel*/ this, \n          /*isDefinitionRoot*/ true, \n          /* $definitionRoot*/ definitionRoot, \n          /*         $parent*/ parent, \n          /*          syntax*/ syntax, \n          /*      definition*/ definition);\n      }\n  }\n  class MultiAttributeBindingSymbol {\n      constructor(semanticModel, $parent, syntax, command) {\n          this.semanticModel = semanticModel;\n          this.$parent = $parent;\n          this.syntax = syntax;\n          this.command = command;\n          this.isMultiAttrBinding = true;\n          this.res = null;\n          this.bindable = null;\n          this.isTemplateController = false;\n          this.isCustomAttribute = true;\n          this.isAttributeBindable = false;\n          this.isDefaultAttributeBindable = false;\n          this.onCustomElement = false;\n          this.isElementBindable = false;\n          this.$element = null;\n          this.target = syntax.target;\n          this.rawName = syntax.rawName;\n          this.rawValue = syntax.rawValue;\n          this.rawCommand = syntax.command;\n          this.hasBindingCommand = !!command;\n          this.isHandledByBindingCommand = this.hasBindingCommand && command.handles(this);\n          const bindables = $parent.definition.bindables;\n          for (const prop in bindables) {\n              const b = bindables[prop];\n              if (b.property === syntax.target) {\n                  this.to = b.property;\n                  this.mode = (b.mode !== undefined && b.mode !== runtime.BindingMode.default) ? b.mode : runtime.BindingMode.toView;\n                  this.bindable = b;\n                  this.isAttributeBindable = true;\n                  break;\n              }\n          }\n          if (!this.isAttributeBindable) {\n              const defaultBindingMode = $parent.definition.defaultBindingMode;\n              this.to = syntax.target;\n              this.mode = defaultBindingMode === undefined ? runtime.BindingMode.toView : defaultBindingMode;\n          }\n      }\n  }\n  class AttributeSymbol {\n      constructor(semanticModel, $element, syntax, definition, command) {\n          this.semanticModel = semanticModel;\n          this.$element = $element;\n          this.syntax = syntax;\n          this.definition = definition;\n          this.command = command;\n          this.isMultiAttrBinding = false;\n          this.res = null;\n          this.bindable = null;\n          this.isAttributeBindable = false;\n          this.isDefaultAttributeBindable = false;\n          this.isElementBindable = false;\n          this.isBindable = false;\n          this.isTemplateController = false;\n          this.target = syntax.target;\n          this.rawName = syntax.rawName;\n          this.rawValue = syntax.rawValue;\n          this.rawCommand = syntax.command;\n          this.isCustomAttribute = !!definition;\n          this.hasBindingCommand = !!command;\n          this.isHandledByBindingCommand = this.hasBindingCommand && command.handles(this);\n          this.onCustomElement = $element.isCustomElement;\n          this._isProcessed = this.rawName === 'as-element'; // as-element is processed by the semantic model and shouldn't be processed by the template compiler\n          if (this.isCustomAttribute) {\n              this.isTemplateController = !!definition.isTemplateController;\n              this.res = definition.name;\n              const value = syntax.rawValue;\n              let lastIndex = 0;\n              let multiAttrBindings;\n              for (let i = 0, ii = value.length; i < ii; ++i) {\n                  if (value.charCodeAt(i) === 59 /* Semicolon */) {\n                      if (!this.isMultiAttrBinding) {\n                          multiAttrBindings = [];\n                          this.isMultiAttrBinding = true;\n                      }\n                      const innerAttr = value.slice(lastIndex, i).trim();\n                      lastIndex = i + 1;\n                      if (innerAttr.length === 0) {\n                          continue;\n                      }\n                      for (let j = 0, jj = innerAttr.length; j < jj; ++j) {\n                          if (innerAttr.charCodeAt(j) === 58 /* Colon */) {\n                              const innerAttrName = innerAttr.slice(0, j).trim();\n                              const innerAttrValue = innerAttr.slice(j + 1).trim();\n                              const innerAttrSyntax = this.semanticModel.attrParser.parse(innerAttrName, innerAttrValue);\n                              multiAttrBindings.push(this.semanticModel.getMultiAttrBindingSymbol(innerAttrSyntax, this));\n                          }\n                      }\n                  }\n              }\n              this.$multiAttrBindings = this.isMultiAttrBinding ? multiAttrBindings : kernel.PLATFORM.emptyArray;\n              const bindables = definition.bindables;\n              if (!this.isMultiAttrBinding) {\n                  for (const prop in bindables) {\n                      const b = bindables[prop];\n                      this.to = b.property;\n                      this.mode = (b.mode !== undefined && b.mode !== runtime.BindingMode.default) ? b.mode : (definition.defaultBindingMode || runtime.BindingMode.toView);\n                      this.bindable = b;\n                      this.isBindable = this.isAttributeBindable = true;\n                      break;\n                  }\n                  if (!this.isAttributeBindable) {\n                      const defaultBindingMode = definition.defaultBindingMode;\n                      this.to = 'value';\n                      this.mode = defaultBindingMode === undefined ? runtime.BindingMode.toView : defaultBindingMode;\n                      this.isBindable = this.isAttributeBindable = this.isDefaultAttributeBindable = true;\n                  }\n              }\n          }\n          else if ($element.isCustomElement) {\n              const bindables = $element.definition.bindables;\n              for (const prop in bindables) {\n                  const b = bindables[prop];\n                  if (b.attribute === syntax.target) {\n                      this.to = b.property;\n                      this.mode = (b.mode !== undefined && b.mode !== runtime.BindingMode.default) ? b.mode : runtime.BindingMode.toView;\n                      this.bindable = b;\n                      this.isBindable = this.isElementBindable = true;\n                      break;\n                  }\n              }\n              if (!this.isElementBindable) {\n                  this.to = syntax.target;\n                  this.mode = runtime.BindingMode.toView;\n              }\n          }\n          else {\n              this.to = syntax.target;\n              this.mode = runtime.BindingMode.toView;\n          }\n      }\n      get isProcessed() {\n          return this._isProcessed;\n      }\n      markAsProcessed() {\n          this._isProcessed = true;\n          if (this.isTemplateController) {\n              this.$element.node.removeAttribute(this.rawName);\n          }\n      }\n  }\n  class ElementSymbol {\n      constructor(semanticModel, isRoot, $root, $parent, syntax, definition) {\n          this.semanticModel = semanticModel;\n          this.isRoot = isRoot;\n          this.$root = $root;\n          this.$parent = $parent;\n          this.definition = definition;\n          this._$content = null;\n          this._isMarker = false;\n          this._isTemplate = false;\n          this._isSlot = false;\n          this._isLet = false;\n          this._isLifted = false;\n          this.$root = isRoot ? this : $root;\n          this._node = syntax.node;\n          this._syntax = syntax;\n          this._name = this.node.nodeName;\n          switch (this.name) {\n              case 'TEMPLATE':\n                  this._isTemplate = true;\n                  this._$content = this.semanticModel.getElementSymbol(syntax.$content, this);\n                  break;\n              case 'SLOT':\n                  this._isSlot = true;\n                  break;\n              case 'LET':\n                  this._isLet = true;\n          }\n          this._isCustomElement = !isRoot && !!definition;\n          const attributes = syntax.$attributes;\n          const attrLen = attributes.length;\n          if (attrLen > 0) {\n              const attrSymbols = Array(attrLen);\n              for (let i = 0, ii = attrLen; i < ii; ++i) {\n                  attrSymbols[i] = this.semanticModel.getAttributeSymbol(attributes[i], this);\n              }\n              this.$attributes = attrSymbols;\n          }\n          else {\n              this.$attributes = kernel.PLATFORM.emptyArray;\n          }\n          const children = syntax.$children;\n          const childLen = children.length;\n          if (childLen > 0) {\n              const childSymbols = Array(childLen);\n              for (let i = 0, ii = childLen; i < ii; ++i) {\n                  childSymbols[i] = this.semanticModel.getElementSymbol(children[i], this);\n              }\n              this.$children = childSymbols;\n          }\n          else {\n              this.$children = kernel.PLATFORM.emptyArray;\n          }\n      }\n      get $content() {\n          return this._$content;\n      }\n      get isMarker() {\n          return this._isMarker;\n      }\n      get isTemplate() {\n          return this._isTemplate;\n      }\n      get isSlot() {\n          return this._isSlot;\n      }\n      get isLet() {\n          return this._isLet;\n      }\n      get node() {\n          return this._node;\n      }\n      get syntax() {\n          return this._syntax;\n      }\n      get name() {\n          return this._name;\n      }\n      get isCustomElement() {\n          return this._isCustomElement;\n      }\n      get nextSibling() {\n          if (!this.$parent) {\n              return null;\n          }\n          const siblings = this.$parent.$children;\n          for (let i = 0, ii = siblings.length; i < ii; ++i) {\n              if (siblings[i] === this) {\n                  const nextSibling = siblings[i + 1];\n                  return nextSibling === undefined ? null : nextSibling;\n              }\n          }\n          return null;\n      }\n      get firstChild() {\n          const firstChild = this.$children[0];\n          return firstChild === undefined ? null : firstChild;\n      }\n      get componentRoot() {\n          return this.semanticModel.root;\n      }\n      get isLifted() {\n          return this._isLifted;\n      }\n      makeTarget() {\n          this.node.classList.add('au');\n      }\n      replaceTextNodeWithMarker() {\n          const marker = ElementSyntax.createMarker();\n          const node = this.node;\n          node.parentNode.insertBefore(marker.node, node);\n          node.textContent = ' ';\n          while (node.nextSibling && node.nextSibling.nodeType === 3 /* Text */) {\n              node.parentNode.removeChild(node.nextSibling);\n          }\n          this.setToMarker(marker);\n      }\n      replaceNodeWithMarker() {\n          const marker = ElementSyntax.createMarker();\n          const node = this.node;\n          if (node.parentNode) {\n              node.parentNode.replaceChild(marker.node, node);\n          }\n          else if (this.isTemplate) {\n              node.content.appendChild(marker.node);\n          }\n          this.setToMarker(marker);\n      }\n      lift(instruction) {\n          const template = instruction.def.template = runtime.DOM.createElement('template');\n          const node = this.node;\n          if (this.isTemplate) {\n              // copy remaining attributes over to the newly created template\n              const attributes = node.attributes;\n              while (attributes.length) {\n                  const attr = attributes[0];\n                  template.setAttribute(attr.name, attr.value);\n                  node.removeAttribute(attr.name);\n              }\n              template.content.appendChild(node.content);\n              this.replaceNodeWithMarker();\n          }\n          else {\n              this.replaceNodeWithMarker();\n              template.content.appendChild(node);\n          }\n          this.addInstructions([instruction]);\n          this._isLifted = true;\n          return this.semanticModel.getTemplateElementSymbol(this.semanticModel.elParser.parse(template), this, instruction.def, null);\n      }\n      addInstructions(instructions) {\n          const def = this.$root.definition;\n          if (def.instructions === kernel.PLATFORM.emptyArray) {\n              def.instructions = [];\n          }\n          def.instructions.push(instructions);\n      }\n      setToMarker(marker) {\n          this._$content = null;\n          this._isCustomElement = this._isLet = this._isSlot = this._isTemplate = false;\n          this._isMarker = true;\n          this._name = 'AU-MARKER';\n          this._node = marker.node;\n          this._syntax = marker;\n      }\n  }\n\n  exports.TemplateCompiler = class TemplateCompiler {\n      constructor(exprParser, elParser, attrParser) {\n          this.exprParser = exprParser;\n          this.elParser = elParser;\n          this.attrParser = attrParser;\n      }\n      get name() {\n          return 'default';\n      }\n      compile(definition, resources, flags) {\n          const model = SemanticModel.create(definition, resources, this.attrParser, this.elParser, this.exprParser);\n          const root = model.root;\n          let $el = root.isTemplate ? root.$content : root;\n          while ($el = this.compileNode($el))\n              ;\n          // the flag should be passed correctly from rendering engine\n          if (root.isTemplate && (flags & runtime.ViewCompileFlags.surrogate)) {\n              this.compileSurrogate(root);\n          }\n          return definition;\n      }\n      compileNode($el) {\n          const node = $el.node;\n          const nextSibling = $el.nextSibling;\n          switch (node.nodeType) {\n              case 1 /* Element */:\n                  if ($el.isSlot) {\n                      $el.$root.definition.hasSlots = true;\n                  }\n                  else if ($el.isLet) {\n                      this.compileLetElement($el);\n                  }\n                  else if ($el.isCustomElement) {\n                      this.compileCustomElement($el);\n                  }\n                  else {\n                      this.compileElementNode($el);\n                  }\n                  if (!$el.isLifted) {\n                      let $child = $el.firstChild || $el.$content;\n                      while ($child) {\n                          $child = this.compileNode($child);\n                      }\n                  }\n                  return nextSibling;\n              case 3 /* Text */:\n                  const expression = this.exprParser.parse($el.node.wholeText, 2048 /* Interpolation */);\n                  if (expression === null) {\n                      while (($el = $el.nextSibling) && $el.node.nodeType === 3 /* Text */)\n                          ;\n                      return $el;\n                  }\n                  $el.replaceTextNodeWithMarker();\n                  $el.addInstructions([new TextBindingInstruction(expression)]);\n                  return nextSibling;\n              case 8 /* Comment */:\n                  return nextSibling;\n              case 9 /* Document */:\n                  return $el.firstChild;\n              case 10 /* DocumentType */:\n                  return nextSibling;\n              case 11 /* DocumentFragment */:\n                  return $el.firstChild;\n          }\n      }\n      compileSurrogate($el) {\n          const attributes = $el.$attributes;\n          for (let i = 0, ii = attributes.length; i < ii; ++i) {\n              const $attr = attributes[i];\n              if ($attr.isTemplateController) {\n                  throw new Error('Cannot have template controller on surrogate element.');\n              }\n              const instruction = this.compileAttribute($attr);\n              if (instruction !== null) {\n                  $el.definition.surrogates.push(instruction);\n              }\n              else {\n                  let attrInst;\n                  // Doesn't make sense for these properties as they need to be unique\n                  const name = $attr.target;\n                  if (name !== 'id' && name !== 'part' && name !== 'replace-part') {\n                      switch (name) {\n                          // TODO: handle simple surrogate style attribute\n                          case 'style':\n                              attrInst = new SetAttributeInstruction($attr.rawValue, name);\n                              break;\n                          default:\n                              attrInst = new SetAttributeInstruction($attr.rawValue, name);\n                      }\n                      $el.definition.surrogates.push(attrInst);\n                  }\n                  else {\n                      throw new Error(`Invalid surrogate attribute: ${name}`);\n                  }\n              }\n          }\n      }\n      compileElementNode($el) {\n          if ($el.$attributes.length === 0) {\n              return;\n          }\n          const attributes = $el.$attributes;\n          const attributeInstructions = [];\n          for (let i = 0, ii = attributes.length; i < ii; ++i) {\n              const $attr = attributes[i];\n              if ($attr.isProcessed)\n                  continue;\n              $attr.markAsProcessed();\n              if ($attr.isTemplateController) {\n                  let instruction = this.compileAttribute($attr);\n                  // compileAttribute will return a HydrateTemplateController if there is a binding command registered that produces one (in our case only \"for\")\n                  if (instruction.type !== \"m\" /* hydrateTemplateController */) {\n                      const name = $attr.res;\n                      instruction = new HydrateTemplateController({ name, instructions: [] }, name, [instruction], name === 'else');\n                  }\n                  // all attribute instructions preceding the template controller become children of the hydrate instruction\n                  instruction.instructions.push(...attributeInstructions);\n                  this.compileNode($el.lift(instruction));\n                  return;\n              }\n              else if ($attr.isCustomAttribute) {\n                  attributeInstructions.push(this.compileCustomAttribute($attr));\n              }\n              else {\n                  const instruction = this.compileAttribute($attr);\n                  if (instruction !== null) {\n                      attributeInstructions.push(instruction);\n                  }\n              }\n          }\n          if (attributeInstructions.length) {\n              $el.addInstructions(attributeInstructions);\n              $el.makeTarget();\n          }\n      }\n      compileCustomElement($el) {\n          if ($el.$attributes.length === 0) {\n              $el.addInstructions([new HydrateElementInstruction($el.definition.name, kernel.PLATFORM.emptyArray)]);\n              if ($el.definition.containerless) {\n                  $el.replaceNodeWithMarker();\n              }\n              else {\n                  $el.makeTarget();\n              }\n              return;\n          }\n          const attributeInstructions = [];\n          // if there is a custom element, then only the attributes that map to bindables become children of the hydrate instruction,\n          // otherwise they become sibling instructions; if there is no custom element, then sibling instructions are never appended to\n          const siblingInstructions = [];\n          const attributes = $el.$attributes;\n          for (let i = 0, ii = attributes.length; i < ii; ++i) {\n              const $attr = attributes[i];\n              if ($attr.isProcessed)\n                  continue;\n              $attr.markAsProcessed();\n              if ($attr.isTemplateController) {\n                  let instruction = this.compileAttribute($attr);\n                  // compileAttribute will return a HydrateTemplateController if there is a binding command registered that produces one (in our case only \"for\")\n                  if (instruction.type !== \"m\" /* hydrateTemplateController */) {\n                      const name = $attr.res;\n                      instruction = new HydrateTemplateController({ name, instructions: [] }, name, [instruction], name === 'else');\n                  }\n                  // all attribute instructions preceding the template controller become children of the hydrate instruction\n                  instruction.instructions.push(...attributeInstructions);\n                  this.compileNode($el.lift(instruction));\n                  return;\n              }\n              else if ($attr.isCustomAttribute) {\n                  if ($attr.isAttributeBindable) {\n                      siblingInstructions.push(this.compileCustomAttribute($attr));\n                  }\n                  else {\n                      attributeInstructions.push(this.compileCustomAttribute($attr));\n                  }\n              }\n              else {\n                  const instruction = this.compileAttribute($attr);\n                  if (instruction !== null) {\n                      if (!$attr.isElementBindable) {\n                          siblingInstructions.push(instruction);\n                      }\n                      else {\n                          attributeInstructions.push(instruction);\n                      }\n                  }\n              }\n          }\n          $el.addInstructions([new HydrateElementInstruction($el.definition.name, attributeInstructions), ...siblingInstructions]);\n          if ($el.definition.containerless) {\n              $el.replaceNodeWithMarker();\n          }\n          else {\n              $el.makeTarget();\n          }\n      }\n      compileCustomAttribute($attr) {\n          const childInstructions = [];\n          if ($attr.isMultiAttrBinding) {\n              const mBindings = $attr.$multiAttrBindings;\n              for (let j = 0, jj = mBindings.length; j < jj; ++j) {\n                  childInstructions.push(this.compileAttribute(mBindings[j]));\n              }\n          }\n          else {\n              childInstructions.push(this.compileAttribute($attr));\n          }\n          return new HydrateAttributeInstruction($attr.res, childInstructions);\n      }\n      compileLetElement($el) {\n          const letInstructions = [];\n          const attributes = $el.$attributes;\n          let toViewModel = false;\n          for (let i = 0, ii = attributes.length; ii > i; ++i) {\n              const $attr = attributes[i];\n              const to = kernel.PLATFORM.camelCase($attr.to);\n              if ($attr.hasBindingCommand) {\n                  const expr = this.exprParser.parse($attr.rawValue, 53 /* BindCommand */);\n                  letInstructions.push(new LetBindingInstruction(expr, to));\n              }\n              else if ($attr.rawName === 'to-view-model') {\n                  toViewModel = true;\n                  $el.node.removeAttribute('to-view-model');\n              }\n              else {\n                  const expr = this.exprParser.parse($attr.rawValue, 2048 /* Interpolation */);\n                  if (expr === null) {\n                      // Should just be a warning, but throw for now\n                      throw new Error(`Invalid let binding. String liternal given for attribute: ${$attr.to}`);\n                  }\n                  letInstructions.push(new LetBindingInstruction(expr, to));\n              }\n          }\n          $el.addInstructions([new LetElementInstruction(letInstructions, toViewModel)]);\n          // theoretically there's no need to replace, but to keep it consistent\n          $el.replaceNodeWithMarker();\n      }\n      compileAttribute($attr) {\n          // binding commands get priority over all; they may override default behaviors\n          // it is the responsibility of the implementor to ensure they filter out stuff they shouldn't override\n          if ($attr.isHandledByBindingCommand) {\n              return $attr.command.compile($attr);\n          }\n          // simple path for ref binding\n          const parser = this.exprParser;\n          if ($attr.target === 'ref') {\n              return new RefBindingInstruction(parser.parse($attr.rawValue, 1280 /* IsRef */));\n          }\n          // simple path for style bindings (TODO: this doesnt work, but we need to use StylePropertyBindingInstruction right?)\n          // if (target === 'style' || target === 'css') {\n          //   const expression = parser.parse(value, BindingType.Interpolation);\n          //   if (expression === null) {\n          //     return null;\n          //   }\n          //   return new StylePropertyBindingInstruction(expression, target);\n          // }\n          // plain custom attribute on any kind of element\n          if ($attr.isCustomAttribute) {\n              if (!$attr.hasBindingCommand) {\n                  const expression = parser.parse($attr.rawValue, 2048 /* Interpolation */);\n                  if (expression !== null) {\n                      return new InterpolationInstruction(expression, $attr.to);\n                  }\n                  if ($attr.isMultiAttrBinding) {\n                      return new SetPropertyInstruction($attr.rawValue, $attr.to);\n                  }\n              }\n              // intentional nested block without a statement to ensure the expression variable isn't shadowed\n              // (we're not declaring it at the outer block for better typing without explicit casting)\n              {\n                  const expression = parser.parse($attr.rawValue, 50 /* ToViewCommand */);\n                  switch ($attr.mode) {\n                      case runtime.BindingMode.oneTime:\n                          return new OneTimeBindingInstruction(expression, $attr.to);\n                      case runtime.BindingMode.fromView:\n                          return new FromViewBindingInstruction(expression, $attr.to);\n                      case runtime.BindingMode.twoWay:\n                          return new TwoWayBindingInstruction(expression, $attr.to);\n                      case runtime.BindingMode.toView:\n                      default:\n                          return new ToViewBindingInstruction(expression, $attr.to);\n                  }\n              }\n          }\n          // plain attribute on a custom element\n          if ($attr.onCustomElement) {\n              // bindable attribute\n              if ($attr.isElementBindable) {\n                  const expression = parser.parse($attr.rawValue, 2048 /* Interpolation */);\n                  if (expression === null) {\n                      // no interpolation -> make it a setProperty on the component\n                      return new SetPropertyInstruction($attr.rawValue, $attr.to);\n                  }\n                  // interpolation -> behave like toView (e.g. foo=\"${someProp}\")\n                  return new InterpolationInstruction(expression, $attr.to);\n              }\n          }\n          {\n              // plain attribute on a normal element\n              const expression = parser.parse($attr.rawValue, 2048 /* Interpolation */);\n              if (expression === null) {\n                  // no interpolation -> do not return an instruction\n                  return null;\n              }\n              // interpolation -> behave like toView (e.g. id=\"${someId}\")\n              return new InterpolationInstruction(expression, $attr.to);\n          }\n      }\n  };\n  exports.TemplateCompiler = __decorate([\n      kernel.inject(runtime.IExpressionParser, IElementParser, IAttributeParser)\n  ], exports.TemplateCompiler);\n\n  const globalResources = [\n      runtime.Compose,\n      runtime.If,\n      runtime.Else,\n      runtime.Repeat,\n      runtime.Replaceable,\n      runtime.With,\n      runtime.SanitizeValueConverter,\n      runtime.AttrBindingBehavior,\n      runtime.DebounceBindingBehavior,\n      runtime.OneTimeBindingBehavior,\n      runtime.ToViewBindingBehavior,\n      runtime.FromViewBindingBehavior,\n      runtime.SelfBindingBehavior,\n      runtime.SignalBindingBehavior,\n      runtime.ThrottleBindingBehavior,\n      runtime.TwoWayBindingBehavior,\n      runtime.UpdateTriggerBindingBehavior\n  ];\n  const defaultBindingLanguage = [\n      exports.DefaultBindingCommand,\n      exports.OneTimeBindingCommand,\n      exports.ToViewBindingCommand,\n      exports.FromViewBindingCommand,\n      exports.TwoWayBindingCommand,\n      exports.TriggerBindingCommand,\n      exports.DelegateBindingCommand,\n      exports.CaptureBindingCommand,\n      exports.CallBindingCommand,\n      exports.ForBindingCommand\n  ];\n  const BasicConfiguration = {\n      register(container) {\n          container.register(ParserRegistration, kernel.Registration.singleton(runtime.ITemplateCompiler, exports.TemplateCompiler), ...globalResources, ...defaultBindingLanguage);\n      }\n  };\n\n  exports.AttrSyntax = AttrSyntax;\n  exports.IAttributeParser = IAttributeParser;\n  exports.AttributeParser = AttributeParser;\n  exports.bindingCommand = bindingCommand;\n  exports.BindingCommandResource = BindingCommandResource;\n  exports.unescapeCode = unescapeCode;\n  exports.BasicConfiguration = BasicConfiguration;\n  exports.ElementSyntax = ElementSyntax;\n  exports.IElementParser = IElementParser;\n  exports.ParserRegistration = ParserRegistration;\n  exports.ParserState = ParserState;\n  exports.parseCore = parseCore;\n  exports.parse = parse;\n  exports.TextBindingInstruction = TextBindingInstruction;\n  exports.InterpolationInstruction = InterpolationInstruction;\n  exports.OneTimeBindingInstruction = OneTimeBindingInstruction;\n  exports.ToViewBindingInstruction = ToViewBindingInstruction;\n  exports.FromViewBindingInstruction = FromViewBindingInstruction;\n  exports.TwoWayBindingInstruction = TwoWayBindingInstruction;\n  exports.IteratorBindingInstruction = IteratorBindingInstruction;\n  exports.TriggerBindingInstruction = TriggerBindingInstruction;\n  exports.DelegateBindingInstruction = DelegateBindingInstruction;\n  exports.CaptureBindingInstruction = CaptureBindingInstruction;\n  exports.CallBindingInstruction = CallBindingInstruction;\n  exports.RefBindingInstruction = RefBindingInstruction;\n  exports.StylePropertyBindingInstruction = StylePropertyBindingInstruction;\n  exports.SetPropertyInstruction = SetPropertyInstruction;\n  exports.SetAttributeInstruction = SetAttributeInstruction;\n  exports.HydrateElementInstruction = HydrateElementInstruction;\n  exports.HydrateAttributeInstruction = HydrateAttributeInstruction;\n  exports.HydrateTemplateController = HydrateTemplateController;\n  exports.LetElementInstruction = LetElementInstruction;\n  exports.LetBindingInstruction = LetBindingInstruction;\n  exports.SemanticModel = SemanticModel;\n  exports.MultiAttributeBindingSymbol = MultiAttributeBindingSymbol;\n  exports.AttributeSymbol = AttributeSymbol;\n  exports.ElementSymbol = ElementSymbol;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@aurelia/jit/dist/index.umd.js\n");

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/index.umd.js":
/*!********************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/index.umd.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, (function (exports) { 'use strict';\n\n  const camelCaseLookup = {};\n  const kebabCaseLookup = {};\n  const PLATFORM = {\n      global: (function () {\n          // Workers don’t have `window`, only `self`\n          // https://github.com/Microsoft/tslint-microsoft-contrib/issues/415\n          // tslint:disable-next-line:no-typeof-undefined\n          if (typeof self !== 'undefined') {\n              return self;\n          }\n          // https://github.com/Microsoft/tslint-microsoft-contrib/issues/415\n          // tslint:disable-next-line:no-typeof-undefined\n          if (typeof global !== 'undefined') {\n              return global;\n          }\n          // Not all environments allow eval and Function\n          // Use only as a last resort:\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          return new Function('return this')();\n      })(),\n      emptyArray: Object.freeze([]),\n      emptyObject: Object.freeze({}),\n      /* tslint:disable-next-line:no-empty */\n      noop() { },\n      now() {\n          return performance.now();\n      },\n      camelCase(input) {\n          // benchmark: http://jsben.ch/qIz4Z\n          let value = camelCaseLookup[input];\n          if (value !== undefined)\n              return value;\n          value = '';\n          let first = true;\n          let sep = false;\n          let char;\n          for (let i = 0, ii = input.length; i < ii; ++i) {\n              char = input.charAt(i);\n              if (char === '-' || char === '.' || char === '_') {\n                  sep = true; // skip separators\n              }\n              else {\n                  value = value + (first ? char.toLowerCase() : (sep ? char.toUpperCase() : char));\n                  sep = false;\n              }\n              first = false;\n          }\n          return camelCaseLookup[input] = value;\n      },\n      kebabCase(input) {\n          // benchmark: http://jsben.ch/v7K9T\n          let value = kebabCaseLookup[input];\n          if (value !== undefined)\n              return value;\n          value = '';\n          let first = true;\n          let char, lower;\n          for (let i = 0, ii = input.length; i < ii; ++i) {\n              char = input.charAt(i);\n              lower = char.toLowerCase();\n              value = value + (first ? lower : (char !== lower ? `-${lower}` : lower));\n              first = false;\n          }\n          return kebabCaseLookup[input] = value;\n      },\n      toArray(input) {\n          // benchmark: http://jsben.ch/xjsyF\n          const len = input.length;\n          const arr = Array(len);\n          for (let i = 0; i < len; ++i) {\n              arr[i] = input[i];\n          }\n          return arr;\n      },\n      requestAnimationFrame(callback) {\n          return requestAnimationFrame(callback);\n      }\n  };\n\n  const Reporter = {\n      /* tslint:disable-next-line:no-empty */\n      write(code, ...params) { },\n      error(code, ...params) { return new Error(`Code ${code}`); }\n  };\n\n  // Shims to augment the Reflect object with methods used from the Reflect Metadata API proposal:\n  // https://www.typescriptlang.org/docs/handbook/decorators.html#metadata\n  // https://rbuckton.github.io/reflect-metadata/\n  // As the official spec proposal uses \"any\", we use it here as well and suppress related typedef linting warnings.\n  if (!('getOwnMetadata' in Reflect)) {\n      // tslint:disable-next-line:no-any\n      Reflect.getOwnMetadata = function (metadataKey, target) {\n          return target[metadataKey];\n      };\n      // tslint:disable-next-line:no-any\n      Reflect.metadata = function (metadataKey, metadataValue) {\n          return function (target) {\n              target[metadataKey] = metadataValue;\n          };\n      };\n  }\n  const DI = {\n      createContainer() {\n          return new Container();\n      },\n      getDesignParamTypes(target) {\n          return Reflect.getOwnMetadata('design:paramtypes', target) || PLATFORM.emptyArray;\n      },\n      getDependencies(type) {\n          let dependencies;\n          if (type.inject === undefined) {\n              dependencies = DI.getDesignParamTypes(type);\n          }\n          else {\n              dependencies = [];\n              let ctor = type;\n              while (typeof ctor === 'function') {\n                  if (ctor.hasOwnProperty('inject')) {\n                      dependencies.push(...ctor.inject);\n                  }\n                  ctor = Object.getPrototypeOf(ctor);\n              }\n          }\n          return dependencies;\n      },\n      createInterface(friendlyName) {\n          const Key = function (target, property, index) {\n              Key.friendlyName = friendlyName || 'Interface';\n              (target.inject || (target.inject = []))[index] = Key;\n              return target;\n          };\n          Key.noDefault = function () {\n              return Key;\n          };\n          Key.withDefault = function (configure) {\n              Key.withDefault = function () {\n                  throw Reporter.error(17, Key);\n              };\n              Key.register = function (container, key) {\n                  const trueKey = key || Key;\n                  return configure({\n                      instance(value) {\n                          return container.registerResolver(trueKey, new Resolver(trueKey, 0 /* instance */, value));\n                      },\n                      singleton(value) {\n                          return container.registerResolver(trueKey, new Resolver(trueKey, 1 /* singleton */, value));\n                      },\n                      transient(value) {\n                          return container.registerResolver(trueKey, new Resolver(trueKey, 2 /* transient */, value));\n                      },\n                      callback(value) {\n                          return container.registerResolver(trueKey, new Resolver(trueKey, 3 /* callback */, value));\n                      },\n                      aliasTo(destinationKey) {\n                          return container.registerResolver(trueKey, new Resolver(trueKey, 5 /* alias */, destinationKey));\n                      },\n                  });\n              };\n              return Key;\n          };\n          return Key;\n      },\n      inject(...dependencies) {\n          return function (target, key, descriptor) {\n              if (typeof descriptor === 'number') { // It's a parameter decorator.\n                  if (!target.hasOwnProperty('inject')) {\n                      target.inject = DI.getDesignParamTypes(target).slice();\n                  }\n                  if (dependencies.length === 1) {\n                      target.inject[descriptor] = dependencies[0];\n                  }\n              }\n              else if (key) { // It's a property decorator. Not supported by the container without plugins.\n                  const actualTarget = target.constructor;\n                  (actualTarget.inject || (actualTarget.inject = {}))[key] = dependencies[0];\n              }\n              else if (descriptor) { // It's a function decorator (not a Class constructor)\n                  const fn = descriptor.value;\n                  fn.inject = dependencies;\n              }\n              else { // It's a class decorator.\n                  if (!dependencies || dependencies.length === 0) {\n                      target.inject = DI.getDesignParamTypes(target).slice();\n                  }\n                  else {\n                      target.inject = dependencies;\n                  }\n              }\n          };\n      },\n      // tslint:disable:jsdoc-format\n      /**\n       * Registers the `target` class as a transient dependency; each time the dependency is resolved\n       * a new instance will be created.\n       *\n       * @param target The class / constructor function to register as transient.\n       * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.\n       *\n       * Example usage:\n    ```ts\n    // On an existing class\n    class Foo { }\n    DI.transient(Foo);\n    \n    // Inline declaration\n    const Foo = DI.transient(class { });\n    // Foo is now strongly typed with register\n    Foo.register(container);\n    ```\n       */\n      // tslint:enable:jsdoc-format\n      transient(target) {\n          target.register = function register(container) {\n              return Registration.transient(target, target).register(container, target);\n          };\n          return target;\n      },\n      // tslint:disable:jsdoc-format\n      /**\n       * Registers the `target` class as a singleton dependency; the class will only be created once. Each\n       * consecutive time the dependency is resolved, the same instance will be returned.\n       *\n       * @param target The class / constructor function to register as a singleton.\n       * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.\n       * Example usage:\n    ```ts\n    // On an existing class\n    class Foo { }\n    DI.singleton(Foo);\n    \n    // Inline declaration\n    const Foo = DI.singleton(class { });\n    // Foo is now strongly typed with register\n    Foo.register(container);\n    ```\n       */\n      // tslint:enable:jsdoc-format\n      singleton(target) {\n          target.register = function register(container) {\n              return Registration.singleton(target, target).register(container, target);\n          };\n          return target;\n      }\n  };\n  const IContainer = DI.createInterface().noDefault();\n  const IServiceLocator = IContainer;\n  function createResolver(getter) {\n      return function (key) {\n          const Key = function Key(target, property, descriptor) {\n              return DI.inject(Key)(target, property, descriptor);\n          };\n          Key.resolve = function (handler, requestor) {\n              return getter(key, handler, requestor);\n          };\n          return Key;\n      };\n  }\n  const inject = DI.inject;\n  function transientDecorator(target) {\n      return DI.transient(target);\n  }\n  function transient(target) {\n      return target === undefined ? transientDecorator : transientDecorator(target);\n  }\n  function singletonDecorator(target) {\n      return DI.singleton(target);\n  }\n  function singleton(target) {\n      return target === undefined ? singletonDecorator : singletonDecorator(target);\n  }\n  const all = createResolver((key, handler, requestor) => requestor.getAll(key));\n  const lazy = createResolver((key, handler, requestor) => {\n      let instance = null; // cache locally so that lazy always returns the same instance once resolved\n      return () => {\n          if (instance === null) {\n              instance = requestor.get(key);\n          }\n          return instance;\n      };\n  });\n  const optional = createResolver((key, handler, requestor) => {\n      if (requestor.has(key, true)) {\n          return requestor.get(key);\n      }\n      else {\n          return null;\n      }\n  });\n  /*@internal*/\n  class Resolver {\n      constructor(key, strategy, state) {\n          this.key = key;\n          this.strategy = strategy;\n          this.state = state;\n      }\n      register(container, key) {\n          return container.registerResolver(key || this.key, this);\n      }\n      resolve(handler, requestor) {\n          switch (this.strategy) {\n              case 0 /* instance */:\n                  return this.state;\n              case 1 /* singleton */:\n                  this.strategy = 0 /* instance */;\n                  return this.state = handler.getFactory(this.state).construct(handler);\n              case 2 /* transient */:\n                  // Always create transients from the requesting container\n                  return handler.getFactory(this.state).construct(requestor);\n              case 3 /* callback */:\n                  return this.state(handler, requestor, this);\n              case 4 /* array */:\n                  return this.state[0].resolve(handler, requestor);\n              case 5 /* alias */:\n                  return handler.get(this.state);\n              default:\n                  throw Reporter.error(6, this.strategy);\n          }\n      }\n      getFactory(container) {\n          switch (this.strategy) {\n              case 1 /* singleton */:\n              case 2 /* transient */:\n                  return container.getFactory(this.state);\n              default:\n                  return null;\n          }\n      }\n  }\n  /*@internal*/\n  class Factory {\n      constructor(type, invoker, dependencies) {\n          this.type = type;\n          this.invoker = invoker;\n          this.dependencies = dependencies;\n          this.transformers = null;\n      }\n      static create(type) {\n          const dependencies = DI.getDependencies(type);\n          const invoker = classInvokers[dependencies.length] || fallbackInvoker;\n          return new Factory(type, invoker, dependencies);\n      }\n      construct(container, dynamicDependencies) {\n          const transformers = this.transformers;\n          let instance = dynamicDependencies !== undefined\n              ? this.invoker.invokeWithDynamicDependencies(container, this.type, this.dependencies, dynamicDependencies)\n              : this.invoker.invoke(container, this.type, this.dependencies);\n          if (transformers === null) {\n              return instance;\n          }\n          for (let i = 0, ii = transformers.length; i < ii; ++i) {\n              instance = transformers[i](instance);\n          }\n          return instance;\n      }\n      registerTransformer(transformer) {\n          if (this.transformers === null) {\n              this.transformers = [];\n          }\n          this.transformers.push(transformer);\n          return true;\n      }\n  }\n  const containerResolver = {\n      resolve(handler, requestor) {\n          return requestor;\n      }\n  };\n  function isRegistry(obj) {\n      return typeof obj.register === 'function';\n  }\n  /*@internal*/\n  class Container {\n      constructor(configuration = {}) {\n          this.parent = null;\n          this.resolvers = new Map();\n          this.configuration = configuration;\n          this.factories = configuration.factories || (configuration.factories = new Map());\n          this.resolvers.set(IContainer, containerResolver);\n      }\n      register(...params) {\n          for (let i = 0, ii = params.length; i < ii; ++i) {\n              const current = params[i];\n              if (isRegistry(current)) {\n                  current.register(this);\n              }\n              else {\n                  const keys = Object.keys(current);\n                  for (let j = 0, jj = keys.length; j < jj; ++j) {\n                      const value = current[keys[j]];\n                      // note: we could remove this if-branch and call this.register directly\n                      // - the extra check is just a perf tweak to create fewer unnecessary arrays by the spread operator\n                      if (isRegistry(value)) {\n                          value.register(this);\n                      }\n                      else {\n                          this.register(value);\n                      }\n                  }\n              }\n          }\n      }\n      registerResolver(key, resolver) {\n          validateKey(key);\n          const resolvers = this.resolvers;\n          const result = resolvers.get(key);\n          if (result === undefined) {\n              resolvers.set(key, resolver);\n          }\n          else if (result instanceof Resolver && result.strategy === 4 /* array */) {\n              result.state.push(resolver);\n          }\n          else {\n              resolvers.set(key, new Resolver(key, 4 /* array */, [result, resolver]));\n          }\n          return resolver;\n      }\n      registerTransformer(key, transformer) {\n          const resolver = this.getResolver(key);\n          if (resolver === null) {\n              return false;\n          }\n          if (resolver.getFactory) {\n              const handler = resolver.getFactory(this);\n              if (handler === null) {\n                  return false;\n              }\n              return handler.registerTransformer(transformer);\n          }\n          return false;\n      }\n      getResolver(key, autoRegister = true) {\n          validateKey(key);\n          if (key.resolve) {\n              return key;\n          }\n          let current = this;\n          while (current !== null) {\n              const resolver = current.resolvers.get(key);\n              if (resolver === undefined) {\n                  if (current.parent === null) {\n                      return autoRegister ? this.jitRegister(key, current) : null;\n                  }\n                  current = current.parent;\n              }\n              else {\n                  return resolver;\n              }\n          }\n          return null;\n      }\n      has(key, searchAncestors = false) {\n          return this.resolvers.has(key)\n              ? true\n              : searchAncestors && this.parent !== null\n                  ? this.parent.has(key, true)\n                  : false;\n      }\n      get(key) {\n          validateKey(key);\n          if (key.resolve) {\n              return key.resolve(this, this);\n          }\n          let current = this;\n          while (current !== null) {\n              const resolver = current.resolvers.get(key);\n              if (resolver === undefined) {\n                  if (current.parent === null) {\n                      return this.jitRegister(key, current).resolve(current, this);\n                  }\n                  current = current.parent;\n              }\n              else {\n                  return resolver.resolve(current, this);\n              }\n          }\n      }\n      getAll(key) {\n          validateKey(key);\n          let current = this;\n          while (current !== null) {\n              const resolver = current.resolvers.get(key);\n              if (resolver === undefined) {\n                  if (this.parent === null) {\n                      return PLATFORM.emptyArray;\n                  }\n                  current = current.parent;\n              }\n              else {\n                  return buildAllResponse(resolver, current, this);\n              }\n          }\n          return PLATFORM.emptyArray;\n      }\n      getFactory(type) {\n          let factory = this.factories.get(type);\n          if (factory === undefined) {\n              factory = Factory.create(type);\n              this.factories.set(type, factory);\n          }\n          return factory;\n      }\n      createChild() {\n          const child = new Container(this.configuration);\n          child.parent = this;\n          return child;\n      }\n      jitRegister(keyAsValue, handler) {\n          if (keyAsValue.register) {\n              const registrationResolver = keyAsValue.register(handler, keyAsValue);\n              if (!(registrationResolver && registrationResolver.resolve)) {\n                  throw Reporter.error(40); // did not return a valid resolver from the static register method\n              }\n              return registrationResolver;\n          }\n          const resolver = new Resolver(keyAsValue, 1 /* singleton */, keyAsValue);\n          handler.resolvers.set(keyAsValue, resolver);\n          return resolver;\n      }\n  }\n  const Registration = {\n      instance(key, value) {\n          return new Resolver(key, 0 /* instance */, value);\n      },\n      singleton(key, value) {\n          return new Resolver(key, 1 /* singleton */, value);\n      },\n      transient(key, value) {\n          return new Resolver(key, 2 /* transient */, value);\n      },\n      callback(key, callback) {\n          return new Resolver(key, 3 /* callback */, callback);\n      },\n      alias(originalKey, aliasKey) {\n          return new Resolver(aliasKey, 5 /* alias */, originalKey);\n      },\n      interpret(interpreterKey, ...rest) {\n          return {\n              register(container) {\n                  const resolver = container.getResolver(interpreterKey);\n                  if (resolver !== null) {\n                      let registry = null;\n                      if (resolver.getFactory) {\n                          const factory = resolver.getFactory(container);\n                          if (factory !== null) {\n                              registry = factory.construct(container, rest);\n                          }\n                      }\n                      else {\n                          registry = resolver.resolve(container, container);\n                      }\n                      if (registry !== null) {\n                          registry.register(container);\n                      }\n                  }\n              }\n          };\n      }\n  };\n  /*@internal*/\n  function validateKey(key) {\n      // note: design:paramTypes which will default to Object if the param types cannot be statically analyzed by tsc\n      // this check is intended to properly report on that problem - under no circumstance should Object be a valid key anyway\n      if (key === null || key === undefined || key === Object) {\n          throw Reporter.error(5);\n      }\n  }\n  function buildAllResponse(resolver, handler, requestor) {\n      if (resolver instanceof Resolver && resolver.strategy === 4 /* array */) {\n          const state = resolver.state;\n          let i = state.length;\n          const results = new Array(i);\n          while (i--) {\n              results[i] = state[i].get(handler, requestor);\n          }\n          return results;\n      }\n      return [resolver.resolve(handler, requestor)];\n  }\n  /*@internal*/\n  const classInvokers = [\n      {\n          invoke(container, Type) {\n              return new Type();\n          },\n          invokeWithDynamicDependencies\n      },\n      {\n          invoke(container, Type, deps) {\n              return new Type(container.get(deps[0]));\n          },\n          invokeWithDynamicDependencies\n      },\n      {\n          invoke(container, Type, deps) {\n              return new Type(container.get(deps[0]), container.get(deps[1]));\n          },\n          invokeWithDynamicDependencies\n      },\n      {\n          invoke(container, Type, deps) {\n              return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]));\n          },\n          invokeWithDynamicDependencies\n      },\n      {\n          invoke(container, Type, deps) {\n              return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]));\n          },\n          invokeWithDynamicDependencies\n      },\n      {\n          invoke(container, Type, deps) {\n              return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]), container.get(deps[4]));\n          },\n          invokeWithDynamicDependencies\n      }\n  ];\n  /*@internal*/\n  const fallbackInvoker = {\n      invoke: invokeWithDynamicDependencies,\n      invokeWithDynamicDependencies\n  };\n  /*@internal*/\n  function invokeWithDynamicDependencies(container, Type, staticDependencies, dynamicDependencies) {\n      let i = staticDependencies.length;\n      let args = new Array(i);\n      let lookup;\n      while (i--) {\n          lookup = staticDependencies[i];\n          if (lookup === null || lookup === undefined) {\n              throw Reporter.error(7, `Index ${i}.`);\n          }\n          else {\n              args[i] = container.get(lookup);\n          }\n      }\n      if (dynamicDependencies !== undefined) {\n          args = args.concat(dynamicDependencies);\n      }\n      return Reflect.construct(Type, args);\n  }\n\n  exports.DI = DI;\n  exports.IContainer = IContainer;\n  exports.IServiceLocator = IServiceLocator;\n  exports.inject = inject;\n  exports.transient = transient;\n  exports.singleton = singleton;\n  exports.all = all;\n  exports.lazy = lazy;\n  exports.optional = optional;\n  exports.Resolver = Resolver;\n  exports.Factory = Factory;\n  exports.Container = Container;\n  exports.Registration = Registration;\n  exports.validateKey = validateKey;\n  exports.classInvokers = classInvokers;\n  exports.fallbackInvoker = fallbackInvoker;\n  exports.invokeWithDynamicDependencies = invokeWithDynamicDependencies;\n  exports.PLATFORM = PLATFORM;\n  exports.Reporter = Reporter;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.umd.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGF1cmVsaWEva2VybmVsL2Rpc3QvaW5kZXgudW1kLmpzP2FkYTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxFQUFFLEtBQTREO0FBQzlELEVBQUUsU0FDK0I7QUFDakMsQ0FBQyw0QkFBNEI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsY0FBYyxFQUFFO0FBQ2hCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0EscUVBQXFFLE1BQU07QUFDM0U7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFNBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsRUFBRTtBQUNoQyw4QkFBOEIsMEJBQTBCLEtBQUssR0FBRztBQUNoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTtBQUNBLG9DQUFvQyxFQUFFO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7QUFDQSxvQ0FBb0MsRUFBRTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsUUFBUTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxRQUFRO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLEVBQUU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWdELGNBQWM7O0FBRTlELENBQUM7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYXVyZWxpYS9rZXJuZWwvZGlzdC9pbmRleC51bWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KChnbG9iYWwua2VybmVsID0ge30pKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgY29uc3QgY2FtZWxDYXNlTG9va3VwID0ge307XG4gIGNvbnN0IGtlYmFiQ2FzZUxvb2t1cCA9IHt9O1xuICBjb25zdCBQTEFURk9STSA9IHtcbiAgICAgIGdsb2JhbDogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBXb3JrZXJzIGRvbuKAmXQgaGF2ZSBgd2luZG93YCwgb25seSBgc2VsZmBcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L3RzbGludC1taWNyb3NvZnQtY29udHJpYi9pc3N1ZXMvNDE1XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXR5cGVvZi11bmRlZmluZWRcbiAgICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L3RzbGludC1taWNyb3NvZnQtY29udHJpYi9pc3N1ZXMvNDE1XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXR5cGVvZi11bmRlZmluZWRcbiAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gTm90IGFsbCBlbnZpcm9ubWVudHMgYWxsb3cgZXZhbCBhbmQgRnVuY3Rpb25cbiAgICAgICAgICAvLyBVc2Ugb25seSBhcyBhIGxhc3QgcmVzb3J0OlxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mdW5jdGlvbi1jb25zdHJ1Y3Rvci13aXRoLXN0cmluZy1hcmdzXG4gICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICAgICAgfSkoKSxcbiAgICAgIGVtcHR5QXJyYXk6IE9iamVjdC5mcmVlemUoW10pLFxuICAgICAgZW1wdHlPYmplY3Q6IE9iamVjdC5mcmVlemUoe30pLFxuICAgICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5ICovXG4gICAgICBub29wKCkgeyB9LFxuICAgICAgbm93KCkge1xuICAgICAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIH0sXG4gICAgICBjYW1lbENhc2UoaW5wdXQpIHtcbiAgICAgICAgICAvLyBiZW5jaG1hcms6IGh0dHA6Ly9qc2Jlbi5jaC9xSXo0WlxuICAgICAgICAgIGxldCB2YWx1ZSA9IGNhbWVsQ2FzZUxvb2t1cFtpbnB1dF07XG4gICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgICAgICAgbGV0IHNlcCA9IGZhbHNlO1xuICAgICAgICAgIGxldCBjaGFyO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGlucHV0Lmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgY2hhciA9IGlucHV0LmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICctJyB8fCBjaGFyID09PSAnLicgfHwgY2hhciA9PT0gJ18nKSB7XG4gICAgICAgICAgICAgICAgICBzZXAgPSB0cnVlOyAvLyBza2lwIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAoZmlyc3QgPyBjaGFyLnRvTG93ZXJDYXNlKCkgOiAoc2VwID8gY2hhci50b1VwcGVyQ2FzZSgpIDogY2hhcikpO1xuICAgICAgICAgICAgICAgICAgc2VwID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNhbWVsQ2FzZUxvb2t1cFtpbnB1dF0gPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBrZWJhYkNhc2UoaW5wdXQpIHtcbiAgICAgICAgICAvLyBiZW5jaG1hcms6IGh0dHA6Ly9qc2Jlbi5jaC92N0s5VFxuICAgICAgICAgIGxldCB2YWx1ZSA9IGtlYmFiQ2FzZUxvb2t1cFtpbnB1dF07XG4gICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgICAgICAgbGV0IGNoYXIsIGxvd2VyO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGlucHV0Lmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgY2hhciA9IGlucHV0LmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgbG93ZXIgPSBjaGFyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAoZmlyc3QgPyBsb3dlciA6IChjaGFyICE9PSBsb3dlciA/IGAtJHtsb3dlcn1gIDogbG93ZXIpKTtcbiAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGtlYmFiQ2FzZUxvb2t1cFtpbnB1dF0gPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICB0b0FycmF5KGlucHV0KSB7XG4gICAgICAgICAgLy8gYmVuY2htYXJrOiBodHRwOi8vanNiZW4uY2gveGpzeUZcbiAgICAgICAgICBjb25zdCBsZW4gPSBpbnB1dC5sZW5ndGg7XG4gICAgICAgICAgY29uc3QgYXJyID0gQXJyYXkobGVuKTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgIGFycltpXSA9IGlucHV0W2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xuICAgICAgfVxuICB9O1xuXG4gIGNvbnN0IFJlcG9ydGVyID0ge1xuICAgICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5ICovXG4gICAgICB3cml0ZShjb2RlLCAuLi5wYXJhbXMpIHsgfSxcbiAgICAgIGVycm9yKGNvZGUsIC4uLnBhcmFtcykgeyByZXR1cm4gbmV3IEVycm9yKGBDb2RlICR7Y29kZX1gKTsgfVxuICB9O1xuXG4gIC8vIFNoaW1zIHRvIGF1Z21lbnQgdGhlIFJlZmxlY3Qgb2JqZWN0IHdpdGggbWV0aG9kcyB1c2VkIGZyb20gdGhlIFJlZmxlY3QgTWV0YWRhdGEgQVBJIHByb3Bvc2FsOlxuICAvLyBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9kZWNvcmF0b3JzLmh0bWwjbWV0YWRhdGFcbiAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS9cbiAgLy8gQXMgdGhlIG9mZmljaWFsIHNwZWMgcHJvcG9zYWwgdXNlcyBcImFueVwiLCB3ZSB1c2UgaXQgaGVyZSBhcyB3ZWxsIGFuZCBzdXBwcmVzcyByZWxhdGVkIHR5cGVkZWYgbGludGluZyB3YXJuaW5ncy5cbiAgaWYgKCEoJ2dldE93bk1ldGFkYXRhJyBpbiBSZWZsZWN0KSkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgUmVmbGVjdC5nZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChtZXRhZGF0YUtleSwgdGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFttZXRhZGF0YUtleV07XG4gICAgICB9O1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgUmVmbGVjdC5tZXRhZGF0YSA9IGZ1bmN0aW9uIChtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHRhcmdldFttZXRhZGF0YUtleV0gPSBtZXRhZGF0YVZhbHVlO1xuICAgICAgICAgIH07XG4gICAgICB9O1xuICB9XG4gIGNvbnN0IERJID0ge1xuICAgICAgY3JlYXRlQ29udGFpbmVyKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQ29udGFpbmVyKCk7XG4gICAgICB9LFxuICAgICAgZ2V0RGVzaWduUGFyYW1UeXBlcyh0YXJnZXQpIHtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25NZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCB0YXJnZXQpIHx8IFBMQVRGT1JNLmVtcHR5QXJyYXk7XG4gICAgICB9LFxuICAgICAgZ2V0RGVwZW5kZW5jaWVzKHR5cGUpIHtcbiAgICAgICAgICBsZXQgZGVwZW5kZW5jaWVzO1xuICAgICAgICAgIGlmICh0eXBlLmluamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IERJLmdldERlc2lnblBhcmFtVHlwZXModHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgICAgICAgICAgbGV0IGN0b3IgPSB0eXBlO1xuICAgICAgICAgICAgICB3aGlsZSAodHlwZW9mIGN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjdG9yLmhhc093blByb3BlcnR5KCdpbmplY3QnKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKC4uLmN0b3IuaW5qZWN0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRlcGVuZGVuY2llcztcbiAgICAgIH0sXG4gICAgICBjcmVhdGVJbnRlcmZhY2UoZnJpZW5kbHlOYW1lKSB7XG4gICAgICAgICAgY29uc3QgS2V5ID0gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHksIGluZGV4KSB7XG4gICAgICAgICAgICAgIEtleS5mcmllbmRseU5hbWUgPSBmcmllbmRseU5hbWUgfHwgJ0ludGVyZmFjZSc7XG4gICAgICAgICAgICAgICh0YXJnZXQuaW5qZWN0IHx8ICh0YXJnZXQuaW5qZWN0ID0gW10pKVtpbmRleF0gPSBLZXk7XG4gICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBLZXkubm9EZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gS2V5O1xuICAgICAgICAgIH07XG4gICAgICAgICAgS2V5LndpdGhEZWZhdWx0ID0gZnVuY3Rpb24gKGNvbmZpZ3VyZSkge1xuICAgICAgICAgICAgICBLZXkud2l0aERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBSZXBvcnRlci5lcnJvcigxNywgS2V5KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgS2V5LnJlZ2lzdGVyID0gZnVuY3Rpb24gKGNvbnRhaW5lciwga2V5KSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCB0cnVlS2V5ID0ga2V5IHx8IEtleTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWd1cmUoe1xuICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXIucmVnaXN0ZXJSZXNvbHZlcih0cnVlS2V5LCBuZXcgUmVzb2x2ZXIodHJ1ZUtleSwgMCAvKiBpbnN0YW5jZSAqLywgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZXRvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLnJlZ2lzdGVyUmVzb2x2ZXIodHJ1ZUtleSwgbmV3IFJlc29sdmVyKHRydWVLZXksIDEgLyogc2luZ2xldG9uICovLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNpZW50KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXIucmVnaXN0ZXJSZXNvbHZlcih0cnVlS2V5LCBuZXcgUmVzb2x2ZXIodHJ1ZUtleSwgMiAvKiB0cmFuc2llbnQgKi8sIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLnJlZ2lzdGVyUmVzb2x2ZXIodHJ1ZUtleSwgbmV3IFJlc29sdmVyKHRydWVLZXksIDMgLyogY2FsbGJhY2sgKi8sIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBhbGlhc1RvKGRlc3RpbmF0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXIucmVnaXN0ZXJSZXNvbHZlcih0cnVlS2V5LCBuZXcgUmVzb2x2ZXIodHJ1ZUtleSwgNSAvKiBhbGlhcyAqLywgZGVzdGluYXRpb25LZXkpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJldHVybiBLZXk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gS2V5O1xuICAgICAgfSxcbiAgICAgIGluamVjdCguLi5kZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gJ251bWJlcicpIHsgLy8gSXQncyBhIHBhcmFtZXRlciBkZWNvcmF0b3IuXG4gICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldC5oYXNPd25Qcm9wZXJ0eSgnaW5qZWN0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuaW5qZWN0ID0gREkuZ2V0RGVzaWduUGFyYW1UeXBlcyh0YXJnZXQpLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5pbmplY3RbZGVzY3JpcHRvcl0gPSBkZXBlbmRlbmNpZXNbMF07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5KSB7IC8vIEl0J3MgYSBwcm9wZXJ0eSBkZWNvcmF0b3IuIE5vdCBzdXBwb3J0ZWQgYnkgdGhlIGNvbnRhaW5lciB3aXRob3V0IHBsdWdpbnMuXG4gICAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxUYXJnZXQgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAgICAgICAoYWN0dWFsVGFyZ2V0LmluamVjdCB8fCAoYWN0dWFsVGFyZ2V0LmluamVjdCA9IHt9KSlba2V5XSA9IGRlcGVuZGVuY2llc1swXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yKSB7IC8vIEl0J3MgYSBmdW5jdGlvbiBkZWNvcmF0b3IgKG5vdCBhIENsYXNzIGNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgICAgICAgY29uc3QgZm4gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgZm4uaW5qZWN0ID0gZGVwZW5kZW5jaWVzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAvLyBJdCdzIGEgY2xhc3MgZGVjb3JhdG9yLlxuICAgICAgICAgICAgICAgICAgaWYgKCFkZXBlbmRlbmNpZXMgfHwgZGVwZW5kZW5jaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5pbmplY3QgPSBESS5nZXREZXNpZ25QYXJhbVR5cGVzKHRhcmdldCkuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5pbmplY3QgPSBkZXBlbmRlbmNpZXM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlOmpzZG9jLWZvcm1hdFxuICAgICAgLyoqXG4gICAgICAgKiBSZWdpc3RlcnMgdGhlIGB0YXJnZXRgIGNsYXNzIGFzIGEgdHJhbnNpZW50IGRlcGVuZGVuY3k7IGVhY2ggdGltZSB0aGUgZGVwZW5kZW5jeSBpcyByZXNvbHZlZFxuICAgICAgICogYSBuZXcgaW5zdGFuY2Ugd2lsbCBiZSBjcmVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIGNsYXNzIC8gY29uc3RydWN0b3IgZnVuY3Rpb24gdG8gcmVnaXN0ZXIgYXMgdHJhbnNpZW50LlxuICAgICAgICogQHJldHVybnMgVGhlIHNhbWUgY2xhc3MsIHdpdGggYSBzdGF0aWMgYHJlZ2lzdGVyYCBtZXRob2QgdGhhdCB0YWtlcyBhIGNvbnRhaW5lciBhbmQgcmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgcmVzb2x2ZXIuXG4gICAgICAgKlxuICAgICAgICogRXhhbXBsZSB1c2FnZTpcbiAgICBgYGB0c1xuICAgIC8vIE9uIGFuIGV4aXN0aW5nIGNsYXNzXG4gICAgY2xhc3MgRm9vIHsgfVxuICAgIERJLnRyYW5zaWVudChGb28pO1xuICAgIFxuICAgIC8vIElubGluZSBkZWNsYXJhdGlvblxuICAgIGNvbnN0IEZvbyA9IERJLnRyYW5zaWVudChjbGFzcyB7IH0pO1xuICAgIC8vIEZvbyBpcyBub3cgc3Ryb25nbHkgdHlwZWQgd2l0aCByZWdpc3RlclxuICAgIEZvby5yZWdpc3Rlcihjb250YWluZXIpO1xuICAgIGBgYFxuICAgICAgICovXG4gICAgICAvLyB0c2xpbnQ6ZW5hYmxlOmpzZG9jLWZvcm1hdFxuICAgICAgdHJhbnNpZW50KHRhcmdldCkge1xuICAgICAgICAgIHRhcmdldC5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gUmVnaXN0cmF0aW9uLnRyYW5zaWVudCh0YXJnZXQsIHRhcmdldCkucmVnaXN0ZXIoY29udGFpbmVyLCB0YXJnZXQpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH0sXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpqc2RvYy1mb3JtYXRcbiAgICAgIC8qKlxuICAgICAgICogUmVnaXN0ZXJzIHRoZSBgdGFyZ2V0YCBjbGFzcyBhcyBhIHNpbmdsZXRvbiBkZXBlbmRlbmN5OyB0aGUgY2xhc3Mgd2lsbCBvbmx5IGJlIGNyZWF0ZWQgb25jZS4gRWFjaFxuICAgICAgICogY29uc2VjdXRpdmUgdGltZSB0aGUgZGVwZW5kZW5jeSBpcyByZXNvbHZlZCwgdGhlIHNhbWUgaW5zdGFuY2Ugd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSBjbGFzcyAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGFzIGEgc2luZ2xldG9uLlxuICAgICAgICogQHJldHVybnMgVGhlIHNhbWUgY2xhc3MsIHdpdGggYSBzdGF0aWMgYHJlZ2lzdGVyYCBtZXRob2QgdGhhdCB0YWtlcyBhIGNvbnRhaW5lciBhbmQgcmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgcmVzb2x2ZXIuXG4gICAgICAgKiBFeGFtcGxlIHVzYWdlOlxuICAgIGBgYHRzXG4gICAgLy8gT24gYW4gZXhpc3RpbmcgY2xhc3NcbiAgICBjbGFzcyBGb28geyB9XG4gICAgREkuc2luZ2xldG9uKEZvbyk7XG4gICAgXG4gICAgLy8gSW5saW5lIGRlY2xhcmF0aW9uXG4gICAgY29uc3QgRm9vID0gREkuc2luZ2xldG9uKGNsYXNzIHsgfSk7XG4gICAgLy8gRm9vIGlzIG5vdyBzdHJvbmdseSB0eXBlZCB3aXRoIHJlZ2lzdGVyXG4gICAgRm9vLnJlZ2lzdGVyKGNvbnRhaW5lcik7XG4gICAgYGBgXG4gICAgICAgKi9cbiAgICAgIC8vIHRzbGludDplbmFibGU6anNkb2MtZm9ybWF0XG4gICAgICBzaW5nbGV0b24odGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0LnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWdpc3RyYXRpb24uc2luZ2xldG9uKHRhcmdldCwgdGFyZ2V0KS5yZWdpc3Rlcihjb250YWluZXIsIHRhcmdldCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICB9O1xuICBjb25zdCBJQ29udGFpbmVyID0gREkuY3JlYXRlSW50ZXJmYWNlKCkubm9EZWZhdWx0KCk7XG4gIGNvbnN0IElTZXJ2aWNlTG9jYXRvciA9IElDb250YWluZXI7XG4gIGZ1bmN0aW9uIGNyZWF0ZVJlc29sdmVyKGdldHRlcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBjb25zdCBLZXkgPSBmdW5jdGlvbiBLZXkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICByZXR1cm4gREkuaW5qZWN0KEtleSkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBLZXkucmVzb2x2ZSA9IGZ1bmN0aW9uIChoYW5kbGVyLCByZXF1ZXN0b3IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldHRlcihrZXksIGhhbmRsZXIsIHJlcXVlc3Rvcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gS2V5O1xuICAgICAgfTtcbiAgfVxuICBjb25zdCBpbmplY3QgPSBESS5pbmplY3Q7XG4gIGZ1bmN0aW9uIHRyYW5zaWVudERlY29yYXRvcih0YXJnZXQpIHtcbiAgICAgIHJldHVybiBESS50cmFuc2llbnQodGFyZ2V0KTtcbiAgfVxuICBmdW5jdGlvbiB0cmFuc2llbnQodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGFyZ2V0ID09PSB1bmRlZmluZWQgPyB0cmFuc2llbnREZWNvcmF0b3IgOiB0cmFuc2llbnREZWNvcmF0b3IodGFyZ2V0KTtcbiAgfVxuICBmdW5jdGlvbiBzaW5nbGV0b25EZWNvcmF0b3IodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gREkuc2luZ2xldG9uKHRhcmdldCk7XG4gIH1cbiAgZnVuY3Rpb24gc2luZ2xldG9uKHRhcmdldCkge1xuICAgICAgcmV0dXJuIHRhcmdldCA9PT0gdW5kZWZpbmVkID8gc2luZ2xldG9uRGVjb3JhdG9yIDogc2luZ2xldG9uRGVjb3JhdG9yKHRhcmdldCk7XG4gIH1cbiAgY29uc3QgYWxsID0gY3JlYXRlUmVzb2x2ZXIoKGtleSwgaGFuZGxlciwgcmVxdWVzdG9yKSA9PiByZXF1ZXN0b3IuZ2V0QWxsKGtleSkpO1xuICBjb25zdCBsYXp5ID0gY3JlYXRlUmVzb2x2ZXIoKGtleSwgaGFuZGxlciwgcmVxdWVzdG9yKSA9PiB7XG4gICAgICBsZXQgaW5zdGFuY2UgPSBudWxsOyAvLyBjYWNoZSBsb2NhbGx5IHNvIHRoYXQgbGF6eSBhbHdheXMgcmV0dXJucyB0aGUgc2FtZSBpbnN0YW5jZSBvbmNlIHJlc29sdmVkXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIGlmIChpbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBpbnN0YW5jZSA9IHJlcXVlc3Rvci5nZXQoa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfTtcbiAgfSk7XG4gIGNvbnN0IG9wdGlvbmFsID0gY3JlYXRlUmVzb2x2ZXIoKGtleSwgaGFuZGxlciwgcmVxdWVzdG9yKSA9PiB7XG4gICAgICBpZiAocmVxdWVzdG9yLmhhcyhrZXksIHRydWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3Rvci5nZXQoa2V5KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICB9KTtcbiAgLypAaW50ZXJuYWwqL1xuICBjbGFzcyBSZXNvbHZlciB7XG4gICAgICBjb25zdHJ1Y3RvcihrZXksIHN0cmF0ZWd5LCBzdGF0ZSkge1xuICAgICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICAgIHRoaXMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICB9XG4gICAgICByZWdpc3Rlcihjb250YWluZXIsIGtleSkge1xuICAgICAgICAgIHJldHVybiBjb250YWluZXIucmVnaXN0ZXJSZXNvbHZlcihrZXkgfHwgdGhpcy5rZXksIHRoaXMpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShoYW5kbGVyLCByZXF1ZXN0b3IpIHtcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuc3RyYXRlZ3kpIHtcbiAgICAgICAgICAgICAgY2FzZSAwIC8qIGluc3RhbmNlICovOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gICAgICAgICAgICAgIGNhc2UgMSAvKiBzaW5nbGV0b24gKi86XG4gICAgICAgICAgICAgICAgICB0aGlzLnN0cmF0ZWd5ID0gMCAvKiBpbnN0YW5jZSAqLztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlID0gaGFuZGxlci5nZXRGYWN0b3J5KHRoaXMuc3RhdGUpLmNvbnN0cnVjdChoYW5kbGVyKTtcbiAgICAgICAgICAgICAgY2FzZSAyIC8qIHRyYW5zaWVudCAqLzpcbiAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBjcmVhdGUgdHJhbnNpZW50cyBmcm9tIHRoZSByZXF1ZXN0aW5nIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIuZ2V0RmFjdG9yeSh0aGlzLnN0YXRlKS5jb25zdHJ1Y3QocmVxdWVzdG9yKTtcbiAgICAgICAgICAgICAgY2FzZSAzIC8qIGNhbGxiYWNrICovOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUoaGFuZGxlciwgcmVxdWVzdG9yLCB0aGlzKTtcbiAgICAgICAgICAgICAgY2FzZSA0IC8qIGFycmF5ICovOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVbMF0ucmVzb2x2ZShoYW5kbGVyLCByZXF1ZXN0b3IpO1xuICAgICAgICAgICAgICBjYXNlIDUgLyogYWxpYXMgKi86XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlci5nZXQodGhpcy5zdGF0ZSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICB0aHJvdyBSZXBvcnRlci5lcnJvcig2LCB0aGlzLnN0cmF0ZWd5KTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBnZXRGYWN0b3J5KGNvbnRhaW5lcikge1xuICAgICAgICAgIHN3aXRjaCAodGhpcy5zdHJhdGVneSkge1xuICAgICAgICAgICAgICBjYXNlIDEgLyogc2luZ2xldG9uICovOlxuICAgICAgICAgICAgICBjYXNlIDIgLyogdHJhbnNpZW50ICovOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5nZXRGYWN0b3J5KHRoaXMuc3RhdGUpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9XG4gIC8qQGludGVybmFsKi9cbiAgY2xhc3MgRmFjdG9yeSB7XG4gICAgICBjb25zdHJ1Y3Rvcih0eXBlLCBpbnZva2VyLCBkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgIHRoaXMuaW52b2tlciA9IGludm9rZXI7XG4gICAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm1lcnMgPSBudWxsO1xuICAgICAgfVxuICAgICAgc3RhdGljIGNyZWF0ZSh0eXBlKSB7XG4gICAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzID0gREkuZ2V0RGVwZW5kZW5jaWVzKHR5cGUpO1xuICAgICAgICAgIGNvbnN0IGludm9rZXIgPSBjbGFzc0ludm9rZXJzW2RlcGVuZGVuY2llcy5sZW5ndGhdIHx8IGZhbGxiYWNrSW52b2tlcjtcbiAgICAgICAgICByZXR1cm4gbmV3IEZhY3RvcnkodHlwZSwgaW52b2tlciwgZGVwZW5kZW5jaWVzKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0cnVjdChjb250YWluZXIsIGR5bmFtaWNEZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lcnMgPSB0aGlzLnRyYW5zZm9ybWVycztcbiAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBkeW5hbWljRGVwZW5kZW5jaWVzICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyB0aGlzLmludm9rZXIuaW52b2tlV2l0aER5bmFtaWNEZXBlbmRlbmNpZXMoY29udGFpbmVyLCB0aGlzLnR5cGUsIHRoaXMuZGVwZW5kZW5jaWVzLCBkeW5hbWljRGVwZW5kZW5jaWVzKVxuICAgICAgICAgICAgICA6IHRoaXMuaW52b2tlci5pbnZva2UoY29udGFpbmVyLCB0aGlzLnR5cGUsIHRoaXMuZGVwZW5kZW5jaWVzKTtcbiAgICAgICAgICBpZiAodHJhbnNmb3JtZXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdHJhbnNmb3JtZXJzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgaW5zdGFuY2UgPSB0cmFuc2Zvcm1lcnNbaV0oaW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9XG4gICAgICByZWdpc3RlclRyYW5zZm9ybWVyKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtZXJzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtZXJzID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudHJhbnNmb3JtZXJzLnB1c2godHJhbnNmb3JtZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICB9XG4gIGNvbnN0IGNvbnRhaW5lclJlc29sdmVyID0ge1xuICAgICAgcmVzb2x2ZShoYW5kbGVyLCByZXF1ZXN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdG9yO1xuICAgICAgfVxuICB9O1xuICBmdW5jdGlvbiBpc1JlZ2lzdHJ5KG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmoucmVnaXN0ZXIgPT09ICdmdW5jdGlvbic7XG4gIH1cbiAgLypAaW50ZXJuYWwqL1xuICBjbGFzcyBDb250YWluZXIge1xuICAgICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiA9IHt9KSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgIHRoaXMucmVzb2x2ZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgdGhpcy5mYWN0b3JpZXMgPSBjb25maWd1cmF0aW9uLmZhY3RvcmllcyB8fCAoY29uZmlndXJhdGlvbi5mYWN0b3JpZXMgPSBuZXcgTWFwKCkpO1xuICAgICAgICAgIHRoaXMucmVzb2x2ZXJzLnNldChJQ29udGFpbmVyLCBjb250YWluZXJSZXNvbHZlcik7XG4gICAgICB9XG4gICAgICByZWdpc3RlciguLi5wYXJhbXMpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBwYXJhbXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gcGFyYW1zW2ldO1xuICAgICAgICAgICAgICBpZiAoaXNSZWdpc3RyeShjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgICAgY3VycmVudC5yZWdpc3Rlcih0aGlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IGtleXMubGVuZ3RoOyBqIDwgamo7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudFtrZXlzW2pdXTtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBub3RlOiB3ZSBjb3VsZCByZW1vdmUgdGhpcyBpZi1icmFuY2ggYW5kIGNhbGwgdGhpcy5yZWdpc3RlciBkaXJlY3RseVxuICAgICAgICAgICAgICAgICAgICAgIC8vIC0gdGhlIGV4dHJhIGNoZWNrIGlzIGp1c3QgYSBwZXJmIHR3ZWFrIHRvIGNyZWF0ZSBmZXdlciB1bm5lY2Vzc2FyeSBhcnJheXMgYnkgdGhlIHNwcmVhZCBvcGVyYXRvclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlZ2lzdHJ5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5yZWdpc3Rlcih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZ2lzdGVyUmVzb2x2ZXIoa2V5LCByZXNvbHZlcikge1xuICAgICAgICAgIHZhbGlkYXRlS2V5KGtleSk7XG4gICAgICAgICAgY29uc3QgcmVzb2x2ZXJzID0gdGhpcy5yZXNvbHZlcnM7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzb2x2ZXJzLmdldChrZXkpO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXNvbHZlcnMuc2V0KGtleSwgcmVzb2x2ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZXNvbHZlciAmJiByZXN1bHQuc3RyYXRlZ3kgPT09IDQgLyogYXJyYXkgKi8pIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLnB1c2gocmVzb2x2ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZXJzLnNldChrZXksIG5ldyBSZXNvbHZlcihrZXksIDQgLyogYXJyYXkgKi8sIFtyZXN1bHQsIHJlc29sdmVyXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZXI7XG4gICAgICB9XG4gICAgICByZWdpc3RlclRyYW5zZm9ybWVyKGtleSwgdHJhbnNmb3JtZXIpIHtcbiAgICAgICAgICBjb25zdCByZXNvbHZlciA9IHRoaXMuZ2V0UmVzb2x2ZXIoa2V5KTtcbiAgICAgICAgICBpZiAocmVzb2x2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzb2x2ZXIuZ2V0RmFjdG9yeSkge1xuICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gcmVzb2x2ZXIuZ2V0RmFjdG9yeSh0aGlzKTtcbiAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlci5yZWdpc3RlclRyYW5zZm9ybWVyKHRyYW5zZm9ybWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZ2V0UmVzb2x2ZXIoa2V5LCBhdXRvUmVnaXN0ZXIgPSB0cnVlKSB7XG4gICAgICAgICAgdmFsaWRhdGVLZXkoa2V5KTtcbiAgICAgICAgICBpZiAoa2V5LnJlc29sdmUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzO1xuICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyID0gY3VycmVudC5yZXNvbHZlcnMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgIGlmIChyZXNvbHZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXV0b1JlZ2lzdGVyID8gdGhpcy5qaXRSZWdpc3RlcihrZXksIGN1cnJlbnQpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGhhcyhrZXksIHNlYXJjaEFuY2VzdG9ycyA9IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZXJzLmhhcyhrZXkpXG4gICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICA6IHNlYXJjaEFuY2VzdG9ycyAmJiB0aGlzLnBhcmVudCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgPyB0aGlzLnBhcmVudC5oYXMoa2V5LCB0cnVlKVxuICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICB2YWxpZGF0ZUtleShrZXkpO1xuICAgICAgICAgIGlmIChrZXkucmVzb2x2ZSkge1xuICAgICAgICAgICAgICByZXR1cm4ga2V5LnJlc29sdmUodGhpcywgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBjdXJyZW50ID0gdGhpcztcbiAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb25zdCByZXNvbHZlciA9IGN1cnJlbnQucmVzb2x2ZXJzLmdldChrZXkpO1xuICAgICAgICAgICAgICBpZiAocmVzb2x2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQucGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaml0UmVnaXN0ZXIoa2V5LCBjdXJyZW50KS5yZXNvbHZlKGN1cnJlbnQsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyLnJlc29sdmUoY3VycmVudCwgdGhpcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBnZXRBbGwoa2V5KSB7XG4gICAgICAgICAgdmFsaWRhdGVLZXkoa2V5KTtcbiAgICAgICAgICBsZXQgY3VycmVudCA9IHRoaXM7XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjdXJyZW50LnJlc29sdmVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgaWYgKHJlc29sdmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQTEFURk9STS5lbXB0eUFycmF5O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkQWxsUmVzcG9uc2UocmVzb2x2ZXIsIGN1cnJlbnQsIHRoaXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBQTEFURk9STS5lbXB0eUFycmF5O1xuICAgICAgfVxuICAgICAgZ2V0RmFjdG9yeSh0eXBlKSB7XG4gICAgICAgICAgbGV0IGZhY3RvcnkgPSB0aGlzLmZhY3Rvcmllcy5nZXQodHlwZSk7XG4gICAgICAgICAgaWYgKGZhY3RvcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBmYWN0b3J5ID0gRmFjdG9yeS5jcmVhdGUodHlwZSk7XG4gICAgICAgICAgICAgIHRoaXMuZmFjdG9yaWVzLnNldCh0eXBlLCBmYWN0b3J5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgICB9XG4gICAgICBjcmVhdGVDaGlsZCgpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IG5ldyBDb250YWluZXIodGhpcy5jb25maWd1cmF0aW9uKTtcbiAgICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cbiAgICAgIGppdFJlZ2lzdGVyKGtleUFzVmFsdWUsIGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoa2V5QXNWYWx1ZS5yZWdpc3Rlcikge1xuICAgICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb25SZXNvbHZlciA9IGtleUFzVmFsdWUucmVnaXN0ZXIoaGFuZGxlciwga2V5QXNWYWx1ZSk7XG4gICAgICAgICAgICAgIGlmICghKHJlZ2lzdHJhdGlvblJlc29sdmVyICYmIHJlZ2lzdHJhdGlvblJlc29sdmVyLnJlc29sdmUpKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBSZXBvcnRlci5lcnJvcig0MCk7IC8vIGRpZCBub3QgcmV0dXJuIGEgdmFsaWQgcmVzb2x2ZXIgZnJvbSB0aGUgc3RhdGljIHJlZ2lzdGVyIG1ldGhvZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZWdpc3RyYXRpb25SZXNvbHZlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgUmVzb2x2ZXIoa2V5QXNWYWx1ZSwgMSAvKiBzaW5nbGV0b24gKi8sIGtleUFzVmFsdWUpO1xuICAgICAgICAgIGhhbmRsZXIucmVzb2x2ZXJzLnNldChrZXlBc1ZhbHVlLCByZXNvbHZlcik7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVyO1xuICAgICAgfVxuICB9XG4gIGNvbnN0IFJlZ2lzdHJhdGlvbiA9IHtcbiAgICAgIGluc3RhbmNlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc29sdmVyKGtleSwgMCAvKiBpbnN0YW5jZSAqLywgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIHNpbmdsZXRvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlcihrZXksIDEgLyogc2luZ2xldG9uICovLCB2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgdHJhbnNpZW50KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc29sdmVyKGtleSwgMiAvKiB0cmFuc2llbnQgKi8sIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBjYWxsYmFjayhrZXksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlcihrZXksIDMgLyogY2FsbGJhY2sgKi8sIGNhbGxiYWNrKTtcbiAgICAgIH0sXG4gICAgICBhbGlhcyhvcmlnaW5hbEtleSwgYWxpYXNLZXkpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFJlc29sdmVyKGFsaWFzS2V5LCA1IC8qIGFsaWFzICovLCBvcmlnaW5hbEtleSk7XG4gICAgICB9LFxuICAgICAgaW50ZXJwcmV0KGludGVycHJldGVyS2V5LCAuLi5yZXN0KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXIoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlciA9IGNvbnRhaW5lci5nZXRSZXNvbHZlcihpbnRlcnByZXRlcktleSk7XG4gICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnaXN0cnkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlci5nZXRGYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSByZXNvbHZlci5nZXRGYWN0b3J5KGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWN0b3J5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyeSA9IGZhY3RvcnkuY29uc3RydWN0KGNvbnRhaW5lciwgcmVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJ5ID0gcmVzb2x2ZXIucmVzb2x2ZShjb250YWluZXIsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyeS5yZWdpc3Rlcihjb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICB9XG4gIH07XG4gIC8qQGludGVybmFsKi9cbiAgZnVuY3Rpb24gdmFsaWRhdGVLZXkoa2V5KSB7XG4gICAgICAvLyBub3RlOiBkZXNpZ246cGFyYW1UeXBlcyB3aGljaCB3aWxsIGRlZmF1bHQgdG8gT2JqZWN0IGlmIHRoZSBwYXJhbSB0eXBlcyBjYW5ub3QgYmUgc3RhdGljYWxseSBhbmFseXplZCBieSB0c2NcbiAgICAgIC8vIHRoaXMgY2hlY2sgaXMgaW50ZW5kZWQgdG8gcHJvcGVybHkgcmVwb3J0IG9uIHRoYXQgcHJvYmxlbSAtIHVuZGVyIG5vIGNpcmN1bXN0YW5jZSBzaG91bGQgT2JqZWN0IGJlIGEgdmFsaWQga2V5IGFueXdheVxuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZCB8fCBrZXkgPT09IE9iamVjdCkge1xuICAgICAgICAgIHRocm93IFJlcG9ydGVyLmVycm9yKDUpO1xuICAgICAgfVxuICB9XG4gIGZ1bmN0aW9uIGJ1aWxkQWxsUmVzcG9uc2UocmVzb2x2ZXIsIGhhbmRsZXIsIHJlcXVlc3Rvcikge1xuICAgICAgaWYgKHJlc29sdmVyIGluc3RhbmNlb2YgUmVzb2x2ZXIgJiYgcmVzb2x2ZXIuc3RyYXRlZ3kgPT09IDQgLyogYXJyYXkgKi8pIHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IHJlc29sdmVyLnN0YXRlO1xuICAgICAgICAgIGxldCBpID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkoaSk7XG4gICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICByZXN1bHRzW2ldID0gc3RhdGVbaV0uZ2V0KGhhbmRsZXIsIHJlcXVlc3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtyZXNvbHZlci5yZXNvbHZlKGhhbmRsZXIsIHJlcXVlc3RvcildO1xuICB9XG4gIC8qQGludGVybmFsKi9cbiAgY29uc3QgY2xhc3NJbnZva2VycyA9IFtcbiAgICAgIHtcbiAgICAgICAgICBpbnZva2UoY29udGFpbmVyLCBUeXBlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgVHlwZSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW52b2tlV2l0aER5bmFtaWNEZXBlbmRlbmNpZXNcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICAgaW52b2tlKGNvbnRhaW5lciwgVHlwZSwgZGVwcykge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFR5cGUoY29udGFpbmVyLmdldChkZXBzWzBdKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbnZva2VXaXRoRHluYW1pY0RlcGVuZGVuY2llc1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgICBpbnZva2UoY29udGFpbmVyLCBUeXBlLCBkZXBzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgVHlwZShjb250YWluZXIuZ2V0KGRlcHNbMF0pLCBjb250YWluZXIuZ2V0KGRlcHNbMV0pKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludm9rZVdpdGhEeW5hbWljRGVwZW5kZW5jaWVzXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAgIGludm9rZShjb250YWluZXIsIFR5cGUsIGRlcHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUeXBlKGNvbnRhaW5lci5nZXQoZGVwc1swXSksIGNvbnRhaW5lci5nZXQoZGVwc1sxXSksIGNvbnRhaW5lci5nZXQoZGVwc1syXSkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW52b2tlV2l0aER5bmFtaWNEZXBlbmRlbmNpZXNcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICAgaW52b2tlKGNvbnRhaW5lciwgVHlwZSwgZGVwcykge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFR5cGUoY29udGFpbmVyLmdldChkZXBzWzBdKSwgY29udGFpbmVyLmdldChkZXBzWzFdKSwgY29udGFpbmVyLmdldChkZXBzWzJdKSwgY29udGFpbmVyLmdldChkZXBzWzNdKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbnZva2VXaXRoRHluYW1pY0RlcGVuZGVuY2llc1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgICBpbnZva2UoY29udGFpbmVyLCBUeXBlLCBkZXBzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgVHlwZShjb250YWluZXIuZ2V0KGRlcHNbMF0pLCBjb250YWluZXIuZ2V0KGRlcHNbMV0pLCBjb250YWluZXIuZ2V0KGRlcHNbMl0pLCBjb250YWluZXIuZ2V0KGRlcHNbM10pLCBjb250YWluZXIuZ2V0KGRlcHNbNF0pKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludm9rZVdpdGhEeW5hbWljRGVwZW5kZW5jaWVzXG4gICAgICB9XG4gIF07XG4gIC8qQGludGVybmFsKi9cbiAgY29uc3QgZmFsbGJhY2tJbnZva2VyID0ge1xuICAgICAgaW52b2tlOiBpbnZva2VXaXRoRHluYW1pY0RlcGVuZGVuY2llcyxcbiAgICAgIGludm9rZVdpdGhEeW5hbWljRGVwZW5kZW5jaWVzXG4gIH07XG4gIC8qQGludGVybmFsKi9cbiAgZnVuY3Rpb24gaW52b2tlV2l0aER5bmFtaWNEZXBlbmRlbmNpZXMoY29udGFpbmVyLCBUeXBlLCBzdGF0aWNEZXBlbmRlbmNpZXMsIGR5bmFtaWNEZXBlbmRlbmNpZXMpIHtcbiAgICAgIGxldCBpID0gc3RhdGljRGVwZW5kZW5jaWVzLmxlbmd0aDtcbiAgICAgIGxldCBhcmdzID0gbmV3IEFycmF5KGkpO1xuICAgICAgbGV0IGxvb2t1cDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBsb29rdXAgPSBzdGF0aWNEZXBlbmRlbmNpZXNbaV07XG4gICAgICAgICAgaWYgKGxvb2t1cCA9PT0gbnVsbCB8fCBsb29rdXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICB0aHJvdyBSZXBvcnRlci5lcnJvcig3LCBgSW5kZXggJHtpfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGFyZ3NbaV0gPSBjb250YWluZXIuZ2V0KGxvb2t1cCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGR5bmFtaWNEZXBlbmRlbmNpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChkeW5hbWljRGVwZW5kZW5jaWVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdChUeXBlLCBhcmdzKTtcbiAgfVxuXG4gIGV4cG9ydHMuREkgPSBESTtcbiAgZXhwb3J0cy5JQ29udGFpbmVyID0gSUNvbnRhaW5lcjtcbiAgZXhwb3J0cy5JU2VydmljZUxvY2F0b3IgPSBJU2VydmljZUxvY2F0b3I7XG4gIGV4cG9ydHMuaW5qZWN0ID0gaW5qZWN0O1xuICBleHBvcnRzLnRyYW5zaWVudCA9IHRyYW5zaWVudDtcbiAgZXhwb3J0cy5zaW5nbGV0b24gPSBzaW5nbGV0b247XG4gIGV4cG9ydHMuYWxsID0gYWxsO1xuICBleHBvcnRzLmxhenkgPSBsYXp5O1xuICBleHBvcnRzLm9wdGlvbmFsID0gb3B0aW9uYWw7XG4gIGV4cG9ydHMuUmVzb2x2ZXIgPSBSZXNvbHZlcjtcbiAgZXhwb3J0cy5GYWN0b3J5ID0gRmFjdG9yeTtcbiAgZXhwb3J0cy5Db250YWluZXIgPSBDb250YWluZXI7XG4gIGV4cG9ydHMuUmVnaXN0cmF0aW9uID0gUmVnaXN0cmF0aW9uO1xuICBleHBvcnRzLnZhbGlkYXRlS2V5ID0gdmFsaWRhdGVLZXk7XG4gIGV4cG9ydHMuY2xhc3NJbnZva2VycyA9IGNsYXNzSW52b2tlcnM7XG4gIGV4cG9ydHMuZmFsbGJhY2tJbnZva2VyID0gZmFsbGJhY2tJbnZva2VyO1xuICBleHBvcnRzLmludm9rZVdpdGhEeW5hbWljRGVwZW5kZW5jaWVzID0gaW52b2tlV2l0aER5bmFtaWNEZXBlbmRlbmNpZXM7XG4gIGV4cG9ydHMuUExBVEZPUk0gPSBQTEFURk9STTtcbiAgZXhwb3J0cy5SZXBvcnRlciA9IFJlcG9ydGVyO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC51bWQuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@aurelia/kernel/dist/index.umd.js\n");

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/index.umd.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/index.umd.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @aurelia/kernel */ \"./node_modules/@aurelia/kernel/dist/index.umd.js\")) :\n    undefined;\n}(this, (function (exports,kernel) { 'use strict';\n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation. All rights reserved.\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n    this file except in compliance with the License. You may obtain a copy of the\n    License at http://www.apache.org/licenses/LICENSE-2.0\n\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n    MERCHANTABLITY OR NON-INFRINGEMENT.\n\n    See the Apache Version 2.0 License for specific language governing permissions\n    and limitations under the License.\n    ***************************************************************************** */\n\n    function __decorate(decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    }\n\n    (function (LifecycleFlags) {\n        LifecycleFlags[LifecycleFlags[\"none\"] = 0] = \"none\";\n        LifecycleFlags[LifecycleFlags[\"mustEvaluate\"] = 524288] = \"mustEvaluate\";\n        LifecycleFlags[LifecycleFlags[\"mutation\"] = 3] = \"mutation\";\n        LifecycleFlags[LifecycleFlags[\"isCollectionMutation\"] = 1] = \"isCollectionMutation\";\n        LifecycleFlags[LifecycleFlags[\"isInstanceMutation\"] = 2] = \"isInstanceMutation\";\n        LifecycleFlags[LifecycleFlags[\"update\"] = 28] = \"update\";\n        LifecycleFlags[LifecycleFlags[\"updateTargetObserver\"] = 4] = \"updateTargetObserver\";\n        LifecycleFlags[LifecycleFlags[\"updateTargetInstance\"] = 8] = \"updateTargetInstance\";\n        LifecycleFlags[LifecycleFlags[\"updateSourceExpression\"] = 16] = \"updateSourceExpression\";\n        LifecycleFlags[LifecycleFlags[\"from\"] = 524256] = \"from\";\n        LifecycleFlags[LifecycleFlags[\"fromFlush\"] = 96] = \"fromFlush\";\n        LifecycleFlags[LifecycleFlags[\"fromAsyncFlush\"] = 32] = \"fromAsyncFlush\";\n        LifecycleFlags[LifecycleFlags[\"fromSyncFlush\"] = 64] = \"fromSyncFlush\";\n        LifecycleFlags[LifecycleFlags[\"fromStartTask\"] = 128] = \"fromStartTask\";\n        LifecycleFlags[LifecycleFlags[\"fromStopTask\"] = 256] = \"fromStopTask\";\n        LifecycleFlags[LifecycleFlags[\"fromBind\"] = 512] = \"fromBind\";\n        LifecycleFlags[LifecycleFlags[\"fromUnbind\"] = 1024] = \"fromUnbind\";\n        LifecycleFlags[LifecycleFlags[\"fromAttach\"] = 2048] = \"fromAttach\";\n        LifecycleFlags[LifecycleFlags[\"fromDetach\"] = 4096] = \"fromDetach\";\n        LifecycleFlags[LifecycleFlags[\"fromCache\"] = 8192] = \"fromCache\";\n        LifecycleFlags[LifecycleFlags[\"fromCreate\"] = 16384] = \"fromCreate\";\n        LifecycleFlags[LifecycleFlags[\"fromDOMEvent\"] = 32768] = \"fromDOMEvent\";\n        LifecycleFlags[LifecycleFlags[\"fromObserverSetter\"] = 65536] = \"fromObserverSetter\";\n        LifecycleFlags[LifecycleFlags[\"fromBindableHandler\"] = 131072] = \"fromBindableHandler\";\n        LifecycleFlags[LifecycleFlags[\"fromLifecycleTask\"] = 262144] = \"fromLifecycleTask\";\n        LifecycleFlags[LifecycleFlags[\"parentUnmountQueued\"] = 1048576] = \"parentUnmountQueued\";\n        // this flag is for the synchronous flush before detach (no point in updating the\n        // DOM if it's about to be detached)\n        LifecycleFlags[LifecycleFlags[\"doNotUpdateDOM\"] = 2097152] = \"doNotUpdateDOM\";\n    })(exports.LifecycleFlags || (exports.LifecycleFlags = {}));\n    (function (MutationKind) {\n        MutationKind[MutationKind[\"instance\"] = 1] = \"instance\";\n        MutationKind[MutationKind[\"collection\"] = 2] = \"collection\";\n    })(exports.MutationKind || (exports.MutationKind = {}));\n\n    const IRenderable = kernel.DI.createInterface().noDefault();\n    const IViewFactory = kernel.DI.createInterface().noDefault();\n    const marker = Object.freeze(Object.create(null));\n    const ILifecycle = kernel.DI.createInterface().withDefault(x => x.singleton(Lifecycle));\n    const IFlushLifecycle = ILifecycle;\n    const IBindLifecycle = ILifecycle;\n    const IAttachLifecycle = ILifecycle;\n    /*@internal*/\n    class Lifecycle {\n        constructor() {\n            /*@internal*/ this.bindDepth = 0;\n            /*@internal*/ this.attachDepth = 0;\n            /*@internal*/ this.detachDepth = 0;\n            /*@internal*/ this.unbindDepth = 0;\n            /*@internal*/ this.flushHead = this;\n            /*@internal*/ this.flushTail = this;\n            /*@internal*/ this.connectHead = this; // this cast is safe because we know exactly which properties we'll use\n            /*@internal*/ this.connectTail = this;\n            /*@internal*/ this.patchHead = this;\n            /*@internal*/ this.patchTail = this;\n            /*@internal*/ this.boundHead = this;\n            /*@internal*/ this.boundTail = this;\n            /*@internal*/ this.mountHead = this;\n            /*@internal*/ this.mountTail = this;\n            /*@internal*/ this.attachedHead = this;\n            /*@internal*/ this.attachedTail = this;\n            /*@internal*/ this.unmountHead = this;\n            /*@internal*/ this.unmountTail = this;\n            /*@internal*/ this.detachedHead = this; //LOL\n            /*@internal*/ this.detachedTail = this;\n            /*@internal*/ this.unbindAfterDetachHead = this;\n            /*@internal*/ this.unbindAfterDetachTail = this;\n            /*@internal*/ this.unboundHead = this;\n            /*@internal*/ this.unboundTail = this;\n            /*@internal*/ this.flushed = null;\n            /*@internal*/ this.promise = Promise.resolve();\n            /*@internal*/ this.flushCount = 0;\n            /*@internal*/ this.connectCount = 0;\n            /*@internal*/ this.patchCount = 0;\n            /*@internal*/ this.boundCount = 0;\n            /*@internal*/ this.mountCount = 0;\n            /*@internal*/ this.attachedCount = 0;\n            /*@internal*/ this.unmountCount = 0;\n            /*@internal*/ this.detachedCount = 0;\n            /*@internal*/ this.unbindAfterDetachCount = 0;\n            /*@internal*/ this.unboundCount = 0;\n            // These are dummy properties to make the lifecycle conform to the interfaces\n            // of the components it manages. This allows the lifecycle itself to be the first link\n            // in the chain and removes the need for an additional null check on each addition.\n            /*@internal*/ this.$nextFlush = marker;\n            /*@internal*/ this.flush = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextConnect = marker;\n            /*@internal*/ this.connect = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextPatch = marker;\n            /*@internal*/ this.patch = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextBound = marker;\n            /*@internal*/ this.bound = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextMount = marker;\n            /*@internal*/ this.$mount = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextAttached = marker;\n            /*@internal*/ this.attached = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextUnmount = marker;\n            /*@internal*/ this.$unmount = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextDetached = marker;\n            /*@internal*/ this.detached = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextUnbindAfterDetach = marker;\n            /*@internal*/ this.$unbind = kernel.PLATFORM.noop;\n            /*@internal*/ this.$nextUnbound = marker;\n            /*@internal*/ this.unbound = kernel.PLATFORM.noop;\n            /*@internal*/ this.task = null;\n        }\n        registerTask(task) {\n            if (this.task === null) {\n                this.task = new AggregateLifecycleTask();\n            }\n            this.task.addTask(task);\n        }\n        finishTask(task) {\n            if (this.task !== null) {\n                if (this.task === task) {\n                    this.task = null;\n                }\n                else {\n                    this.task.removeTask(task);\n                }\n            }\n        }\n        enqueueFlush(requestor) {\n            // Queue a flush() callback; the depth is just for debugging / testing purposes and has\n            // no effect on execution. flush() will automatically be invoked when the promise resolves,\n            // or it can be manually invoked synchronously.\n            if (this.flushHead === this) {\n                this.flushed = this.promise.then(() => this.processFlushQueue(exports.LifecycleFlags.fromAsyncFlush));\n            }\n            if (requestor.$nextFlush === null) {\n                requestor.$nextFlush = marker;\n                this.flushTail.$nextFlush = requestor;\n                this.flushTail = requestor;\n                ++this.flushCount;\n            }\n            return this.flushed;\n        }\n        processFlushQueue(flags) {\n            flags |= exports.LifecycleFlags.fromSyncFlush;\n            // flush callbacks may lead to additional flush operations, so keep looping until\n            // the flush head is back to `this` (though this will typically happen in the first iteration)\n            while (this.flushCount > 0) {\n                let current = this.flushHead.$nextFlush;\n                this.flushHead = this.flushTail = this;\n                this.flushCount = 0;\n                let next;\n                do {\n                    next = current.$nextFlush;\n                    current.$nextFlush = null;\n                    current.flush(flags);\n                    current = next;\n                } while (current !== marker);\n            }\n        }\n        beginBind() {\n            ++this.bindDepth;\n        }\n        enqueueBound(requestor) {\n            // build a standard singly linked list for bound callbacks\n            if (requestor.$nextBound === null) {\n                requestor.$nextBound = marker;\n                this.boundTail.$nextBound = requestor;\n                this.boundTail = requestor;\n                ++this.boundCount;\n            }\n        }\n        enqueueConnect(requestor) {\n            // enqueue connect and patch calls in separate lists so that they can be invoked\n            // independently from eachother\n            // TODO: see if we can eliminate/optimize some of this, because this is a relatively hot path\n            // (first get all the necessary integration tests working, then look for optimizations)\n            // build a standard singly linked list for connect callbacks\n            if (requestor.$nextConnect === null) {\n                requestor.$nextConnect = marker;\n                this.connectTail.$nextConnect = requestor;\n                this.connectTail = requestor;\n                ++this.connectCount;\n            }\n            // build a standard singly linked list for patch callbacks\n            if (requestor.$nextPatch === null) {\n                requestor.$nextPatch = marker;\n                this.patchTail.$nextPatch = requestor;\n                this.patchTail = requestor;\n                ++this.patchCount;\n            }\n        }\n        processConnectQueue(flags) {\n            // connects cannot lead to additional connects, so we don't need to loop here\n            if (this.connectCount > 0) {\n                this.connectCount = 0;\n                let current = this.connectHead.$nextConnect;\n                this.connectHead = this.connectTail = this;\n                let next;\n                do {\n                    current.connect(flags);\n                    next = current.$nextConnect;\n                    current.$nextConnect = null;\n                    current = next;\n                } while (current !== marker);\n            }\n        }\n        processPatchQueue(flags) {\n            // flush before patching, but only if this is the initial bind;\n            // no DOM is attached yet so we can safely let everything propagate\n            if (flags & exports.LifecycleFlags.fromStartTask) {\n                this.processFlushQueue(flags | exports.LifecycleFlags.fromSyncFlush);\n            }\n            // patch callbacks may lead to additional bind operations, so keep looping until\n            // the patch head is back to `this` (though this will typically happen in the first iteration)\n            while (this.patchCount > 0) {\n                this.patchCount = 0;\n                let current = this.patchHead.$nextPatch;\n                this.patchHead = this.patchTail = this;\n                let next;\n                do {\n                    current.patch(flags);\n                    next = current.$nextPatch;\n                    current.$nextPatch = null;\n                    current = next;\n                } while (current !== marker);\n            }\n        }\n        endBind(flags) {\n            // close / shrink a bind batch\n            if (--this.bindDepth === 0) {\n                if (this.task !== null && !this.task.done) {\n                    this.task.owner = this;\n                    return this.task;\n                }\n                this.processBindQueue(flags);\n                return LifecycleTask.done;\n            }\n        }\n        processBindQueue(flags) {\n            // flush before processing bound callbacks, but only if this is the initial bind;\n            // no DOM is attached yet so we can safely let everything propagate\n            if (flags & exports.LifecycleFlags.fromStartTask) {\n                this.processFlushQueue(flags | exports.LifecycleFlags.fromSyncFlush);\n            }\n            // bound callbacks may lead to additional bind operations, so keep looping until\n            // the bound head is back to `this` (though this will typically happen in the first iteration)\n            while (this.boundCount > 0) {\n                this.boundCount = 0;\n                let current = this.boundHead.$nextBound;\n                let next;\n                this.boundHead = this.boundTail = this;\n                do {\n                    current.bound(flags);\n                    next = current.$nextBound;\n                    current.$nextBound = null;\n                    current = next;\n                } while (current !== marker);\n            }\n        }\n        beginUnbind() {\n            // open up / expand an unbind batch; the very first caller will close it again with endUnbind\n            ++this.unbindDepth;\n        }\n        enqueueUnbound(requestor) {\n            // This method is idempotent; adding the same item more than once has the same effect as\n            // adding it once.\n            // build a standard singly linked list for unbound callbacks\n            if (requestor.$nextUnbound === null) {\n                requestor.$nextUnbound = marker;\n                this.unboundTail.$nextUnbound = requestor;\n                this.unboundTail = requestor;\n                ++this.unboundCount;\n            }\n        }\n        endUnbind(flags) {\n            // close / shrink an unbind batch\n            if (--this.unbindDepth === 0) {\n                if (this.task !== null && !this.task.done) {\n                    this.task.owner = this;\n                    return this.task;\n                }\n                this.processUnbindQueue(flags);\n                return LifecycleTask.done;\n            }\n        }\n        processUnbindQueue(flags) {\n            // unbound callbacks may lead to additional unbind operations, so keep looping until\n            // the unbound head is back to `this` (though this will typically happen in the first iteration)\n            while (this.unboundCount > 0) {\n                this.unboundCount = 0;\n                let current = this.unboundHead.$nextUnbound;\n                let next;\n                this.unboundHead = this.unboundTail = this;\n                do {\n                    current.unbound(flags);\n                    next = current.$nextUnbound;\n                    current.$nextUnbound = null;\n                    current = next;\n                } while (current !== marker);\n            }\n        }\n        beginAttach() {\n            // open up / expand an attach batch; the very first caller will close it again with endAttach\n            ++this.attachDepth;\n        }\n        enqueueMount(requestor) {\n            // This method is idempotent; adding the same item more than once has the same effect as\n            // adding it once.\n            // build a standard singly linked list for mount callbacks\n            if (requestor.$nextMount === null) {\n                requestor.$nextMount = marker;\n                this.mountTail.$nextMount = requestor;\n                this.mountTail = requestor;\n                ++this.mountCount;\n            }\n        }\n        enqueueAttached(requestor) {\n            // This method is idempotent; adding the same item more than once has the same effect as\n            // adding it once.\n            // build a standard singly linked list for attached callbacks\n            if (requestor.$nextAttached === null) {\n                requestor.$nextAttached = marker;\n                this.attachedTail.$nextAttached = requestor;\n                this.attachedTail = requestor;\n                ++this.attachedCount;\n            }\n        }\n        endAttach(flags) {\n            // close / shrink an attach batch\n            if (--this.attachDepth === 0) {\n                if (this.task !== null && !this.task.done) {\n                    this.task.owner = this;\n                    return this.task;\n                }\n                this.processAttachQueue(flags);\n                return LifecycleTask.done;\n            }\n        }\n        processAttachQueue(flags) {\n            // flush and patch before starting the attach lifecycle to ensure batched collection changes are propagated to repeaters\n            // and the DOM is updated\n            this.processFlushQueue(flags | exports.LifecycleFlags.fromSyncFlush);\n            // TODO: prevent duplicate updates coming from the patch queue (or perhaps it's just not needed in its entirety?)\n            //this.processPatchQueue(flags | LifecycleFlags.fromSyncFlush);\n            if (this.mountCount > 0) {\n                this.mountCount = 0;\n                let currentMount = this.mountHead.$nextMount;\n                this.mountHead = this.mountTail = this;\n                let nextMount;\n                do {\n                    currentMount.$mount(flags);\n                    nextMount = currentMount.$nextMount;\n                    currentMount.$nextMount = null;\n                    currentMount = nextMount;\n                } while (currentMount !== marker);\n            }\n            // Connect all connect-queued bindings AFTER mounting is done, so that the DOM is visible asap,\n            // but connect BEFORE running the attached callbacks to ensure any changes made during those callbacks\n            // are still accounted for.\n            // TODO: add a flag/option to further delay connect with a RAF callback (the tradeoff would be that we'd need\n            // to run an additional patch cycle before that connect, which can be expensive and unnecessary in most real\n            // world scenarios, but can significantly speed things up with nested, highly volatile data like in dbmonster)\n            this.processConnectQueue(exports.LifecycleFlags.mustEvaluate);\n            if (this.attachedCount > 0) {\n                this.attachedCount = 0;\n                let currentAttached = this.attachedHead.$nextAttached;\n                this.attachedHead = this.attachedTail = this;\n                let nextAttached;\n                do {\n                    currentAttached.attached(flags);\n                    nextAttached = currentAttached.$nextAttached;\n                    currentAttached.$nextAttached = null;\n                    currentAttached = nextAttached;\n                } while (currentAttached !== marker);\n            }\n        }\n        beginDetach() {\n            // open up / expand a detach batch; the very first caller will close it again with endDetach\n            ++this.detachDepth;\n        }\n        enqueueUnmount(requestor) {\n            // This method is idempotent; adding the same item more than once has the same effect as\n            // adding it once.\n            // build a standard singly linked list for unmount callbacks\n            if (requestor.$nextUnmount === null) {\n                requestor.$nextUnmount = marker;\n                this.unmountTail.$nextUnmount = requestor;\n                this.unmountTail = requestor;\n                ++this.unmountCount;\n            }\n        }\n        enqueueDetached(requestor) {\n            // This method is idempotent; adding the same item more than once has the same effect as\n            // adding it once.\n            // build a standard singly linked list for detached callbacks\n            if (requestor.$nextDetached === null) {\n                requestor.$nextDetached = marker;\n                this.detachedTail.$nextDetached = requestor;\n                this.detachedTail = requestor;\n                ++this.detachedCount;\n            }\n        }\n        enqueueUnbindAfterDetach(requestor) {\n            // This method is idempotent; adding the same item more than once has the same effect as\n            // adding it once.\n            // build a standard singly linked list for unbindAfterDetach callbacks\n            if (requestor.$nextUnbindAfterDetach === null) {\n                requestor.$nextUnbindAfterDetach = marker;\n                this.unbindAfterDetachTail.$nextUnbindAfterDetach = requestor;\n                this.unbindAfterDetachTail = requestor;\n                ++this.unbindAfterDetachCount;\n            }\n        }\n        endDetach(flags) {\n            // close / shrink a detach batch\n            if (--this.detachDepth === 0) {\n                if (this.task !== null && !this.task.done) {\n                    this.task.owner = this;\n                    return this.task;\n                }\n                this.processDetachQueue(flags);\n                return LifecycleTask.done;\n            }\n        }\n        processDetachQueue(flags) {\n            // flush before unmounting to ensure batched collection changes propagate to the repeaters,\n            // which may lead to additional unmount operations\n            this.processFlushQueue(flags | exports.LifecycleFlags.fromFlush | exports.LifecycleFlags.doNotUpdateDOM);\n            if (this.unmountCount > 0) {\n                this.unmountCount = 0;\n                let currentUnmount = this.unmountHead.$nextUnmount;\n                this.unmountHead = this.unmountTail = this;\n                let nextUnmount;\n                do {\n                    currentUnmount.$unmount(flags);\n                    nextUnmount = currentUnmount.$nextUnmount;\n                    currentUnmount.$nextUnmount = null;\n                    currentUnmount = nextUnmount;\n                } while (currentUnmount !== marker);\n            }\n            if (this.detachedCount > 0) {\n                this.detachedCount = 0;\n                let currentDetached = this.detachedHead.$nextDetached;\n                this.detachedHead = this.detachedTail = this;\n                let nextDetached;\n                do {\n                    currentDetached.detached(flags);\n                    nextDetached = currentDetached.$nextDetached;\n                    currentDetached.$nextDetached = null;\n                    currentDetached = nextDetached;\n                } while (currentDetached !== marker);\n            }\n            if (this.unbindAfterDetachCount > 0) {\n                this.beginUnbind();\n                this.unbindAfterDetachCount = 0;\n                let currentUnbind = this.unbindAfterDetachHead.$nextUnbindAfterDetach;\n                this.unbindAfterDetachHead = this.unbindAfterDetachTail = this;\n                let nextUnbind;\n                do {\n                    currentUnbind.$unbind(flags);\n                    nextUnbind = currentUnbind.$nextUnbindAfterDetach;\n                    currentUnbind.$nextUnbindAfterDetach = null;\n                    currentUnbind = nextUnbind;\n                } while (currentUnbind !== marker);\n                this.endUnbind(flags);\n            }\n        }\n    }\n    exports.CompositionCoordinator = class CompositionCoordinator {\n        constructor($lifecycle) {\n            this.$lifecycle = $lifecycle;\n            this.onSwapComplete = kernel.PLATFORM.noop;\n            this.queue = null;\n            this.swapTask = LifecycleTask.done;\n            this.currentView = null;\n            this.isBound = false;\n            this.isAttached = false;\n        }\n        static register(container) {\n            return kernel.Registration.transient(this, this).register(container, this);\n        }\n        compose(value, flags) {\n            if (this.swapTask.done) {\n                if (value instanceof Promise) {\n                    this.enqueue(new PromiseSwap(this, value));\n                    this.processNext();\n                }\n                else {\n                    this.swap(value, flags);\n                }\n            }\n            else {\n                if (value instanceof Promise) {\n                    this.enqueue(new PromiseSwap(this, value));\n                }\n                else {\n                    this.enqueue(value);\n                }\n                if (this.swapTask.canCancel()) {\n                    this.swapTask.cancel();\n                }\n            }\n        }\n        binding(flags, scope) {\n            this.scope = scope;\n            this.isBound = true;\n            if (this.currentView !== null) {\n                this.currentView.$bind(flags, scope);\n            }\n        }\n        attaching(flags) {\n            this.isAttached = true;\n            if (this.currentView !== null) {\n                this.currentView.$attach(flags);\n            }\n        }\n        detaching(flags) {\n            this.isAttached = false;\n            if (this.currentView !== null) {\n                this.currentView.$detach(flags);\n            }\n        }\n        unbinding(flags) {\n            this.isBound = false;\n            if (this.currentView !== null) {\n                this.currentView.$unbind(flags);\n            }\n        }\n        caching(flags) {\n            this.currentView = null;\n        }\n        enqueue(view) {\n            if (this.queue === null) {\n                this.queue = [];\n            }\n            this.queue.push(view);\n        }\n        swap(view, flags) {\n            if (this.currentView === view) {\n                return;\n            }\n            const $lifecycle = this.$lifecycle;\n            const swapTask = new AggregateLifecycleTask();\n            let lifecycleTask;\n            let currentView = this.currentView;\n            if (currentView === null) {\n                lifecycleTask = LifecycleTask.done;\n            }\n            else {\n                $lifecycle.enqueueUnbindAfterDetach(currentView);\n                $lifecycle.beginDetach();\n                currentView.$detach(flags);\n                lifecycleTask = $lifecycle.endDetach(flags);\n            }\n            swapTask.addTask(lifecycleTask);\n            currentView = this.currentView = view;\n            if (currentView === null) {\n                lifecycleTask = LifecycleTask.done;\n            }\n            else {\n                if (this.isBound) {\n                    $lifecycle.beginBind();\n                    currentView.$bind(flags, this.scope);\n                    $lifecycle.endBind(flags);\n                }\n                if (this.isAttached) {\n                    $lifecycle.beginAttach();\n                    currentView.$attach(flags);\n                    lifecycleTask = $lifecycle.endAttach(flags);\n                }\n                else {\n                    lifecycleTask = LifecycleTask.done;\n                }\n            }\n            swapTask.addTask(lifecycleTask);\n            if (swapTask.done) {\n                this.swapTask = LifecycleTask.done;\n                this.onSwapComplete();\n            }\n            else {\n                this.swapTask = swapTask;\n                this.swapTask.wait().then(() => {\n                    this.onSwapComplete();\n                    this.processNext();\n                });\n            }\n        }\n        processNext() {\n            if (this.queue !== null && this.queue.length > 0) {\n                const next = this.queue.pop();\n                this.queue.length = 0;\n                if (PromiseSwap.is(next)) {\n                    this.swapTask = next.start();\n                }\n                else {\n                    this.swap(next, exports.LifecycleFlags.fromLifecycleTask);\n                }\n            }\n            else {\n                this.swapTask = LifecycleTask.done;\n            }\n        }\n    };\n    exports.CompositionCoordinator = __decorate([\n        kernel.inject(ILifecycle)\n    ], exports.CompositionCoordinator);\n    const LifecycleTask = {\n        done: {\n            done: true,\n            canCancel() { return false; },\n            // tslint:disable-next-line:no-empty\n            cancel() { },\n            wait() { return Promise.resolve(); }\n        }\n    };\n    class AggregateLifecycleTask {\n        constructor() {\n            this.done = true;\n            /*@internal*/\n            this.owner = null;\n            this.tasks = [];\n            this.waiter = null;\n            this.resolve = null;\n        }\n        addTask(task) {\n            if (!task.done) {\n                this.done = false;\n                this.tasks.push(task);\n                task.wait().then(() => this.tryComplete());\n            }\n        }\n        removeTask(task) {\n            if (task.done) {\n                const idx = this.tasks.indexOf(task);\n                if (idx !== -1) {\n                    this.tasks.splice(idx, 1);\n                }\n            }\n            if (this.tasks.length === 0) {\n                if (this.owner !== null) {\n                    this.owner.finishTask(this);\n                    this.owner = null;\n                }\n            }\n        }\n        canCancel() {\n            if (this.done) {\n                return false;\n            }\n            return this.tasks.every(x => x.canCancel());\n        }\n        cancel() {\n            if (this.canCancel()) {\n                this.tasks.forEach(x => x.cancel());\n                this.done = false;\n            }\n        }\n        wait() {\n            if (this.waiter === null) {\n                if (this.done) {\n                    this.waiter = Promise.resolve();\n                }\n                else {\n                    // tslint:disable-next-line:promise-must-complete\n                    this.waiter = new Promise((resolve) => this.resolve = resolve);\n                }\n            }\n            return this.waiter;\n        }\n        tryComplete() {\n            if (this.done) {\n                return;\n            }\n            if (this.tasks.every(x => x.done)) {\n                this.complete(true);\n            }\n        }\n        complete(notCancelled) {\n            this.done = true;\n            if (notCancelled && this.owner !== null) {\n                this.owner.processDetachQueue(exports.LifecycleFlags.fromLifecycleTask);\n                this.owner.processUnbindQueue(exports.LifecycleFlags.fromLifecycleTask);\n                this.owner.processBindQueue(exports.LifecycleFlags.fromLifecycleTask);\n                this.owner.processAttachQueue(exports.LifecycleFlags.fromLifecycleTask);\n            }\n            this.owner.finishTask(this);\n            if (this.resolve !== null) {\n                this.resolve();\n            }\n        }\n    }\n    /*@internal*/\n    class PromiseSwap {\n        constructor(coordinator, promise) {\n            this.coordinator = coordinator;\n            this.promise = promise;\n            this.done = false;\n            this.isCancelled = false;\n        }\n        static is(object) {\n            return 'start' in object;\n        }\n        start() {\n            if (this.isCancelled) {\n                return LifecycleTask.done;\n            }\n            this.promise = this.promise.then(x => {\n                this.onResolve(x);\n                return x;\n            });\n            return this;\n        }\n        canCancel() {\n            return !this.done;\n        }\n        cancel() {\n            if (this.canCancel()) {\n                this.isCancelled = true;\n            }\n        }\n        wait() {\n            return this.promise;\n        }\n        onResolve(value) {\n            if (this.isCancelled) {\n                return;\n            }\n            this.done = true;\n            this.coordinator.compose(value, exports.LifecycleFlags.fromLifecycleTask);\n        }\n    }\n    // tslint:disable:jsdoc-format\n    /**\n     * A general-purpose ILifecycleTask implementation that can be placed\n     * before an attached, detached, bound or unbound hook during attaching,\n     * detaching, binding or unbinding, respectively.\n     *\n     * The provided promise will be awaited before the corresponding lifecycle\n     * hook (and any hooks following it) is invoked.\n     *\n     * The provided callback will be invoked after the promise is resolved\n     * and before the next lifecycle hook.\n     *\n     * Example:\n    ```ts\n    export class MyViewModel {\n      private $lifecycle: ILifecycle; // set before created() hook\n      private answer: number;\n\n      public binding(flags: LifecycleFlags): void {\n        // this.answer === undefined\n        this.$lifecycle.registerTask(new PromiseTask(\n          this.getAnswerAsync,\n          answer => {\n            this.answer = answer;\n          }\n        ));\n      }\n\n      public bound(flags: LifecycleFlags): void {\n        // this.answer === 42\n      }\n\n      private getAnswerAsync(): Promise<number> {\n        return Promise.resolve().then(() => 42);\n      }\n    }\n    ```\n     */\n    // tslint:enable:jsdoc-format\n    class PromiseTask {\n        constructor(promise, callback) {\n            this.done = false;\n            this.isCancelled = false;\n            this.callback = callback;\n            this.promise = promise.then(value => {\n                if (this.isCancelled === true) {\n                    return;\n                }\n                this.done = true;\n                this.callback(value);\n                return value;\n            });\n        }\n        canCancel() {\n            return !this.done;\n        }\n        cancel() {\n            if (this.canCancel()) {\n                this.isCancelled = true;\n            }\n        }\n        wait() {\n            return this.promise;\n        }\n    }\n\n    function bindingBehavior(nameOrSource) {\n        return function (target) {\n            return BindingBehaviorResource.define(nameOrSource, target);\n        };\n    }\n    const BindingBehaviorResource = {\n        name: 'binding-behavior',\n        keyFrom(name) {\n            return `${this.name}:${name}`;\n        },\n        isType(Type) {\n            return Type.kind === this;\n        },\n        define(nameOrSource, ctor) {\n            const Type = ctor;\n            const description = typeof nameOrSource === 'string'\n                ? { name: nameOrSource }\n                : nameOrSource;\n            Type.kind = BindingBehaviorResource;\n            Type.description = description;\n            Type.register = register;\n            return Type;\n        }\n    };\n    function register(container) {\n        container.register(kernel.Registration.singleton(BindingBehaviorResource.keyFrom(this.description.name), this));\n    }\n\n    const ELEMENT_NODE = 1;\n    const ATTRIBUTE_NODE = 2;\n    const TEXT_NODE = 3;\n    const COMMENT_NODE = 8;\n    const DOCUMENT_FRAGMENT_NODE = 11;\n    function isRenderLocation(node) {\n        return node.textContent === 'au-end';\n    }\n    const INode = kernel.DI.createInterface().noDefault();\n    const IRenderLocation = kernel.DI.createInterface().noDefault();\n    // tslint:disable:no-any\n    const DOM = {\n        createDocumentFragment(markupOrNode) {\n            if (markupOrNode === undefined || markupOrNode === null) {\n                return document.createDocumentFragment();\n            }\n            if (markupOrNode.nodeType > 0) {\n                if (markupOrNode.content !== undefined) {\n                    return markupOrNode.content;\n                }\n                const fragment = document.createDocumentFragment();\n                fragment.appendChild(markupOrNode);\n                return fragment;\n            }\n            return DOM.createTemplate(markupOrNode).content;\n        },\n        createTemplate(markup) {\n            if (markup === undefined) {\n                return document.createElement('template');\n            }\n            const template = document.createElement('template');\n            template.innerHTML = markup;\n            return template;\n        },\n        addClass(node, className) {\n            node.classList.add(className);\n        },\n        addEventListener(eventName, subscriber, publisher, options) {\n            (publisher || document).addEventListener(eventName, subscriber, options);\n        },\n        appendChild(parent, child) {\n            parent.appendChild(child);\n        },\n        attachShadow(host, options) {\n            return host.attachShadow(options);\n        },\n        cloneNode(node, deep) {\n            return node.cloneNode(deep !== false); // use true unless the caller explicitly passes in false\n        },\n        convertToRenderLocation(node) {\n            if (isRenderLocation(node)) {\n                return node; // it's already a RenderLocation (converted by FragmentNodeSequence)\n            }\n            if (node.parentNode === null) {\n                throw kernel.Reporter.error(52);\n            }\n            const locationEnd = document.createComment('au-end');\n            const locationStart = document.createComment('au-start');\n            DOM.replaceNode(locationEnd, node);\n            DOM.insertBefore(locationStart, locationEnd);\n            locationEnd.$start = locationStart;\n            locationStart.$nodes = null;\n            return locationEnd;\n        },\n        createComment(text) {\n            return document.createComment(text);\n        },\n        createElement(name) {\n            return document.createElement(name);\n        },\n        createNodeObserver(target, callback, options) {\n            const observer = new MutationObserver(callback);\n            observer.observe(target, options);\n            return observer;\n        },\n        createTextNode(text) {\n            return document.createTextNode(text);\n        },\n        getAttribute(node, name) {\n            return node.getAttribute(name);\n        },\n        hasClass(node, className) {\n            return node.classList.contains(className);\n        },\n        insertBefore(nodeToInsert, referenceNode) {\n            referenceNode.parentNode.insertBefore(nodeToInsert, referenceNode);\n        },\n        isAllWhitespace(node) {\n            if (node.auInterpolationTarget === true) {\n                return false;\n            }\n            const text = node.textContent;\n            const len = text.length;\n            let i = 0;\n            // for perf benchmark of this compared to the regex method: http://jsben.ch/p70q2 (also a general case against using regex)\n            while (i < len) {\n                // charCodes 0-0x20(32) can all be considered whitespace (non-whitespace chars in this range don't have a visual representation anyway)\n                if (text.charCodeAt(i) > 0x20) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        },\n        isCommentNodeType(node) {\n            return node.nodeType === COMMENT_NODE;\n        },\n        isDocumentFragmentType(node) {\n            return node.nodeType === DOCUMENT_FRAGMENT_NODE;\n        },\n        isElementNodeType(node) {\n            return node.nodeType === ELEMENT_NODE;\n        },\n        isNodeInstance(potentialNode) {\n            return potentialNode.nodeType > 0;\n        },\n        isTextNodeType(node) {\n            return node.nodeType === TEXT_NODE;\n        },\n        migrateChildNodes(currentParent, newParent) {\n            while (currentParent.firstChild) {\n                DOM.appendChild(newParent, currentParent.firstChild);\n            }\n        },\n        registerElementResolver(container, resolver) {\n            container.registerResolver(INode, resolver);\n            container.registerResolver(Element, resolver);\n            container.registerResolver(HTMLElement, resolver);\n            container.registerResolver(SVGElement, resolver);\n        },\n        remove(node) {\n            if (node.remove) {\n                node.remove();\n            }\n            else {\n                node.parentNode.removeChild(node);\n            }\n        },\n        removeAttribute(node, name) {\n            node.removeAttribute(name);\n        },\n        removeClass(node, className) {\n            node.classList.remove(className);\n        },\n        removeEventListener(eventName, subscriber, publisher, options) {\n            (publisher || document).removeEventListener(eventName, subscriber, options);\n        },\n        replaceNode(newChild, oldChild) {\n            if (oldChild.parentNode) {\n                oldChild.parentNode.replaceChild(newChild, oldChild);\n            }\n        },\n        setAttribute(node, name, value) {\n            node.setAttribute(name, value);\n        },\n        treatAsNonWhitespace(node) {\n            // see isAllWhitespace above\n            node.auInterpolationTarget = true;\n        }\n    };\n    // This is an implementation of INodeSequence that represents \"no DOM\" to render.\n    // It's used in various places to avoid null and to encode\n    // the explicit idea of \"no view\".\n    const emptySequence = {\n        firstChild: null,\n        lastChild: null,\n        childNodes: kernel.PLATFORM.emptyArray,\n        findTargets() { return kernel.PLATFORM.emptyArray; },\n        insertBefore(refNode) { },\n        appendTo(parent) { },\n        remove() { }\n    };\n    const NodeSequence = {\n        empty: emptySequence\n    };\n    /**\n     * An specialized INodeSequence with optimizations for text (interpolation) bindings\n     * The contract of this INodeSequence is:\n     * - the previous element is an `au-marker` node\n     * - text is the actual text node\n     */\n    class TextNodeSequence {\n        constructor(text) {\n            this.firstChild = text;\n            this.lastChild = text;\n            this.childNodes = [text];\n            this.targets = [new AuMarker(text)];\n        }\n        findTargets() {\n            return this.targets;\n        }\n        insertBefore(refNode) {\n            refNode.parentNode.insertBefore(this.firstChild, refNode);\n        }\n        appendTo(parent) {\n            parent.appendChild(this.firstChild);\n        }\n        remove() {\n            this.firstChild.remove();\n        }\n    }\n    // tslint:enable:no-any\n    // This is the most common form of INodeSequence.\n    // Every custom element or template controller whose node sequence is based on an HTML template\n    // has an instance of this under the hood. Anyone who wants to create a node sequence from\n    // a string of markup would also receive an instance of this.\n    // CompiledTemplates create instances of FragmentNodeSequence.\n    /*@internal*/\n    class FragmentNodeSequence {\n        constructor(fragment) {\n            this.fragment = fragment;\n            // tslint:disable-next-line:no-any\n            const targetNodeList = fragment.querySelectorAll('.au');\n            let i = 0;\n            let ii = targetNodeList.length;\n            const targets = this.targets = Array(ii);\n            while (i < ii) {\n                // eagerly convert all markers to IRenderLocations (otherwise the renderer\n                // will do it anyway) and store them in the target list (since the comments\n                // can't be queried)\n                const target = targetNodeList[i];\n                if (target.nodeName === 'AU-MARKER') {\n                    // note the renderer will still call this method, but it will just return the\n                    // location if it sees it's already a location\n                    targets[i] = DOM.convertToRenderLocation(target);\n                }\n                else {\n                    // also store non-markers for consistent ordering\n                    targets[i] = target;\n                }\n                ++i;\n            }\n            const childNodeList = fragment.childNodes;\n            i = 0;\n            ii = childNodeList.length;\n            const childNodes = this.childNodes = Array(ii);\n            while (i < ii) {\n                childNodes[i] = childNodeList[i];\n                ++i;\n            }\n            this.firstChild = fragment.firstChild;\n            this.lastChild = fragment.lastChild;\n            this.start = this.end = null;\n        }\n        findTargets() {\n            // tslint:disable-next-line:no-any\n            return this.targets;\n        }\n        insertBefore(refNode) {\n            // tslint:disable-next-line:no-any\n            refNode.parentNode.insertBefore(this.fragment, refNode);\n            // internally we could generally assume that this is an IRenderLocation,\n            // but since this is also public API we still need to double check\n            // (or horrible things might happen)\n            if (isRenderLocation(refNode)) {\n                this.end = refNode;\n                const start = this.start = refNode.$start;\n                if (start.$nodes === null) {\n                    start.$nodes = this;\n                }\n                else {\n                    // if more than one NodeSequence uses the same RenderLocation, it's an child\n                    // of a repeater (or something similar) and we shouldn't remove all nodes between\n                    // start - end since that would always remove all items from a repeater, even\n                    // when only one is removed\n                    // so we set $nodes to PLATFORM.emptyObject to 1) tell other sequences that it's\n                    // occupied and 2) prevent start.$nodes === this from ever evaluating to true\n                    // during remove()\n                    start.$nodes = kernel.PLATFORM.emptyObject;\n                }\n            }\n        }\n        appendTo(parent) {\n            // tslint:disable-next-line:no-any\n            parent.appendChild(this.fragment);\n            // this can never be a RenderLocation, and if for whatever reason we moved\n            // from a RenderLocation to a host, make sure \"start\" and \"end\" are null\n            this.start = this.end = null;\n        }\n        remove() {\n            const fragment = this.fragment;\n            if (this.start !== null && this.start.$nodes === this) {\n                // if we're between a valid \"start\" and \"end\" (e.g. if/else, containerless, or a\n                // repeater with a single item) then simply remove everything in-between (but not\n                // the comments themselves as they belong to the parent)\n                const end = this.end;\n                let next;\n                let current = this.start.nextSibling;\n                while (current !== end) {\n                    next = current.nextSibling;\n                    // tslint:disable-next-line:no-any\n                    fragment.appendChild(current);\n                    current = next;\n                }\n                this.start.$nodes = null;\n                this.start = this.end = null;\n            }\n            else {\n                // otherwise just remove from first to last child in the regular way\n                let current = this.firstChild;\n                if (current.parentNode !== fragment) {\n                    const end = this.lastChild;\n                    let next;\n                    while (current !== null) {\n                        next = current.nextSibling;\n                        // tslint:disable-next-line:no-any\n                        fragment.appendChild(current);\n                        if (current === end) {\n                            break;\n                        }\n                        current = next;\n                    }\n                }\n            }\n        }\n    }\n    class NodeSequenceFactory {\n        constructor(fragment) {\n            const childNodes = fragment.childNodes;\n            switch (childNodes.length) {\n                case 0:\n                    this.createNodeSequence = () => NodeSequence.empty;\n                    return;\n                case 2:\n                    const target = childNodes[0];\n                    if (target.nodeName === 'AU-MARKER' || target.nodeName === '#comment') {\n                        const text = childNodes[1];\n                        if (text.nodeType === TEXT_NODE && text.textContent === ' ') {\n                            text.textContent = '';\n                            this.deepClone = false;\n                            this.node = text;\n                            this.Type = TextNodeSequence;\n                            return;\n                        }\n                    }\n                // falls through if not returned\n                default:\n                    this.deepClone = true;\n                    this.node = fragment;\n                    this.Type = FragmentNodeSequence;\n            }\n        }\n        static createFor(markupOrNode) {\n            const fragment = DOM.createDocumentFragment(markupOrNode);\n            return new NodeSequenceFactory(fragment);\n        }\n        createNodeSequence() {\n            return new this.Type(this.node.cloneNode(this.deepClone));\n        }\n    }\n    /*@internal*/\n    class AuMarker {\n        constructor(next) {\n            this.textContent = '';\n            this.nextSibling = next;\n        }\n        get parentNode() {\n            return this.nextSibling.parentNode;\n        }\n        remove() { }\n    }\n    (proto => {\n        proto.previousSibling = null;\n        proto.firstChild = null;\n        proto.lastChild = null;\n        proto.childNodes = kernel.PLATFORM.emptyArray;\n        proto.nodeName = 'AU-MARKER';\n        proto.nodeType = ELEMENT_NODE;\n    })(AuMarker.prototype);\n\n    function subscriberCollection(mutationKind) {\n        return function (target) {\n            const proto = target.prototype;\n            proto._subscriberFlags = 0 /* None */;\n            proto._subscriber0 = null;\n            proto._subscriber1 = null;\n            proto._subscriber2 = null;\n            proto._subscribersRest = null;\n            proto.addSubscriber = addSubscriber;\n            proto.removeSubscriber = removeSubscriber;\n            proto.hasSubscriber = hasSubscriber;\n            proto.hasSubscribers = hasSubscribers;\n            proto.callSubscribers = (mutationKind === exports.MutationKind.instance ? callPropertySubscribers : callCollectionSubscribers);\n        };\n    }\n    function addSubscriber(subscriber) {\n        if (this.hasSubscriber(subscriber)) {\n            return false;\n        }\n        const subscriberFlags = this._subscriberFlags;\n        if (!(subscriberFlags & 1 /* Subscriber0 */)) {\n            this._subscriber0 = subscriber;\n            this._subscriberFlags |= 1 /* Subscriber0 */;\n            return true;\n        }\n        if (!(subscriberFlags & 2 /* Subscriber1 */)) {\n            this._subscriber1 = subscriber;\n            this._subscriberFlags |= 2 /* Subscriber1 */;\n            return true;\n        }\n        if (!(subscriberFlags & 4 /* Subscriber2 */)) {\n            this._subscriber2 = subscriber;\n            this._subscriberFlags |= 4 /* Subscriber2 */;\n            return true;\n        }\n        if (!(subscriberFlags & 8 /* SubscribersRest */)) {\n            this._subscribersRest = [subscriber];\n            this._subscriberFlags |= 8 /* SubscribersRest */;\n            return true;\n        }\n        this._subscribersRest.push(subscriber);\n        return true;\n    }\n    function removeSubscriber(subscriber) {\n        const subscriberFlags = this._subscriberFlags;\n        if ((subscriberFlags & 1 /* Subscriber0 */) && this._subscriber0 === subscriber) {\n            this._subscriber0 = null;\n            this._subscriberFlags &= ~1 /* Subscriber0 */;\n            return true;\n        }\n        if ((subscriberFlags & 2 /* Subscriber1 */) && this._subscriber1 === subscriber) {\n            this._subscriber1 = null;\n            this._subscriberFlags &= ~2 /* Subscriber1 */;\n            return true;\n        }\n        if ((subscriberFlags & 4 /* Subscriber2 */) && this._subscriber2 === subscriber) {\n            this._subscriber2 = null;\n            this._subscriberFlags &= ~4 /* Subscriber2 */;\n            return true;\n        }\n        if (subscriberFlags & 8 /* SubscribersRest */) {\n            const subscribers = this._subscribersRest;\n            for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n                if (subscribers[i] === subscriber) {\n                    subscribers.splice(i, 1);\n                    if (ii === 1) {\n                        this._subscriberFlags &= ~8 /* SubscribersRest */;\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function callPropertySubscribers(newValue, previousValue, flags) {\n        /**\n         * Note: change handlers may have the side-effect of adding/removing subscribers to this collection during this\n         * callSubscribers invocation, so we're caching them all before invoking any.\n         * Subscribers added during this invocation are not invoked (and they shouldn't be).\n         * Subscribers removed during this invocation will still be invoked (and they also shouldn't be,\n         * however this is accounted for via $isBound and similar flags on the subscriber objects)\n         */\n        const subscriber0 = this._subscriber0;\n        const subscriber1 = this._subscriber1;\n        const subscriber2 = this._subscriber2;\n        let subscribers = this._subscribersRest;\n        if (subscribers !== null) {\n            subscribers = subscribers.slice();\n        }\n        if (subscriber0 !== null) {\n            subscriber0.handleChange(newValue, previousValue, flags);\n        }\n        if (subscriber1 !== null) {\n            subscriber1.handleChange(newValue, previousValue, flags);\n        }\n        if (subscriber2 !== null) {\n            subscriber2.handleChange(newValue, previousValue, flags);\n        }\n        const length = subscribers && subscribers.length;\n        if (length !== undefined && length > 0) {\n            for (let i = 0; i < length; ++i) {\n                const subscriber = subscribers[i];\n                if (subscriber !== null) {\n                    subscriber.handleChange(newValue, previousValue, flags);\n                }\n            }\n        }\n    }\n    function callCollectionSubscribers(origin, args, flags) {\n        const subscriber0 = this._subscriber0;\n        const subscriber1 = this._subscriber1;\n        const subscriber2 = this._subscriber2;\n        let subscribers = this._subscribersRest;\n        if (subscribers !== null) {\n            subscribers = subscribers.slice();\n        }\n        if (subscriber0 !== null) {\n            subscriber0.handleChange(origin, args, flags);\n        }\n        if (subscriber1 !== null) {\n            subscriber1.handleChange(origin, args, flags);\n        }\n        if (subscriber2 !== null) {\n            subscriber2.handleChange(origin, args, flags);\n        }\n        const length = subscribers && subscribers.length;\n        if (length !== undefined && length > 0) {\n            for (let i = 0; i < length; ++i) {\n                const subscriber = subscribers[i];\n                if (subscriber !== null) {\n                    subscriber.handleChange(origin, args, flags);\n                }\n            }\n        }\n        this.lifecycle.enqueueFlush(this);\n    }\n    function hasSubscribers() {\n        return this._subscriberFlags !== 0 /* None */;\n    }\n    function hasSubscriber(subscriber) {\n        // Flags here is just a perf tweak\n        // Compared to not using flags, it's a moderate speed-up when this collection does not have the subscriber;\n        // and minor slow-down when it does, and the former is more common than the latter.\n        const subscriberFlags = this._subscriberFlags;\n        if ((subscriberFlags & 1 /* Subscriber0 */) && this._subscriber0 === subscriber) {\n            return true;\n        }\n        if ((subscriberFlags & 2 /* Subscriber1 */) && this._subscriber1 === subscriber) {\n            return true;\n        }\n        if ((subscriberFlags & 4 /* Subscriber2 */) && this._subscriber2 === subscriber) {\n            return true;\n        }\n        if (subscriberFlags & 8 /* SubscribersRest */) {\n            // no need to check length; if the flag is set, there's always at least one\n            const subscribers = this._subscribersRest;\n            for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n                if (subscribers[i] === subscriber) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function batchedSubscriberCollection() {\n        return function (target) {\n            const proto = target.prototype;\n            proto._batchedSubscriberFlags = 0 /* None */;\n            proto._batchedSubscriber0 = null;\n            proto._batchedSubscriber1 = null;\n            proto._batchedSubscriber2 = null;\n            proto._batchedSubscribersRest = null;\n            proto.addBatchedSubscriber = addBatchedSubscriber;\n            proto.removeBatchedSubscriber = removeBatchedSubscriber;\n            proto.hasBatchedSubscriber = hasBatchedSubscriber;\n            proto.hasBatchedSubscribers = hasBatchedSubscribers;\n            proto.callBatchedSubscribers = callBatchedCollectionSubscribers;\n        };\n    }\n    function addBatchedSubscriber(subscriber) {\n        if (this.hasBatchedSubscriber(subscriber)) {\n            return false;\n        }\n        const subscriberFlags = this._batchedSubscriberFlags;\n        if (!(subscriberFlags & 1 /* Subscriber0 */)) {\n            this._batchedSubscriber0 = subscriber;\n            this._batchedSubscriberFlags |= 1 /* Subscriber0 */;\n            return true;\n        }\n        if (!(subscriberFlags & 2 /* Subscriber1 */)) {\n            this._batchedSubscriber1 = subscriber;\n            this._batchedSubscriberFlags |= 2 /* Subscriber1 */;\n            return true;\n        }\n        if (!(subscriberFlags & 4 /* Subscriber2 */)) {\n            this._batchedSubscriber2 = subscriber;\n            this._batchedSubscriberFlags |= 4 /* Subscriber2 */;\n            return true;\n        }\n        if (!(subscriberFlags & 8 /* SubscribersRest */)) {\n            this._batchedSubscribersRest = [subscriber];\n            this._batchedSubscriberFlags |= 8 /* SubscribersRest */;\n            return true;\n        }\n        this._batchedSubscribersRest.push(subscriber);\n        return true;\n    }\n    function removeBatchedSubscriber(subscriber) {\n        const subscriberFlags = this._batchedSubscriberFlags;\n        if ((subscriberFlags & 1 /* Subscriber0 */) && this._batchedSubscriber0 === subscriber) {\n            this._batchedSubscriber0 = null;\n            this._batchedSubscriberFlags &= ~1 /* Subscriber0 */;\n            return true;\n        }\n        if ((subscriberFlags & 2 /* Subscriber1 */) && this._batchedSubscriber1 === subscriber) {\n            this._batchedSubscriber1 = null;\n            this._batchedSubscriberFlags &= ~2 /* Subscriber1 */;\n            return true;\n        }\n        if ((subscriberFlags & 4 /* Subscriber2 */) && this._batchedSubscriber2 === subscriber) {\n            this._batchedSubscriber2 = null;\n            this._batchedSubscriberFlags &= ~4 /* Subscriber2 */;\n            return true;\n        }\n        if (subscriberFlags & 8 /* SubscribersRest */) {\n            const subscribers = this._batchedSubscribersRest;\n            for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n                if (subscribers[i] === subscriber) {\n                    subscribers.splice(i, 1);\n                    if (ii === 1) {\n                        this._batchedSubscriberFlags &= ~8 /* SubscribersRest */;\n                    }\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function callBatchedCollectionSubscribers(indexMap) {\n        const subscriber0 = this._batchedSubscriber0;\n        const subscriber1 = this._batchedSubscriber1;\n        const subscriber2 = this._batchedSubscriber2;\n        let subscribers = this._batchedSubscribersRest;\n        if (subscribers !== null) {\n            subscribers = subscribers.slice();\n        }\n        if (subscriber0 !== null) {\n            subscriber0.handleBatchedChange(indexMap);\n        }\n        if (subscriber1 !== null) {\n            subscriber1.handleBatchedChange(indexMap);\n        }\n        if (subscriber2 !== null) {\n            subscriber2.handleBatchedChange(indexMap);\n        }\n        const length = subscribers && subscribers.length;\n        if (length !== undefined && length > 0) {\n            for (let i = 0; i < length; ++i) {\n                const subscriber = subscribers[i];\n                if (subscriber !== null) {\n                    subscriber.handleBatchedChange(indexMap);\n                }\n            }\n        }\n    }\n    function hasBatchedSubscribers() {\n        return this._batchedSubscriberFlags !== 0 /* None */;\n    }\n    function hasBatchedSubscriber(subscriber) {\n        // Flags here is just a perf tweak\n        // Compared to not using flags, it's a moderate speed-up when this collection does not have the subscriber;\n        // and minor slow-down when it does, and the former is more common than the latter.\n        const subscriberFlags = this._batchedSubscriberFlags;\n        if ((subscriberFlags & 1 /* Subscriber0 */) && this._batchedSubscriber0 === subscriber) {\n            return true;\n        }\n        if ((subscriberFlags & 2 /* Subscriber1 */) && this._batchedSubscriber1 === subscriber) {\n            return true;\n        }\n        if ((subscriberFlags & 4 /* Subscriber2 */) && this._batchedSubscriber2 === subscriber) {\n            return true;\n        }\n        if (subscriberFlags & 8 /* SubscribersRest */) {\n            // no need to check length; if the flag is set, there's always at least one\n            const subscribers = this._batchedSubscribersRest;\n            for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n                if (subscribers[i] === subscriber) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function setValue(newValue, flags) {\n        const currentValue = this.currentValue;\n        newValue = newValue === null || newValue === undefined ? this.defaultValue : newValue;\n        if (currentValue !== newValue) {\n            this.currentValue = newValue;\n            if ((flags & (exports.LifecycleFlags.fromFlush | exports.LifecycleFlags.fromBind)) &&\n                !((flags & exports.LifecycleFlags.doNotUpdateDOM) && DOM.isNodeInstance(this.obj))) {\n                this.setValueCore(newValue, flags);\n            }\n            else {\n                this.currentFlags = flags;\n                return this.lifecycle.enqueueFlush(this);\n            }\n        }\n        return Promise.resolve();\n    }\n    function flush(flags) {\n        if (flags & exports.LifecycleFlags.doNotUpdateDOM) {\n            if (DOM.isNodeInstance(this.obj)) {\n                // re-queue the change so it will still propagate on flush when it's attached again\n                this.lifecycle.enqueueFlush(this);\n                return;\n            }\n        }\n        const currentValue = this.currentValue;\n        // we're doing this check because a value could be set multiple times before a flush, and the final value could be the same as the original value\n        // in which case the target doesn't need to be updated\n        if (this.oldValue !== currentValue) {\n            this.setValueCore(currentValue, this.currentFlags | flags | exports.LifecycleFlags.updateTargetInstance);\n            this.oldValue = this.currentValue;\n        }\n    }\n    function dispose() {\n        this.currentValue = null;\n        this.oldValue = null;\n        this.defaultValue = null;\n        this.obj = null;\n        this.propertyKey = '';\n    }\n    function targetObserver(defaultValue = null) {\n        return function (target) {\n            subscriberCollection(exports.MutationKind.instance)(target);\n            const proto = target.prototype;\n            proto.$nextFlush = null;\n            proto.currentValue = defaultValue;\n            proto.oldValue = defaultValue;\n            proto.defaultValue = defaultValue;\n            proto.obj = null;\n            proto.propertyKey = '';\n            proto.setValue = proto.setValue || setValue;\n            proto.flush = proto.flush || flush;\n            proto.dispose = proto.dispose || dispose;\n        };\n    }\n\n    // tslint:disable-next-line:no-http-string\n    const xlinkAttributeNS = 'http://www.w3.org/1999/xlink';\n    exports.XLinkAttributeAccessor = class XLinkAttributeAccessor {\n        // xlink namespaced attributes require getAttributeNS/setAttributeNS\n        // (even though the NS version doesn't work for other namespaces\n        // in html5 documents)\n        // Using very HTML-specific code here since this isn't likely to get\n        // called unless operating against a real HTML element.\n        constructor(lifecycle, obj, propertyKey, attributeName) {\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n            this.attributeName = attributeName;\n            this.oldValue = this.currentValue = this.getValue();\n        }\n        getValue() {\n            return this.obj.getAttributeNS(xlinkAttributeNS, this.attributeName);\n        }\n        setValueCore(newValue) {\n            this.obj.setAttributeNS(xlinkAttributeNS, this.attributeName, newValue);\n        }\n    };\n    exports.XLinkAttributeAccessor = __decorate([\n        targetObserver('')\n    ], exports.XLinkAttributeAccessor);\n    exports.XLinkAttributeAccessor.prototype.attributeName = '';\n    exports.DataAttributeAccessor = class DataAttributeAccessor {\n        constructor(lifecycle, obj, propertyKey) {\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n            this.oldValue = this.currentValue = this.getValue();\n        }\n        getValue() {\n            return DOM.getAttribute(this.obj, this.propertyKey);\n        }\n        setValueCore(newValue) {\n            if (newValue === null) {\n                DOM.removeAttribute(this.obj, this.propertyKey);\n            }\n            else {\n                DOM.setAttribute(this.obj, this.propertyKey, newValue);\n            }\n        }\n    };\n    exports.DataAttributeAccessor = __decorate([\n        targetObserver()\n    ], exports.DataAttributeAccessor);\n    exports.StyleAttributeAccessor = class StyleAttributeAccessor {\n        constructor(lifecycle, obj) {\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n            this.oldValue = this.currentValue = obj.style.cssText;\n        }\n        getValue() {\n            return this.obj.style.cssText;\n        }\n        // tslint:disable-next-line:function-name\n        _setProperty(style, value) {\n            let priority = '';\n            if (value !== null && value !== undefined && typeof value.indexOf === 'function' && value.indexOf('!important') !== -1) {\n                priority = 'important';\n                value = value.replace('!important', '');\n            }\n            this.obj.style.setProperty(style, value, priority);\n        }\n        setValueCore(newValue) {\n            const styles = this.styles || {};\n            let style;\n            let version = this.version;\n            if (newValue !== null) {\n                if (newValue instanceof Object) {\n                    let value;\n                    for (style in newValue) {\n                        if (newValue.hasOwnProperty(style)) {\n                            value = newValue[style];\n                            style = style.replace(/([A-Z])/g, m => `-${m.toLowerCase()}`);\n                            styles[style] = version;\n                            this._setProperty(style, value);\n                        }\n                    }\n                }\n                else if (newValue.length) {\n                    const rx = /\\s*([\\w\\-]+)\\s*:\\s*((?:(?:[\\w\\-]+\\(\\s*(?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[\\w\\-]+\\(\\s*(?:^\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^\\)]*)\\),?|[^\\)]*)\\),?|\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^;]*),?\\s*)+);?/g;\n                    let pair;\n                    while ((pair = rx.exec(newValue)) !== null) {\n                        style = pair[1];\n                        if (!style) {\n                            continue;\n                        }\n                        styles[style] = version;\n                        this._setProperty(style, pair[2]);\n                    }\n                }\n            }\n            this.styles = styles;\n            this.version += 1;\n            if (version === 0) {\n                return;\n            }\n            version -= 1;\n            for (style in styles) {\n                if (!styles.hasOwnProperty(style) || styles[style] !== version) {\n                    continue;\n                }\n                this.obj.style.removeProperty(style);\n            }\n        }\n    };\n    exports.StyleAttributeAccessor = __decorate([\n        targetObserver()\n    ], exports.StyleAttributeAccessor);\n    exports.StyleAttributeAccessor.prototype.styles = null;\n    exports.StyleAttributeAccessor.prototype.version = 0;\n    exports.StyleAttributeAccessor.prototype.propertyKey = 'style';\n    exports.ClassAttributeAccessor = class ClassAttributeAccessor {\n        constructor(lifecycle, obj) {\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n        }\n        getValue() {\n            return this.currentValue;\n        }\n        setValueCore(newValue) {\n            const nameIndex = this.nameIndex || {};\n            let version = this.version;\n            let names;\n            let name;\n            // Add the classes, tracking the version at which they were added.\n            if (newValue.length) {\n                const node = this.obj;\n                names = newValue.split(/\\s+/);\n                for (let i = 0, length = names.length; i < length; i++) {\n                    name = names[i];\n                    if (!name.length) {\n                        continue;\n                    }\n                    nameIndex[name] = version;\n                    DOM.addClass(node, name);\n                }\n            }\n            // Update state variables.\n            this.nameIndex = nameIndex;\n            this.version += 1;\n            // First call to setValue?  We're done.\n            if (version === 0) {\n                return;\n            }\n            // Remove classes from previous version.\n            version -= 1;\n            for (name in nameIndex) {\n                if (!nameIndex.hasOwnProperty(name) || nameIndex[name] !== version) {\n                    continue;\n                }\n                // TODO: this has the side-effect that classes already present which are added again,\n                // will be removed if they're not present in the next update.\n                // Better would be do have some configurability for this behavior, allowing the user to\n                // decide whether initial classes always need to be kept, always removed, or something in between\n                DOM.removeClass(this.obj, name);\n            }\n        }\n    };\n    exports.ClassAttributeAccessor = __decorate([\n        targetObserver('')\n    ], exports.ClassAttributeAccessor);\n    exports.ClassAttributeAccessor.prototype.doNotCache = true;\n    exports.ClassAttributeAccessor.prototype.version = 0;\n    exports.ClassAttributeAccessor.prototype.nameIndex = null;\n    exports.ElementPropertyAccessor = class ElementPropertyAccessor {\n        constructor(lifecycle, obj, propertyKey) {\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n        }\n        getValue() {\n            return this.obj[this.propertyKey];\n        }\n        setValueCore(value) {\n            this.obj[this.propertyKey] = value;\n        }\n    };\n    exports.ElementPropertyAccessor = __decorate([\n        targetObserver('')\n    ], exports.ElementPropertyAccessor);\n    class PropertyAccessor {\n        constructor(obj, propertyKey) {\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n        }\n        getValue() {\n            return this.obj[this.propertyKey];\n        }\n        setValue(value) {\n            this.obj[this.propertyKey] = value;\n        }\n    }\n\n    exports.AttrBindingBehavior = class AttrBindingBehavior {\n        bind(flags, scope, binding) {\n            binding.targetObserver = new exports.DataAttributeAccessor(binding.locator.get(ILifecycle), binding.target, binding.targetProperty);\n        }\n        // tslint:disable-next-line:no-empty\n        unbind(flags, scope, binding) { }\n    };\n    exports.AttrBindingBehavior = __decorate([\n        bindingBehavior('attr')\n    ], exports.AttrBindingBehavior);\n\n    /*\n    * Note: the oneTime binding now has a non-zero value for 2 reasons:\n    *  - plays nicer with bitwise operations (more consistent code, more explicit settings)\n    *  - allows for potentially having something like BindingMode.oneTime | BindingMode.fromView, where an initial value is set once to the view but updates from the view also propagate back to the view model\n    *\n    * Furthermore, the \"default\" mode would be for simple \".bind\" expressions to make it explicit for our logic that the default is being used.\n    * This essentially adds extra information which binding could use to do smarter things and allows bindingBehaviors that add a mode instead of simply overwriting it\n    */\n    (function (BindingMode) {\n        BindingMode[BindingMode[\"oneTime\"] = 1] = \"oneTime\";\n        BindingMode[BindingMode[\"toView\"] = 2] = \"toView\";\n        BindingMode[BindingMode[\"fromView\"] = 4] = \"fromView\";\n        BindingMode[BindingMode[\"twoWay\"] = 6] = \"twoWay\";\n        BindingMode[BindingMode[\"default\"] = 8] = \"default\";\n    })(exports.BindingMode || (exports.BindingMode = {}));\n\n    const { oneTime, toView, fromView, twoWay } = exports.BindingMode;\n    class BindingModeBehavior {\n        constructor(mode) {\n            this.mode = mode;\n        }\n        bind(flags, scope, binding) {\n            binding.originalMode = binding.mode;\n            binding.mode = this.mode;\n        }\n        unbind(flags, scope, binding) {\n            binding.mode = binding.originalMode;\n            binding.originalMode = null;\n        }\n    }\n    exports.OneTimeBindingBehavior = class OneTimeBindingBehavior extends BindingModeBehavior {\n        constructor() {\n            super(oneTime);\n        }\n    };\n    exports.OneTimeBindingBehavior = __decorate([\n        bindingBehavior('oneTime')\n    ], exports.OneTimeBindingBehavior);\n    exports.ToViewBindingBehavior = class ToViewBindingBehavior extends BindingModeBehavior {\n        constructor() {\n            super(toView);\n        }\n    };\n    exports.ToViewBindingBehavior = __decorate([\n        bindingBehavior('toView')\n    ], exports.ToViewBindingBehavior);\n    exports.FromViewBindingBehavior = class FromViewBindingBehavior extends BindingModeBehavior {\n        constructor() {\n            super(fromView);\n        }\n    };\n    exports.FromViewBindingBehavior = __decorate([\n        bindingBehavior('fromView')\n    ], exports.FromViewBindingBehavior);\n    exports.TwoWayBindingBehavior = class TwoWayBindingBehavior extends BindingModeBehavior {\n        constructor() {\n            super(twoWay);\n        }\n    };\n    exports.TwoWayBindingBehavior = __decorate([\n        bindingBehavior('twoWay')\n    ], exports.TwoWayBindingBehavior);\n\n    const defineProperty = Reflect.defineProperty;\n    // note: we're reusing the same object for setting all descriptors, just changing some properties as needed\n    //   this works, because the properties are copied by defineProperty (so changing them afterwards doesn't affect existing descriptors)\n    // see also: https://tc39.github.io/ecma262/#sec-topropertydescriptor\n    const observedPropertyDescriptor = {\n        get: undefined,\n        set: undefined,\n        enumerable: true,\n        configurable: true\n    };\n    function subscribe(subscriber) {\n        if (this.observing === false) {\n            this.observing = true;\n            const { obj, propertyKey } = this;\n            this.currentValue = obj[propertyKey];\n            observedPropertyDescriptor.get = () => this.getValue();\n            observedPropertyDescriptor.set = value => { this.setValue(value, exports.LifecycleFlags.updateTargetInstance); };\n            if (!defineProperty(obj, propertyKey, observedPropertyDescriptor)) {\n                kernel.Reporter.write(1, propertyKey, obj);\n            }\n        }\n        this.addSubscriber(subscriber);\n    }\n    function dispose$1() {\n        delete this.obj[this.propertyKey];\n        this.obj = null;\n        this.propertyKey = null;\n        this.currentValue = null;\n    }\n    function propertyObserver() {\n        return function (target) {\n            subscriberCollection(exports.MutationKind.instance)(target);\n            const proto = target.prototype;\n            proto.observing = false;\n            proto.obj = null;\n            proto.propertyKey = null;\n            // Note: this will generate some \"false positive\" changes when setting a target undefined from a source undefined,\n            // but those aren't harmful because the changes won't be propagated through to subscribers during $bind anyway.\n            // It will, however, solve some \"false negative\" changes when the source value is undefined but the target value is not;\n            // in such cases, this.currentValue in the observer being undefined will block the change from propagating to the target.\n            // This is likely not working correctly in vCurrent either.\n            proto.currentValue = Symbol();\n            proto.subscribe = proto.subscribe || subscribe;\n            proto.unsubscribe = proto.unsubscribe || proto.removeSubscriber;\n            proto.dispose = proto.dispose || dispose$1;\n        };\n    }\n\n    const noop = kernel.PLATFORM.noop;\n    // note: string.length is the only property of any primitive that is not a function,\n    // so we can hardwire it to that and simply return undefined for anything else\n    // note#2: a modified primitive constructor prototype would not work (and really, it shouldn't..)\n    class PrimitiveObserver {\n        constructor(obj, propertyKey) {\n            this.doNotCache = true;\n            // we don't need to store propertyName because only 'length' can return a useful value\n            if (propertyKey === 'length') {\n                // deliberately not checking for typeof string as users probably still want to know via an error that their string is undefined\n                this.obj = obj;\n                this.getValue = this.getStringLength;\n            }\n            else {\n                this.getValue = this.returnUndefined;\n            }\n        }\n        getStringLength() {\n            return this.obj.length;\n        }\n        returnUndefined() {\n            return undefined;\n        }\n    }\n    PrimitiveObserver.prototype.setValue = noop;\n    PrimitiveObserver.prototype.subscribe = noop;\n    PrimitiveObserver.prototype.unsubscribe = noop;\n    PrimitiveObserver.prototype.dispose = noop;\n    exports.SetterObserver = class SetterObserver {\n        constructor(obj, propertyKey) {\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n        }\n        getValue() {\n            return this.currentValue;\n        }\n        setValue(newValue, flags) {\n            const currentValue = this.currentValue;\n            if (currentValue !== newValue) {\n                this.currentValue = newValue;\n                if (!(flags & exports.LifecycleFlags.fromBind)) {\n                    this.callSubscribers(newValue, currentValue, flags);\n                }\n                // If subscribe() has been called, the target property descriptor is replaced by these getter/setter methods,\n                // so calling obj[propertyKey] will actually return this.currentValue.\n                // However, if subscribe() was not yet called (indicated by !this.observing), the target descriptor\n                // is unmodified and we need to explicitly set the property value.\n                // This will happen in one-time, to-view and two-way bindings during $bind, meaning that the $bind will not actually update the target value.\n                // This wasn't visible in vCurrent due to connect-queue always doing a delayed update, so in many cases it didn't matter whether $bind updated the target or not.\n                if (!this.observing) {\n                    this.obj[this.propertyKey] = newValue;\n                }\n            }\n        }\n    };\n    exports.SetterObserver = __decorate([\n        propertyObserver()\n    ], exports.SetterObserver);\n    exports.Observer = class Observer {\n        constructor(instance, propertyName, callbackName) {\n            this.obj = instance;\n            this.propertyKey = propertyName;\n            this.currentValue = instance[propertyName];\n            this.callback = callbackName in instance\n                ? instance[callbackName].bind(instance)\n                : noop;\n        }\n        getValue() {\n            return this.currentValue;\n        }\n        setValue(newValue, flags) {\n            const currentValue = this.currentValue;\n            if (currentValue !== newValue) {\n                this.currentValue = newValue;\n                if (!(flags & exports.LifecycleFlags.fromBind)) {\n                    const coercedValue = this.callback(newValue, currentValue);\n                    if (coercedValue !== undefined) {\n                        this.currentValue = newValue = coercedValue;\n                    }\n                    this.callSubscribers(newValue, currentValue, flags);\n                }\n            }\n        }\n    };\n    exports.Observer = __decorate([\n        propertyObserver()\n    ], exports.Observer);\n\n    /*@internal*/\n    class InternalObserversLookup {\n        getOrCreate(obj, key) {\n            let observer = this[key];\n            if (observer === undefined) {\n                observer = this[key] = new exports.SetterObserver(obj, key);\n            }\n            return observer;\n        }\n    }\n    class BindingContext {\n        constructor(keyOrObj, value) {\n            this.$synthetic = true;\n            if (keyOrObj !== undefined) {\n                if (value !== undefined) {\n                    // if value is defined then it's just a property and a value to initialize with\n                    // tslint:disable-next-line:no-any\n                    this[keyOrObj] = value;\n                }\n                else {\n                    // can either be some random object or another bindingContext to clone from\n                    for (const prop in keyOrObj) {\n                        if (keyOrObj.hasOwnProperty(prop)) {\n                            this[prop] = keyOrObj[prop];\n                        }\n                    }\n                }\n            }\n        }\n        static create(keyOrObj, value) {\n            return new BindingContext(keyOrObj, value);\n        }\n        // tslint:disable-next-line:no-reserved-keywords\n        static get(scope, name, ancestor) {\n            if (scope === undefined) {\n                throw kernel.Reporter.error(250 /* UndefinedScope */);\n            }\n            if (scope === null) {\n                throw kernel.Reporter.error(251 /* NullScope */);\n            }\n            let overrideContext = scope.overrideContext;\n            if (ancestor > 0) {\n                // jump up the required number of ancestor contexts (eg $parent.$parent requires two jumps)\n                while (ancestor > 0) {\n                    if (overrideContext.parentOverrideContext === null) {\n                        return undefined;\n                    }\n                    ancestor--;\n                    overrideContext = overrideContext.parentOverrideContext;\n                }\n                return name in overrideContext ? overrideContext : overrideContext.bindingContext;\n            }\n            // traverse the context and it's ancestors, searching for a context that has the name.\n            while (overrideContext && !(name in overrideContext) && !(overrideContext.bindingContext && name in overrideContext.bindingContext)) {\n                overrideContext = overrideContext.parentOverrideContext;\n            }\n            if (overrideContext) {\n                // we located a context with the property.  return it.\n                return name in overrideContext ? overrideContext : overrideContext.bindingContext;\n            }\n            // the name wasn't found.  return the root binding context.\n            return scope.bindingContext || scope.overrideContext;\n        }\n        getObservers() {\n            let observers = this.$observers;\n            if (observers === undefined) {\n                this.$observers = observers = new InternalObserversLookup();\n            }\n            return observers;\n        }\n    }\n    class Scope {\n        constructor(bindingContext, overrideContext) {\n            this.bindingContext = bindingContext;\n            this.overrideContext = overrideContext;\n        }\n        static create(bc, oc) {\n            return new Scope(bc, oc === null || oc === undefined ? OverrideContext.create(bc, oc) : oc);\n        }\n        static fromOverride(oc) {\n            if (oc === null || oc === undefined) {\n                throw kernel.Reporter.error(252 /* NilOverrideContext */);\n            }\n            return new Scope(oc.bindingContext, oc);\n        }\n        static fromParent(ps, bc) {\n            if (ps === null || ps === undefined) {\n                throw kernel.Reporter.error(253 /* NilParentScope */);\n            }\n            return new Scope(bc, OverrideContext.create(bc, ps.overrideContext));\n        }\n    }\n    class OverrideContext {\n        constructor(bindingContext, parentOverrideContext) {\n            this.bindingContext = bindingContext;\n            this.parentOverrideContext = parentOverrideContext;\n            this.$synthetic = true;\n        }\n        static create(bc, poc) {\n            return new OverrideContext(bc, poc === undefined ? null : poc);\n        }\n        getObservers() {\n            let observers = this.$observers;\n            if (observers === undefined) {\n                this.$observers = observers = new InternalObserversLookup();\n            }\n            return observers;\n        }\n    }\n\n    const ISignaler = kernel.DI.createInterface().withDefault(x => x.singleton(Signaler));\n    /*@internal*/\n    class Signaler {\n        constructor() {\n            this.signals = Object.create(null);\n        }\n        dispatchSignal(name, flags) {\n            const listeners = this.signals[name];\n            if (listeners === undefined) {\n                return;\n            }\n            for (const listener of listeners.keys()) {\n                listener.handleChange(undefined, undefined, flags | exports.LifecycleFlags.updateTargetInstance);\n            }\n        }\n        addSignalListener(name, listener) {\n            const signals = this.signals;\n            const listeners = signals[name];\n            if (listeners === undefined) {\n                signals[name] = new Set([listener]);\n            }\n            else {\n                listeners.add(listener);\n            }\n        }\n        removeSignalListener(name, listener) {\n            const listeners = this.signals[name];\n            if (listeners) {\n                listeners.delete(listener);\n            }\n        }\n    }\n\n    function valueConverter(nameOrSource) {\n        return function (target) {\n            return ValueConverterResource.define(nameOrSource, target);\n        };\n    }\n    const ValueConverterResource = {\n        name: 'value-converter',\n        keyFrom(name) {\n            return `${this.name}:${name}`;\n        },\n        isType(Type) {\n            return Type.kind === this;\n        },\n        define(nameOrSource, ctor) {\n            const Type = ctor;\n            const description = typeof nameOrSource === 'string'\n                ? { name: nameOrSource }\n                : nameOrSource;\n            Type.kind = ValueConverterResource;\n            Type.description = description;\n            Type.register = register$1;\n            return Type;\n        }\n    };\n    function register$1(container) {\n        container.register(kernel.Registration.singleton(ValueConverterResource.keyFrom(this.description.name), this));\n    }\n\n    function connects(expr) {\n        return (expr.$kind & 32 /* Connects */) === 32 /* Connects */;\n    }\n    function observes(expr) {\n        return (expr.$kind & 64 /* Observes */) === 64 /* Observes */;\n    }\n    function callsFunction(expr) {\n        return (expr.$kind & 128 /* CallsFunction */) === 128 /* CallsFunction */;\n    }\n    function hasAncestor(expr) {\n        return (expr.$kind & 256 /* HasAncestor */) === 256 /* HasAncestor */;\n    }\n    function isAssignable(expr) {\n        return (expr.$kind & 8192 /* IsAssignable */) === 8192 /* IsAssignable */;\n    }\n    function isLeftHandSide(expr) {\n        return (expr.$kind & 1024 /* IsLeftHandSide */) === 1024 /* IsLeftHandSide */;\n    }\n    function isPrimary(expr) {\n        return (expr.$kind & 512 /* IsPrimary */) === 512 /* IsPrimary */;\n    }\n    function isResource(expr) {\n        return (expr.$kind & 32768 /* IsResource */) === 32768 /* IsResource */;\n    }\n    function hasBind(expr) {\n        return (expr.$kind & 2048 /* HasBind */) === 2048 /* HasBind */;\n    }\n    function hasUnbind(expr) {\n        return (expr.$kind & 4096 /* HasUnbind */) === 4096 /* HasUnbind */;\n    }\n    function isLiteral(expr) {\n        return (expr.$kind & 16384 /* IsLiteral */) === 16384 /* IsLiteral */;\n    }\n    function arePureLiterals(expressions) {\n        if (expressions === undefined || expressions.length === 0) {\n            return true;\n        }\n        for (let i = 0; i < expressions.length; ++i) {\n            if (!isPureLiteral(expressions[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function isPureLiteral(expr) {\n        if (isLiteral(expr)) {\n            switch (expr.$kind) {\n                case 17955 /* ArrayLiteral */:\n                    return arePureLiterals(expr.elements);\n                case 17956 /* ObjectLiteral */:\n                    return arePureLiterals(expr.values);\n                case 17958 /* Template */:\n                    return arePureLiterals(expr.expressions);\n                case 17925 /* PrimitiveLiteral */:\n                    return true;\n            }\n        }\n        return false;\n    }\n    class BindingBehavior {\n        constructor(expression, name, args) {\n            this.expression = expression;\n            this.name = name;\n            this.args = args;\n            this.behaviorKey = BindingBehaviorResource.keyFrom(this.name);\n            this.expressionHasBind = hasBind(expression);\n            this.expressionHasUnbind = hasUnbind(expression);\n        }\n        evaluate(flags, scope, locator) {\n            return this.expression.evaluate(flags, scope, locator);\n        }\n        assign(flags, scope, locator, value) {\n            return this.expression.assign(flags, scope, locator, value);\n        }\n        connect(flags, scope, binding) {\n            this.expression.connect(flags, scope, binding);\n        }\n        bind(flags, scope, binding) {\n            if (scope === undefined) {\n                throw kernel.Reporter.error(250 /* UndefinedScope */, this);\n            }\n            if (scope === null) {\n                throw kernel.Reporter.error(251 /* NullScope */, this);\n            }\n            if (!binding) {\n                throw kernel.Reporter.error(206 /* NoBinding */, this);\n            }\n            const locator = binding.locator;\n            if (!locator) {\n                throw kernel.Reporter.error(202 /* NoLocator */, this);\n            }\n            if (this.expressionHasBind) {\n                this.expression.bind(flags, scope, binding);\n            }\n            const behaviorKey = this.behaviorKey;\n            const behavior = locator.get(behaviorKey);\n            if (!behavior) {\n                throw kernel.Reporter.error(203 /* NoBehaviorFound */, this);\n            }\n            if (binding[behaviorKey] !== undefined && binding[behaviorKey] !== null) {\n                throw kernel.Reporter.error(204 /* BehaviorAlreadyApplied */, this);\n            }\n            binding[behaviorKey] = behavior;\n            behavior.bind.apply(behavior, [flags, scope, binding].concat(evalList(flags, scope, locator, this.args)));\n        }\n        unbind(flags, scope, binding) {\n            const behaviorKey = this.behaviorKey;\n            binding[behaviorKey].unbind(flags, scope, binding);\n            binding[behaviorKey] = null;\n            if (this.expressionHasUnbind) {\n                this.expression.unbind(flags, scope, binding);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitBindingBehavior(this);\n        }\n    }\n    class ValueConverter {\n        constructor(expression, name, args) {\n            this.expression = expression;\n            this.name = name;\n            this.args = args;\n            this.converterKey = ValueConverterResource.keyFrom(this.name);\n        }\n        evaluate(flags, scope, locator) {\n            if (!locator) {\n                throw kernel.Reporter.error(202 /* NoLocator */, this);\n            }\n            const converter = locator.get(this.converterKey);\n            if (!converter) {\n                throw kernel.Reporter.error(205 /* NoConverterFound */, this);\n            }\n            if ('toView' in converter) {\n                const args = this.args;\n                const len = args.length;\n                const result = Array(len + 1);\n                result[0] = this.expression.evaluate(flags, scope, locator);\n                for (let i = 0; i < len; ++i) {\n                    result[i + 1] = args[i].evaluate(flags, scope, locator);\n                }\n                return converter.toView.apply(converter, result);\n            }\n            return this.expression.evaluate(flags, scope, locator);\n        }\n        assign(flags, scope, locator, value) {\n            if (!locator) {\n                throw kernel.Reporter.error(202 /* NoLocator */, this);\n            }\n            const converter = locator.get(this.converterKey);\n            if (!converter) {\n                throw kernel.Reporter.error(205 /* NoConverterFound */, this);\n            }\n            if ('fromView' in converter) {\n                value = converter.fromView.apply(converter, [value].concat(evalList(flags, scope, locator, this.args)));\n            }\n            return this.expression.assign(flags, scope, locator, value);\n        }\n        connect(flags, scope, binding) {\n            if (scope === undefined) {\n                throw kernel.Reporter.error(250 /* UndefinedScope */, this);\n            }\n            if (scope === null) {\n                throw kernel.Reporter.error(251 /* NullScope */, this);\n            }\n            if (!binding) {\n                throw kernel.Reporter.error(206 /* NoBinding */, this);\n            }\n            const locator = binding.locator;\n            if (!locator) {\n                throw kernel.Reporter.error(202 /* NoLocator */, this);\n            }\n            this.expression.connect(flags, scope, binding);\n            const args = this.args;\n            for (let i = 0, ii = args.length; i < ii; ++i) {\n                args[i].connect(flags, scope, binding);\n            }\n            const converter = locator.get(this.converterKey);\n            if (!converter) {\n                throw kernel.Reporter.error(205 /* NoConverterFound */, this);\n            }\n            const signals = converter.signals;\n            if (signals === undefined) {\n                return;\n            }\n            const signaler = locator.get(ISignaler);\n            for (let i = 0, ii = signals.length; i < ii; ++i) {\n                signaler.addSignalListener(signals[i], binding);\n            }\n        }\n        unbind(flags, scope, binding) {\n            const locator = binding.locator;\n            const converter = locator.get(this.converterKey);\n            const signals = converter.signals;\n            if (signals === undefined) {\n                return;\n            }\n            const signaler = locator.get(ISignaler);\n            for (let i = 0, ii = signals.length; i < ii; ++i) {\n                signaler.removeSignalListener(signals[i], binding);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitValueConverter(this);\n        }\n    }\n    class Assign {\n        constructor(target, value) {\n            this.target = target;\n            this.value = value;\n        }\n        evaluate(flags, scope, locator) {\n            return this.target.assign(flags, scope, locator, this.value.evaluate(flags, scope, locator));\n        }\n        connect(flags, scope, binding) {\n            return;\n        }\n        assign(flags, scope, locator, value) {\n            this.value.assign(flags, scope, locator, value);\n            return this.target.assign(flags, scope, locator, value);\n        }\n        accept(visitor) {\n            return visitor.visitAssign(this);\n        }\n    }\n    class Conditional {\n        constructor(condition, yes, no) {\n            this.condition = condition;\n            this.yes = yes;\n            this.no = no;\n        }\n        evaluate(flags, scope, locator) {\n            return (!!this.condition.evaluate(flags, scope, locator))\n                ? this.yes.evaluate(flags, scope, locator)\n                : this.no.evaluate(flags, scope, locator);\n        }\n        connect(flags, scope, binding) {\n            const condition = this.condition;\n            if (condition.evaluate(flags, scope, null)) {\n                this.condition.connect(flags, scope, binding);\n                this.yes.connect(flags, scope, binding);\n            }\n            else {\n                this.condition.connect(flags, scope, binding);\n                this.no.connect(flags, scope, binding);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitConditional(this);\n        }\n    }\n    class AccessThis {\n        constructor(ancestor = 0) {\n            this.ancestor = ancestor;\n        }\n        evaluate(flags, scope, locator) {\n            if (scope === undefined) {\n                throw kernel.Reporter.error(250 /* UndefinedScope */, this);\n            }\n            if (scope === null) {\n                throw kernel.Reporter.error(251 /* NullScope */, this);\n            }\n            let oc = scope.overrideContext;\n            let i = this.ancestor;\n            while (i-- && oc) {\n                oc = oc.parentOverrideContext;\n            }\n            return i < 1 && oc ? oc.bindingContext : undefined;\n        }\n        accept(visitor) {\n            return visitor.visitAccessThis(this);\n        }\n    }\n    AccessThis.$this = new AccessThis(0);\n    AccessThis.$parent = new AccessThis(1);\n    class AccessScope {\n        constructor(name, ancestor = 0) {\n            this.name = name;\n            this.ancestor = ancestor;\n        }\n        evaluate(flags, scope, locator) {\n            const name = this.name;\n            return BindingContext.get(scope, name, this.ancestor)[name];\n        }\n        assign(flags, scope, locator, value) {\n            const name = this.name;\n            const context = BindingContext.get(scope, name, this.ancestor);\n            return context ? (context[name] = value) : undefined;\n        }\n        connect(flags, scope, binding) {\n            const name = this.name;\n            const context = BindingContext.get(scope, name, this.ancestor);\n            binding.observeProperty(context, name);\n        }\n        accept(visitor) {\n            return visitor.visitAccessScope(this);\n        }\n    }\n    class AccessMember {\n        constructor(object, name) {\n            this.object = object;\n            this.name = name;\n        }\n        evaluate(flags, scope, locator) {\n            const instance = this.object.evaluate(flags, scope, locator);\n            return instance === null || instance === undefined ? instance : instance[this.name];\n        }\n        assign(flags, scope, locator, value) {\n            let instance = this.object.evaluate(flags, scope, locator);\n            if (instance === null || typeof instance !== 'object') {\n                instance = {};\n                this.object.assign(flags, scope, locator, instance);\n            }\n            instance[this.name] = value;\n            return value;\n        }\n        connect(flags, scope, binding) {\n            const obj = this.object.evaluate(flags, scope, null);\n            this.object.connect(flags, scope, binding);\n            if (obj) {\n                binding.observeProperty(obj, this.name);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitAccessMember(this);\n        }\n    }\n    class AccessKeyed {\n        constructor(object, key) {\n            this.object = object;\n            this.key = key;\n        }\n        evaluate(flags, scope, locator) {\n            const instance = this.object.evaluate(flags, scope, locator);\n            if (instance === null || instance === undefined) {\n                return undefined;\n            }\n            const key = this.key.evaluate(flags, scope, locator);\n            // note: getKeyed and setKeyed are removed because they are identical to the default spec behavior\n            // and the runtime does this this faster\n            // tslint:disable-next-line:no-any\n            return instance[key];\n        }\n        assign(flags, scope, locator, value) {\n            const instance = this.object.evaluate(flags, scope, locator);\n            const key = this.key.evaluate(flags, scope, locator);\n            // tslint:disable-next-line:no-any\n            return instance[key] = value;\n        }\n        connect(flags, scope, binding) {\n            const obj = this.object.evaluate(flags, scope, null);\n            this.object.connect(flags, scope, binding);\n            if (typeof obj === 'object' && obj !== null) {\n                this.key.connect(flags, scope, binding);\n                const key = this.key.evaluate(flags, scope, null);\n                // observe the property represented by the key as long as it's not an array indexer\n                // (note: string indexers behave the same way as numeric indexers as long as they represent numbers)\n                if (!(Array.isArray(obj) && isNumeric(key))) {\n                    binding.observeProperty(obj, key);\n                }\n            }\n        }\n        accept(visitor) {\n            return visitor.visitAccessKeyed(this);\n        }\n    }\n    class CallScope {\n        constructor(name, args, ancestor = 0) {\n            this.name = name;\n            this.args = args;\n            this.ancestor = ancestor;\n        }\n        evaluate(flags, scope, locator) {\n            const args = evalList(flags, scope, locator, this.args);\n            const context = BindingContext.get(scope, this.name, this.ancestor);\n            const func = getFunction(flags, context, this.name);\n            if (func) {\n                return func.apply(context, args);\n            }\n            return undefined;\n        }\n        connect(flags, scope, binding) {\n            const args = this.args;\n            for (let i = 0, ii = args.length; i < ii; ++i) {\n                args[i].connect(flags, scope, binding);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitCallScope(this);\n        }\n    }\n    class CallMember {\n        constructor(object, name, args) {\n            this.object = object;\n            this.name = name;\n            this.args = args;\n        }\n        evaluate(flags, scope, locator) {\n            const instance = this.object.evaluate(flags, scope, locator);\n            const args = evalList(flags, scope, locator, this.args);\n            const func = getFunction(flags, instance, this.name);\n            if (func) {\n                return func.apply(instance, args);\n            }\n            return undefined;\n        }\n        connect(flags, scope, binding) {\n            const obj = this.object.evaluate(flags, scope, null);\n            this.object.connect(flags, scope, binding);\n            if (getFunction(flags & ~exports.LifecycleFlags.mustEvaluate, obj, this.name)) {\n                const args = this.args;\n                for (let i = 0, ii = args.length; i < ii; ++i) {\n                    args[i].connect(flags, scope, binding);\n                }\n            }\n        }\n        accept(visitor) {\n            return visitor.visitCallMember(this);\n        }\n    }\n    class CallFunction {\n        constructor(func, args) {\n            this.func = func;\n            this.args = args;\n        }\n        evaluate(flags, scope, locator) {\n            const func = this.func.evaluate(flags, scope, locator); // not sure why this cast is needed..\n            if (typeof func === 'function') {\n                return func.apply(null, evalList(flags, scope, locator, this.args));\n            }\n            if (!(flags & exports.LifecycleFlags.mustEvaluate) && (func === null || func === undefined)) {\n                return undefined;\n            }\n            throw kernel.Reporter.error(207 /* NotAFunction */, this);\n        }\n        connect(flags, scope, binding) {\n            const func = this.func.evaluate(flags, scope, null);\n            this.func.connect(flags, scope, binding);\n            if (typeof func === 'function') {\n                const args = this.args;\n                for (let i = 0, ii = args.length; i < ii; ++i) {\n                    args[i].connect(flags, scope, binding);\n                }\n            }\n        }\n        accept(visitor) {\n            return visitor.visitCallFunction(this);\n        }\n    }\n    class Binary {\n        constructor(operation, left, right) {\n            this.operation = operation;\n            this.left = left;\n            this.right = right;\n            // what we're doing here is effectively moving the large switch statement from evaluate to the constructor\n            // so that the check only needs to be done once, and evaluate (which is called many times) will have a lot less\n            // work to do; we can do this because the operation can't change after it's parsed\n            this.evaluate = this[operation];\n        }\n        evaluate(flags, scope, locator) {\n            throw kernel.Reporter.error(208 /* UnknownOperator */, this);\n        }\n        connect(flags, scope, binding) {\n            const left = this.left.evaluate(flags, scope, null);\n            this.left.connect(flags, scope, binding);\n            if (this.operation === '&&' && !left || this.operation === '||' && left) {\n                return;\n            }\n            this.right.connect(flags, scope, binding);\n        }\n        ['&&'](f, s, l) {\n            return this.left.evaluate(f, s, l) && this.right.evaluate(f, s, l);\n        }\n        ['||'](f, s, l) {\n            return this.left.evaluate(f, s, l) || this.right.evaluate(f, s, l);\n        }\n        ['=='](f, s, l) {\n            // tslint:disable-next-line:triple-equals\n            return this.left.evaluate(f, s, l) == this.right.evaluate(f, s, l);\n        }\n        ['==='](f, s, l) {\n            return this.left.evaluate(f, s, l) === this.right.evaluate(f, s, l);\n        }\n        ['!='](f, s, l) {\n            // tslint:disable-next-line:triple-equals\n            return this.left.evaluate(f, s, l) != this.right.evaluate(f, s, l);\n        }\n        ['!=='](f, s, l) {\n            return this.left.evaluate(f, s, l) !== this.right.evaluate(f, s, l);\n        }\n        ['instanceof'](f, s, l) {\n            const right = this.right.evaluate(f, s, l);\n            if (typeof right === 'function') {\n                return this.left.evaluate(f, s, l) instanceof right;\n            }\n            return false;\n        }\n        ['in'](f, s, l) {\n            const right = this.right.evaluate(f, s, l);\n            if (right !== null && typeof right === 'object') {\n                return this.left.evaluate(f, s, l) in right;\n            }\n            return false;\n        }\n        // note: autoConvertAdd (and the null check) is removed because the default spec behavior is already largely similar\n        // and where it isn't, you kind of want it to behave like the spec anyway (e.g. return NaN when adding a number to undefined)\n        // this makes bugs in user code easier to track down for end users\n        // also, skipping these checks and leaving it to the runtime is a nice little perf boost and simplifies our code\n        ['+'](f, s, l) {\n            // tslint:disable-next-line:no-any\n            return this.left.evaluate(f, s, l) + this.right.evaluate(f, s, l);\n        }\n        ['-'](f, s, l) {\n            // tslint:disable-next-line:no-any\n            return this.left.evaluate(f, s, l) - this.right.evaluate(f, s, l);\n        }\n        ['*'](f, s, l) {\n            // tslint:disable-next-line:no-any\n            return this.left.evaluate(f, s, l) * this.right.evaluate(f, s, l);\n        }\n        ['/'](f, s, l) {\n            // tslint:disable-next-line:no-any\n            return this.left.evaluate(f, s, l) / this.right.evaluate(f, s, l);\n        }\n        ['%'](f, s, l) {\n            // tslint:disable-next-line:no-any\n            return this.left.evaluate(f, s, l) % this.right.evaluate(f, s, l);\n        }\n        ['<'](f, s, l) {\n            return this.left.evaluate(f, s, l) < this.right.evaluate(f, s, l);\n        }\n        ['>'](f, s, l) {\n            return this.left.evaluate(f, s, l) > this.right.evaluate(f, s, l);\n        }\n        ['<='](f, s, l) {\n            return this.left.evaluate(f, s, l) <= this.right.evaluate(f, s, l);\n        }\n        ['>='](f, s, l) {\n            return this.left.evaluate(f, s, l) >= this.right.evaluate(f, s, l);\n        }\n        // tslint:disable-next-line:member-ordering\n        accept(visitor) {\n            return visitor.visitBinary(this);\n        }\n    }\n    class Unary {\n        constructor(operation, expression) {\n            this.operation = operation;\n            this.expression = expression;\n            // see Binary (we're doing the same thing here)\n            // tslint:disable-next-line:no-any\n            this.evaluate = this[operation];\n        }\n        evaluate(flags, scope, locator) {\n            throw kernel.Reporter.error(208 /* UnknownOperator */, this);\n        }\n        connect(flags, scope, binding) {\n            this.expression.connect(flags, scope, binding);\n        }\n        ['void'](f, s, l) {\n            return void this.expression.evaluate(f, s, l);\n        }\n        ['typeof'](f, s, l) {\n            return typeof this.expression.evaluate(f, s, l);\n        }\n        ['!'](f, s, l) {\n            return !this.expression.evaluate(f, s, l);\n        }\n        ['-'](f, s, l) {\n            return -this.expression.evaluate(f, s, l);\n        }\n        ['+'](f, s, l) {\n            return +this.expression.evaluate(f, s, l);\n        }\n        // tslint:disable-next-line:member-ordering\n        accept(visitor) {\n            return visitor.visitUnary(this);\n        }\n    }\n    class PrimitiveLiteral {\n        constructor(value) {\n            this.value = value;\n        }\n        evaluate(flags, scope, locator) {\n            return this.value;\n        }\n        accept(visitor) {\n            return visitor.visitPrimitiveLiteral(this);\n        }\n    }\n    PrimitiveLiteral.$undefined = new PrimitiveLiteral(undefined);\n    PrimitiveLiteral.$null = new PrimitiveLiteral(null);\n    PrimitiveLiteral.$true = new PrimitiveLiteral(true);\n    PrimitiveLiteral.$false = new PrimitiveLiteral(false);\n    PrimitiveLiteral.$empty = new PrimitiveLiteral('');\n    class HtmlLiteral {\n        constructor(parts) {\n            this.parts = parts;\n        }\n        evaluate(flags, scope, locator) {\n            const elements = this.parts;\n            let result = '';\n            for (let i = 0, ii = elements.length; i < ii; ++i) {\n                const value = elements[i].evaluate(flags, scope, locator);\n                if (value === undefined || value === null) {\n                    continue;\n                }\n                result += value;\n            }\n            return result;\n        }\n        connect(flags, scope, binding) {\n            for (let i = 0, ii = this.parts.length; i < ii; ++i) {\n                this.parts[i].connect(flags, scope, binding);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitHtmlLiteral(this);\n        }\n    }\n    class ArrayLiteral {\n        constructor(elements) {\n            this.elements = elements;\n        }\n        evaluate(flags, scope, locator) {\n            const elements = this.elements;\n            const length = elements.length;\n            const result = Array(length);\n            for (let i = 0; i < length; ++i) {\n                result[i] = elements[i].evaluate(flags, scope, locator);\n            }\n            return result;\n        }\n        connect(flags, scope, binding) {\n            const elements = this.elements;\n            for (let i = 0, ii = elements.length; i < ii; ++i) {\n                elements[i].connect(flags, scope, binding);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitArrayLiteral(this);\n        }\n    }\n    ArrayLiteral.$empty = new ArrayLiteral(kernel.PLATFORM.emptyArray);\n    class ObjectLiteral {\n        constructor(keys, values) {\n            this.keys = keys;\n            this.values = values;\n        }\n        evaluate(flags, scope, locator) {\n            const instance = {};\n            const keys = this.keys;\n            const values = this.values;\n            for (let i = 0, ii = keys.length; i < ii; ++i) {\n                instance[keys[i]] = values[i].evaluate(flags, scope, locator);\n            }\n            return instance;\n        }\n        connect(flags, scope, binding) {\n            const keys = this.keys;\n            const values = this.values;\n            for (let i = 0, ii = keys.length; i < ii; ++i) {\n                values[i].connect(flags, scope, binding);\n            }\n        }\n        accept(visitor) {\n            return visitor.visitObjectLiteral(this);\n        }\n    }\n    ObjectLiteral.$empty = new ObjectLiteral(kernel.PLATFORM.emptyArray, kernel.PLATFORM.emptyArray);\n    class Template {\n        constructor(cooked, expressions) {\n            this.cooked = cooked;\n            this.expressions = expressions;\n            this.expressions = expressions || kernel.PLATFORM.emptyArray;\n        }\n        evaluate(flags, scope, locator) {\n            const expressions = this.expressions;\n            const cooked = this.cooked;\n            let result = cooked[0];\n            for (let i = 0, ii = expressions.length; i < ii; ++i) {\n                result += expressions[i].evaluate(flags, scope, locator);\n                result += cooked[i + 1];\n            }\n            return result;\n        }\n        connect(flags, scope, binding) {\n            const expressions = this.expressions;\n            for (let i = 0, ii = expressions.length; i < ii; ++i) {\n                expressions[i].connect(flags, scope, binding);\n                i++;\n            }\n        }\n        accept(visitor) {\n            return visitor.visitTemplate(this);\n        }\n    }\n    Template.$empty = new Template(['']);\n    class TaggedTemplate {\n        constructor(cooked, raw, func, expressions) {\n            this.cooked = cooked;\n            this.func = func;\n            this.expressions = expressions;\n            cooked.raw = raw;\n            this.expressions = expressions || kernel.PLATFORM.emptyArray;\n        }\n        evaluate(flags, scope, locator) {\n            const expressions = this.expressions;\n            const len = expressions.length;\n            const results = Array(len);\n            for (let i = 0, ii = len; i < ii; ++i) {\n                results[i] = expressions[i].evaluate(flags, scope, locator);\n            }\n            const func = this.func.evaluate(flags, scope, locator); // not sure why this cast is needed..\n            if (typeof func !== 'function') {\n                throw kernel.Reporter.error(207 /* NotAFunction */, this);\n            }\n            return func.apply(null, [this.cooked].concat(results));\n        }\n        connect(flags, scope, binding) {\n            const expressions = this.expressions;\n            for (let i = 0, ii = expressions.length; i < ii; ++i) {\n                expressions[i].connect(flags, scope, binding);\n            }\n            this.func.connect(flags, scope, binding);\n        }\n        accept(visitor) {\n            return visitor.visitTaggedTemplate(this);\n        }\n    }\n    class ArrayBindingPattern {\n        // We'll either have elements, or keys+values, but never all 3\n        constructor(elements) {\n            this.elements = elements;\n        }\n        // tslint:disable-next-line:no-any\n        evaluate(flags, scope, locator) {\n            // TODO\n        }\n        // tslint:disable-next-line:no-any\n        assign(flags, scope, locator, obj) {\n            // TODO\n        }\n        connect(flags, scope, binding) {\n            return;\n        }\n        accept(visitor) {\n            return visitor.visitArrayBindingPattern(this);\n        }\n    }\n    class ObjectBindingPattern {\n        // We'll either have elements, or keys+values, but never all 3\n        constructor(keys, values) {\n            this.keys = keys;\n            this.values = values;\n        }\n        // tslint:disable-next-line:no-any\n        evaluate(flags, scope, locator) {\n            // TODO\n        }\n        // tslint:disable-next-line:no-any\n        assign(flags, scope, locator, obj) {\n            // TODO\n        }\n        connect(flags, scope, binding) {\n            return;\n        }\n        accept(visitor) {\n            return visitor.visitObjectBindingPattern(this);\n        }\n    }\n    class BindingIdentifier {\n        constructor(name) {\n            this.name = name;\n        }\n        evaluate(flags, scope, locator) {\n            return this.name;\n        }\n        connect(flags, scope, binding) {\n            return;\n        }\n        accept(visitor) {\n            return visitor.visitBindingIdentifier(this);\n        }\n    }\n    const toStringTag = Object.prototype.toString;\n    // https://tc39.github.io/ecma262/#sec-iteration-statements\n    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n    class ForOfStatement {\n        constructor(declaration, iterable) {\n            this.declaration = declaration;\n            this.iterable = iterable;\n        }\n        evaluate(flags, scope, locator) {\n            return this.iterable.evaluate(flags, scope, locator);\n        }\n        count(result) {\n            return CountForOfStatement[toStringTag.call(result)](result);\n        }\n        // tslint:disable-next-line:no-any\n        iterate(result, func) {\n            IterateForOfStatement[toStringTag.call(result)](result, func);\n        }\n        connect(flags, scope, binding) {\n            this.declaration.connect(flags, scope, binding);\n            this.iterable.connect(flags, scope, binding);\n        }\n        accept(visitor) {\n            return visitor.visitForOfStatement(this);\n        }\n    }\n    /*\n    * Note: this implementation is far simpler than the one in vCurrent and might be missing important stuff (not sure yet)\n    * so while this implementation is identical to Template and we could reuse that one, we don't want to lock outselves in to potentially the wrong abstraction\n    * but this class might be a candidate for removal if it turns out it does provide all we need\n    */\n    class Interpolation {\n        constructor(parts, expressions) {\n            this.parts = parts;\n            this.expressions = expressions;\n            this.isMulti = expressions.length > 1;\n            this.firstExpression = expressions[0];\n        }\n        evaluate(flags, scope, locator) {\n            if (this.isMulti) {\n                const expressions = this.expressions;\n                const parts = this.parts;\n                let result = parts[0];\n                for (let i = 0, ii = expressions.length; i < ii; ++i) {\n                    result += expressions[i].evaluate(flags, scope, locator);\n                    result += parts[i + 1];\n                }\n                return result;\n            }\n            else {\n                const parts = this.parts;\n                return parts[0] + this.firstExpression.evaluate(flags, scope, locator) + parts[1];\n            }\n        }\n        connect(flags, scope, binding) {\n            return;\n        }\n        accept(visitor) {\n            return visitor.visitInterpolation(this);\n        }\n    }\n    /*\n    * Note: for a property that is always the same, directly assigning it to the prototype is more efficient CPU wise\n    * (gets assigned once, instead of per constructor call) as well as memory wise (stored once, instead of per instance)\n    *\n    * This gives us a cheap way to add some extra information to the AST for the runtime to do things more efficiently.\n    */\n    BindingBehavior.prototype.$kind = 38962 /* BindingBehavior */;\n    ValueConverter.prototype.$kind = 36913 /* ValueConverter */;\n    Assign.prototype.$kind = 8208 /* Assign */;\n    Conditional.prototype.$kind = 63 /* Conditional */;\n    AccessThis.prototype.$kind = 1793 /* AccessThis */;\n    AccessScope.prototype.$kind = 10082 /* AccessScope */;\n    AccessMember.prototype.$kind = 9323 /* AccessMember */;\n    AccessKeyed.prototype.$kind = 9324 /* AccessKeyed */;\n    CallScope.prototype.$kind = 1448 /* CallScope */;\n    CallMember.prototype.$kind = 1161 /* CallMember */;\n    CallFunction.prototype.$kind = 1162 /* CallFunction */;\n    Binary.prototype.$kind = 46 /* Binary */;\n    Unary.prototype.$kind = 39 /* Unary */;\n    PrimitiveLiteral.prototype.$kind = 17925 /* PrimitiveLiteral */;\n    HtmlLiteral.prototype.$kind = 51 /* HtmlLiteral */;\n    ArrayLiteral.prototype.$kind = 17955 /* ArrayLiteral */;\n    ObjectLiteral.prototype.$kind = 17956 /* ObjectLiteral */;\n    Template.prototype.$kind = 17958 /* Template */;\n    TaggedTemplate.prototype.$kind = 1197 /* TaggedTemplate */;\n    ArrayBindingPattern.prototype.$kind = 65556 /* ArrayBindingPattern */;\n    ObjectBindingPattern.prototype.$kind = 65557 /* ObjectBindingPattern */;\n    BindingIdentifier.prototype.$kind = 65558 /* BindingIdentifier */;\n    ForOfStatement.prototype.$kind = 55 /* ForOfStatement */;\n    Interpolation.prototype.$kind = 24 /* Interpolation */;\n    /// Evaluate the [list] in context of the [scope].\n    function evalList(flags, scope, locator, list) {\n        const len = list.length;\n        const result = Array(len);\n        for (let i = 0; i < len; ++i) {\n            result[i] = list[i].evaluate(flags, scope, locator);\n        }\n        return result;\n    }\n    function getFunction(flags, obj, name) {\n        const func = obj === null || obj === undefined ? null : obj[name];\n        if (typeof func === 'function') {\n            return func;\n        }\n        if (!(flags & exports.LifecycleFlags.mustEvaluate) && (func === null || func === undefined)) {\n            return null;\n        }\n        throw kernel.Reporter.error(207 /* NotAFunction */, obj, name, func);\n    }\n    function isNumeric(value) {\n        const valueType = typeof value;\n        if (valueType === 'number')\n            return true;\n        if (valueType !== 'string')\n            return false;\n        const len = value.length;\n        if (len === 0)\n            return false;\n        for (let i = 0; i < len; ++i) {\n            const char = value.charCodeAt(i);\n            if (char < 0x30 /*0*/ || char > 0x39 /*9*/) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /*@internal*/\n    const IterateForOfStatement = {\n        ['[object Array]'](result, func) {\n            for (let i = 0, ii = result.length; i < ii; ++i) {\n                func(result, i, result[i]);\n            }\n        },\n        ['[object Map]'](result, func) {\n            const arr = Array(result.size);\n            let i = -1;\n            for (const entry of result.entries()) {\n                arr[++i] = entry;\n            }\n            IterateForOfStatement['[object Array]'](arr, func);\n        },\n        ['[object Set]'](result, func) {\n            const arr = Array(result.size);\n            let i = -1;\n            for (const key of result.keys()) {\n                arr[++i] = key;\n            }\n            IterateForOfStatement['[object Array]'](arr, func);\n        },\n        ['[object Number]'](result, func) {\n            const arr = Array(result);\n            for (let i = 0; i < result; ++i) {\n                arr[i] = i;\n            }\n            IterateForOfStatement['[object Array]'](arr, func);\n        },\n        ['[object Null]'](result, func) {\n            return;\n        },\n        ['[object Undefined]'](result, func) {\n            return;\n        }\n    };\n    /*@internal*/\n    const CountForOfStatement = {\n        ['[object Array]'](result) { return result.length; },\n        ['[object Map]'](result) { return result.size; },\n        ['[object Set]'](result) { return result.size; },\n        ['[object Number]'](result) { return result; },\n        ['[object Null]'](result) { return 0; },\n        ['[object Undefined]'](result) { return 0; }\n    };\n    // Give each AST class a noop for each interface method if and only if it's not already defined\n    // This accomplishes the following:\n    //   1) no runtime error due to bad AST structure (it's the parser's job to guard against that)\n    //   2) no runtime error due to a bad binding such as two-way on a literal (no need, since it doesn't threaten the integrity of the app's state)\n    //   3) should we decide something else, we can easily change the global behavior of 1) and 2) by simply assigning a different method here (either in the source or via AOT)\n    const ast = [AccessThis, AccessScope, ArrayLiteral, ObjectLiteral, PrimitiveLiteral, Template, Unary, CallFunction, CallMember, CallScope, AccessMember, AccessKeyed, TaggedTemplate, Binary, Conditional, Assign, ForOfStatement];\n    for (let i = 0, ii = ast.length; i < ii; ++i) {\n        const proto = ast[i].prototype;\n        // tslint:disable-next-line:no-any\n        proto.assign = proto.assign || kernel.PLATFORM.noop;\n        proto.connect = proto.connect || kernel.PLATFORM.noop;\n    }\n\n    // TODO: add connect-queue (or something similar) back in when everything else is working, to improve startup time\n    const slotNames = [];\n    const versionSlotNames = [];\n    let lastSlot = -1;\n    function ensureEnoughSlotNames(currentSlot) {\n        if (currentSlot === lastSlot) {\n            lastSlot += 5;\n            const ii = slotNames.length = versionSlotNames.length = lastSlot + 1;\n            for (let i = currentSlot + 1; i < ii; ++i) {\n                slotNames[i] = `_observer${i}`;\n                versionSlotNames[i] = `_observerVersion${i}`;\n            }\n        }\n    }\n    ensureEnoughSlotNames(-1);\n    /*@internal*/\n    function addObserver(observer) {\n        // find the observer.\n        const observerSlots = this.observerSlots === undefined ? 0 : this.observerSlots;\n        let i = observerSlots;\n        while (i-- && this[slotNames[i]] !== observer)\n            ;\n        // if we are not already observing, put the observer in an open slot and subscribe.\n        if (i === -1) {\n            i = 0;\n            while (this[slotNames[i]]) {\n                i++;\n            }\n            this[slotNames[i]] = observer;\n            observer.subscribe(this);\n            // increment the slot count.\n            if (i === observerSlots) {\n                this.observerSlots = i + 1;\n            }\n        }\n        // set the \"version\" when the observer was used.\n        if (this.version === undefined) {\n            this.version = 0;\n        }\n        this[versionSlotNames[i]] = this.version;\n        ensureEnoughSlotNames(i);\n    }\n    /*@internal*/\n    function observeProperty(obj, propertyName) {\n        const observer = this.observerLocator.getObserver(obj, propertyName);\n        /* Note: we need to cast here because we can indeed get an accessor instead of an observer,\n         *  in which case the call to observer.subscribe will throw. It's not very clean and we can solve this in 2 ways:\n         *  1. Fail earlier: only let the locator resolve observers from .getObserver, and throw if no branches are left (e.g. it would otherwise return an accessor)\n         *  2. Fail silently (without throwing): give all accessors a no-op subscribe method\n         *\n         * We'll probably want to implement some global configuration (like a \"strict\" toggle) so users can pick between enforced correctness vs. ease-of-use\n         */\n        this.addObserver(observer);\n    }\n    /*@internal*/\n    function unobserve(all) {\n        const slots = this.observerSlots;\n        let slotName;\n        let observer;\n        if (all === true) {\n            for (let i = 0; i < slots; ++i) {\n                slotName = slotNames[i];\n                observer = this[slotName];\n                if (observer !== null && observer !== undefined) {\n                    this[slotName] = null;\n                    observer.unsubscribe(this);\n                }\n            }\n        }\n        else {\n            const version = this.version;\n            for (let i = 0; i < slots; ++i) {\n                if (this[versionSlotNames[i]] !== version) {\n                    slotName = slotNames[i];\n                    observer = this[slotName];\n                    if (observer !== null && observer !== undefined) {\n                        this[slotName] = null;\n                        observer.unsubscribe(this);\n                    }\n                }\n            }\n        }\n    }\n    function connectableDecorator(target) {\n        const proto = target.prototype;\n        if (!proto.hasOwnProperty('observeProperty'))\n            proto.observeProperty = observeProperty;\n        if (!proto.hasOwnProperty('unobserve'))\n            proto.unobserve = unobserve;\n        if (!proto.hasOwnProperty('addObserver'))\n            proto.addObserver = addObserver;\n        return target;\n    }\n    function connectable(target) {\n        return target === undefined ? connectableDecorator : connectableDecorator(target);\n    }\n\n    // BindingMode is not a const enum (and therefore not inlined), so assigning them to a variable to save a member accessor is a minor perf tweak\n    const { oneTime: oneTime$1, toView: toView$1, fromView: fromView$1 } = exports.BindingMode;\n    // pre-combining flags for bitwise checks is a minor perf tweak\n    const toViewOrOneTime = toView$1 | oneTime$1;\n    exports.Binding = class Binding {\n        constructor(sourceExpression, target, targetProperty, mode, observerLocator, locator) {\n            this.sourceExpression = sourceExpression;\n            this.target = target;\n            this.targetProperty = targetProperty;\n            this.mode = mode;\n            this.observerLocator = observerLocator;\n            this.locator = locator;\n            this.$nextConnect = null;\n            this.$nextPatch = null;\n            this.$nextBind = null;\n            this.$prevBind = null;\n            this.$state = 0 /* none */;\n            this.$scope = null;\n            this.$lifecycle = locator.get(ILifecycle);\n        }\n        updateTarget(value, flags) {\n            this.targetObserver.setValue(value, flags | exports.LifecycleFlags.updateTargetInstance);\n        }\n        updateSource(value, flags) {\n            this.sourceExpression.assign(flags | exports.LifecycleFlags.updateSourceExpression, this.$scope, this.locator, value);\n        }\n        handleChange(newValue, previousValue, flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            const sourceExpression = this.sourceExpression;\n            const $scope = this.$scope;\n            const locator = this.locator;\n            if (flags & exports.LifecycleFlags.updateTargetInstance) {\n                const targetObserver = this.targetObserver;\n                const mode = this.mode;\n                previousValue = targetObserver.getValue();\n                // if the only observable is an AccessScope then we can assume the passed-in newValue is the correct and latest value\n                if (sourceExpression.$kind !== 10082 /* AccessScope */ || this.observerSlots > 1) {\n                    newValue = sourceExpression.evaluate(flags, $scope, locator);\n                }\n                if (newValue !== previousValue) {\n                    this.updateTarget(newValue, flags);\n                }\n                if ((mode & oneTime$1) === 0) {\n                    this.version++;\n                    sourceExpression.connect(flags, $scope, this);\n                    this.unobserve(false);\n                }\n                return;\n            }\n            if (flags & exports.LifecycleFlags.updateSourceExpression) {\n                if (newValue !== sourceExpression.evaluate(flags, $scope, locator)) {\n                    this.updateSource(newValue, flags);\n                }\n                return;\n            }\n            throw kernel.Reporter.error(15, exports.LifecycleFlags[flags]);\n        }\n        $bind(flags, scope) {\n            if (this.$state & 2 /* isBound */) {\n                if (this.$scope === scope) {\n                    return;\n                }\n                this.$unbind(flags | exports.LifecycleFlags.fromBind);\n            }\n            // add isBinding flag\n            this.$state |= 1 /* isBinding */;\n            this.$scope = scope;\n            let sourceExpression = this.sourceExpression;\n            if (hasBind(sourceExpression)) {\n                sourceExpression.bind(flags, scope, this);\n            }\n            const mode = this.mode;\n            let targetObserver = this.targetObserver;\n            if (!targetObserver) {\n                if (mode & fromView$1) {\n                    targetObserver = this.targetObserver = this.observerLocator.getObserver(this.target, this.targetProperty);\n                }\n                else {\n                    targetObserver = this.targetObserver = this.observerLocator.getAccessor(this.target, this.targetProperty);\n                }\n            }\n            if (targetObserver.bind) {\n                targetObserver.bind(flags);\n            }\n            // during bind, binding behavior might have changed sourceExpression\n            sourceExpression = this.sourceExpression;\n            if (mode & toViewOrOneTime) {\n                this.updateTarget(sourceExpression.evaluate(flags, scope, this.locator), flags);\n            }\n            if (mode & toView$1) {\n                this.$lifecycle.enqueueConnect(this);\n            }\n            if (mode & fromView$1) {\n                targetObserver.subscribe(this);\n            }\n            // add isBound flag and remove isBinding flag\n            this.$state |= 2 /* isBound */;\n            this.$state &= ~1 /* isBinding */;\n        }\n        $unbind(flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            const sourceExpression = this.sourceExpression;\n            if (hasUnbind(sourceExpression)) {\n                sourceExpression.unbind(flags, this.$scope, this);\n            }\n            this.$scope = null;\n            const targetObserver = this.targetObserver;\n            if (targetObserver.unbind) {\n                targetObserver.unbind(flags);\n            }\n            if (targetObserver.unsubscribe) {\n                targetObserver.unsubscribe(this);\n            }\n            this.unobserve(true);\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n        }\n        connect(flags) {\n            if (this.$state & 2 /* isBound */) {\n                this.sourceExpression.connect(flags | exports.LifecycleFlags.mustEvaluate, this.$scope, this);\n            }\n        }\n        patch(flags) {\n            if (this.$state & 2 /* isBound */) {\n                this.updateTarget(this.sourceExpression.evaluate(flags | exports.LifecycleFlags.mustEvaluate, this.$scope, this.locator), flags);\n            }\n        }\n    };\n    exports.Binding = __decorate([\n        connectable()\n    ], exports.Binding);\n\n    const unset = {};\n    /*@internal*/\n    function debounceCallSource(event) {\n        const state = this.debounceState;\n        clearTimeout(state.timeoutId);\n        state.timeoutId = setTimeout(() => this.debouncedMethod(event), state.delay);\n    }\n    /*@internal*/\n    function debounceCall(newValue, oldValue, flags) {\n        const state = this.debounceState;\n        clearTimeout(state.timeoutId);\n        if (!(flags & state.callContextToDebounce)) {\n            state.oldValue = unset;\n            this.debouncedMethod(newValue, oldValue, flags);\n            return;\n        }\n        if (state.oldValue === unset) {\n            state.oldValue = oldValue;\n        }\n        state.timeoutId = setTimeout(() => {\n            const ov = state.oldValue;\n            state.oldValue = unset;\n            this.debouncedMethod(newValue, ov, flags);\n        }, state.delay);\n    }\n    const fromView$2 = exports.BindingMode.fromView;\n    exports.DebounceBindingBehavior = class DebounceBindingBehavior {\n        bind(flags, scope, binding, delay = 200) {\n            let methodToDebounce;\n            let callContextToDebounce;\n            let debouncer;\n            if (binding instanceof exports.Binding) {\n                methodToDebounce = 'handleChange';\n                debouncer = debounceCall;\n                callContextToDebounce = binding.mode & fromView$2 ? exports.LifecycleFlags.updateSourceExpression : exports.LifecycleFlags.updateTargetInstance;\n            }\n            else {\n                methodToDebounce = 'callSource';\n                debouncer = debounceCallSource;\n                callContextToDebounce = exports.LifecycleFlags.updateTargetInstance;\n            }\n            // stash the original method and it's name.\n            // note: a generic name like \"originalMethod\" is not used to avoid collisions\n            // with other binding behavior types.\n            binding.debouncedMethod = binding[methodToDebounce];\n            binding.debouncedMethod.originalName = methodToDebounce;\n            // replace the original method with the debouncing version.\n            binding[methodToDebounce] = debouncer;\n            // create the debounce state.\n            binding.debounceState = {\n                callContextToDebounce,\n                delay,\n                timeoutId: 0,\n                oldValue: unset\n            };\n        }\n        unbind(flags, scope, binding) {\n            // restore the state of the binding.\n            const methodToRestore = binding.debouncedMethod.originalName;\n            binding[methodToRestore] = binding.debouncedMethod;\n            binding.debouncedMethod = null;\n            clearTimeout(binding.debounceState.timeoutId);\n            binding.debounceState = null;\n        }\n    };\n    exports.DebounceBindingBehavior = __decorate([\n        bindingBehavior('debounce')\n    ], exports.DebounceBindingBehavior);\n\n    const SCRIPT_REGEX = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi;\n    const ISanitizer = kernel.DI.createInterface()\n        .withDefault(x => x.singleton(class {\n        sanitize(input) {\n            return input.replace(SCRIPT_REGEX, '');\n        }\n    }));\n    /**\n     * Simple html sanitization converter to preserve whitelisted elements and attributes on a bound property containing html.\n     */\n    exports.SanitizeValueConverter = class SanitizeValueConverter {\n        constructor(sanitizer) {\n            this.sanitizer = sanitizer;\n            this.sanitizer = sanitizer;\n        }\n        /**\n         * Process the provided markup that flows to the view.\n         * @param untrustedMarkup The untrusted markup to be sanitized.\n         */\n        toView(untrustedMarkup) {\n            if (untrustedMarkup === null || untrustedMarkup === undefined) {\n                return null;\n            }\n            return this.sanitizer.sanitize(untrustedMarkup);\n        }\n    };\n    exports.SanitizeValueConverter = __decorate([\n        valueConverter('sanitize'),\n        kernel.inject(ISanitizer)\n    ], exports.SanitizeValueConverter);\n\n    //Note: path and deepPath are designed to handle v0 and v1 shadow dom specs respectively\n    /*@internal*/\n    function findOriginalEventTarget(event) {\n        return (event.composedPath && event.composedPath()[0]) || (event.deepPath && event.deepPath()[0]) || (event.path && event.path[0]) || event.target;\n    }\n    function stopPropagation() {\n        this.standardStopPropagation();\n        this.propagationStopped = true;\n    }\n    function handleCapturedEvent(event) {\n        event.propagationStopped = false;\n        let target = findOriginalEventTarget(event);\n        const orderedCallbacks = [];\n        /**\n         * During capturing phase, event 'bubbles' down from parent. Needs to reorder callback from root down to target\n         */\n        while (target) {\n            if (target.capturedCallbacks) {\n                const callback = target.capturedCallbacks[event.type];\n                if (callback) {\n                    if (event.stopPropagation !== stopPropagation) {\n                        event.standardStopPropagation = event.stopPropagation;\n                        event.stopPropagation = stopPropagation;\n                    }\n                    orderedCallbacks.push(callback);\n                }\n            }\n            target = target.parentNode;\n        }\n        for (let i = orderedCallbacks.length - 1; i >= 0 && !event.propagationStopped; i--) {\n            const orderedCallback = orderedCallbacks[i];\n            if ('handleEvent' in orderedCallback) {\n                orderedCallback.handleEvent(event);\n            }\n            else {\n                orderedCallback(event);\n            }\n        }\n    }\n    function handleDelegatedEvent(event) {\n        event.propagationStopped = false;\n        let target = findOriginalEventTarget(event);\n        while (target && !event.propagationStopped) {\n            if (target.delegatedCallbacks) {\n                const callback = target.delegatedCallbacks[event.type];\n                if (callback) {\n                    if (event.stopPropagation !== stopPropagation) {\n                        event.standardStopPropagation = event.stopPropagation;\n                        event.stopPropagation = stopPropagation;\n                    }\n                    if ('handleEvent' in callback) {\n                        callback.handleEvent(event);\n                    }\n                    else {\n                        callback(event);\n                    }\n                }\n            }\n            target = target.parentNode;\n        }\n    }\n    class ListenerTracker {\n        constructor(eventName, listener, capture) {\n            this.eventName = eventName;\n            this.listener = listener;\n            this.capture = capture;\n            this.count = 0;\n        }\n        increment() {\n            this.count++;\n            if (this.count === 1) {\n                DOM.addEventListener(this.eventName, this.listener, null, this.capture);\n            }\n        }\n        decrement() {\n            this.count--;\n            if (this.count === 0) {\n                DOM.removeEventListener(this.eventName, this.listener, null, this.capture);\n            }\n        }\n    }\n    /**\n     * Enable dispose() pattern for `delegate` & `capture` commands\n     */\n    class DelegateOrCaptureSubscription {\n        constructor(entry, lookup, targetEvent, callback) {\n            this.entry = entry;\n            this.lookup = lookup;\n            this.targetEvent = targetEvent;\n            lookup[targetEvent] = callback;\n        }\n        dispose() {\n            this.entry.decrement();\n            this.lookup[this.targetEvent] = null;\n        }\n    }\n    /**\n     * Enable dispose() pattern for addEventListener for `trigger`\n     */\n    class TriggerSubscription {\n        constructor(target, targetEvent, callback) {\n            this.target = target;\n            this.targetEvent = targetEvent;\n            this.callback = callback;\n            DOM.addEventListener(targetEvent, callback, target);\n        }\n        dispose() {\n            DOM.removeEventListener(this.targetEvent, this.callback, this.target);\n        }\n    }\n    (function (DelegationStrategy) {\n        DelegationStrategy[DelegationStrategy[\"none\"] = 0] = \"none\";\n        DelegationStrategy[DelegationStrategy[\"capturing\"] = 1] = \"capturing\";\n        DelegationStrategy[DelegationStrategy[\"bubbling\"] = 2] = \"bubbling\";\n    })(exports.DelegationStrategy || (exports.DelegationStrategy = {}));\n    class EventSubscriber {\n        constructor(events) {\n            this.events = events;\n            this.events = events;\n            this.target = null;\n            this.handler = null;\n        }\n        subscribe(node, callbackOrListener) {\n            this.target = node;\n            this.handler = callbackOrListener;\n            const add = DOM.addEventListener;\n            const events = this.events;\n            for (let i = 0, ii = events.length; ii > i; ++i) {\n                add(events[i], callbackOrListener, node);\n            }\n        }\n        dispose() {\n            const node = this.target;\n            const callbackOrListener = this.handler;\n            const events = this.events;\n            const remove = DOM.removeEventListener;\n            for (let i = 0, ii = events.length; ii > i; ++i) {\n                remove(events[i], callbackOrListener, node);\n            }\n            this.target = this.handler = null;\n        }\n    }\n    const IEventManager = kernel.DI.createInterface()\n        .withDefault(x => x.singleton(EventManager));\n    /*@internal*/\n    class EventManager {\n        constructor() {\n            this.elementHandlerLookup = {};\n            this.delegatedHandlers = {};\n            this.capturedHandlers = {};\n            this.registerElementConfiguration({\n                tagName: 'INPUT',\n                properties: {\n                    value: ['change', 'input'],\n                    checked: ['change', 'input'],\n                    files: ['change', 'input']\n                }\n            });\n            this.registerElementConfiguration({\n                tagName: 'TEXTAREA',\n                properties: {\n                    value: ['change', 'input']\n                }\n            });\n            this.registerElementConfiguration({\n                tagName: 'SELECT',\n                properties: {\n                    value: ['change']\n                }\n            });\n            this.registerElementConfiguration({\n                tagName: 'content editable',\n                properties: {\n                    value: ['change', 'input', 'blur', 'keyup', 'paste']\n                }\n            });\n            this.registerElementConfiguration({\n                tagName: 'scrollable element',\n                properties: {\n                    scrollTop: ['scroll'],\n                    scrollLeft: ['scroll']\n                }\n            });\n        }\n        registerElementConfiguration(config) {\n            const properties = config.properties;\n            const lookup = this.elementHandlerLookup[config.tagName] = {};\n            for (const propertyName in properties) {\n                if (properties.hasOwnProperty(propertyName)) {\n                    lookup[propertyName] = properties[propertyName];\n                }\n            }\n        }\n        getElementHandler(target, propertyName) {\n            const tagName = target['tagName'];\n            const lookup = this.elementHandlerLookup;\n            if (tagName) {\n                if (lookup[tagName] && lookup[tagName][propertyName]) {\n                    return new EventSubscriber(lookup[tagName][propertyName]);\n                }\n                if (propertyName === 'textContent' || propertyName === 'innerHTML') {\n                    return new EventSubscriber(lookup['content editable'].value);\n                }\n                if (propertyName === 'scrollTop' || propertyName === 'scrollLeft') {\n                    return new EventSubscriber(lookup['scrollable element'][propertyName]);\n                }\n            }\n            return null;\n        }\n        addEventListener(target, targetEvent, callbackOrListener, strategy) {\n            let delegatedHandlers;\n            let capturedHandlers;\n            let handlerEntry;\n            if (strategy === exports.DelegationStrategy.bubbling) {\n                delegatedHandlers = this.delegatedHandlers;\n                handlerEntry = delegatedHandlers[targetEvent] || (delegatedHandlers[targetEvent] = new ListenerTracker(targetEvent, handleDelegatedEvent, false));\n                handlerEntry.increment();\n                const delegatedCallbacks = target.delegatedCallbacks || (target.delegatedCallbacks = {});\n                return new DelegateOrCaptureSubscription(handlerEntry, delegatedCallbacks, targetEvent, callbackOrListener);\n            }\n            if (strategy === exports.DelegationStrategy.capturing) {\n                capturedHandlers = this.capturedHandlers;\n                handlerEntry = capturedHandlers[targetEvent] || (capturedHandlers[targetEvent] = new ListenerTracker(targetEvent, handleCapturedEvent, true));\n                handlerEntry.increment();\n                const capturedCallbacks = target.capturedCallbacks || (target.capturedCallbacks = {});\n                return new DelegateOrCaptureSubscription(handlerEntry, capturedCallbacks, targetEvent, callbackOrListener);\n            }\n            return new TriggerSubscription(target, targetEvent, callbackOrListener);\n        }\n    }\n\n    /*@internal*/\n    function handleSelfEvent(event) {\n        const target = findOriginalEventTarget(event);\n        if (this.target !== target) {\n            return;\n        }\n        return this.selfEventCallSource(event);\n    }\n    exports.SelfBindingBehavior = class SelfBindingBehavior {\n        bind(flags, scope, binding) {\n            if (!binding.callSource || !binding.targetEvent) {\n                throw kernel.Reporter.error(8);\n            }\n            binding.selfEventCallSource = binding.callSource;\n            binding.callSource = handleSelfEvent;\n        }\n        unbind(flags, scope, binding) {\n            binding.callSource = binding.selfEventCallSource;\n            binding.selfEventCallSource = null;\n        }\n    };\n    exports.SelfBindingBehavior = __decorate([\n        bindingBehavior('self')\n    ], exports.SelfBindingBehavior);\n\n    exports.SignalBindingBehavior = class SignalBindingBehavior {\n        constructor(signaler) {\n            this.signaler = signaler;\n        }\n        bind(flags, scope, binding) {\n            if (!binding.updateTarget) {\n                throw kernel.Reporter.error(11);\n            }\n            if (arguments.length === 4) {\n                const name = arguments[3];\n                this.signaler.addSignalListener(name, binding);\n                binding.signal = name;\n            }\n            else if (arguments.length > 4) {\n                const names = Array.prototype.slice.call(arguments, 3);\n                let i = names.length;\n                while (i--) {\n                    const name = names[i];\n                    this.signaler.addSignalListener(name, binding);\n                }\n                binding.signal = names;\n            }\n            else {\n                throw kernel.Reporter.error(12);\n            }\n        }\n        unbind(flags, scope, binding) {\n            const name = binding.signal;\n            binding.signal = null;\n            if (Array.isArray(name)) {\n                const names = name;\n                let i = names.length;\n                while (i--) {\n                    this.signaler.removeSignalListener(names[i], binding);\n                }\n            }\n            else {\n                this.signaler.removeSignalListener(name, binding);\n            }\n        }\n    };\n    exports.SignalBindingBehavior = __decorate([\n        bindingBehavior('signal'),\n        kernel.inject(ISignaler)\n    ], exports.SignalBindingBehavior);\n\n    /*@internal*/\n    function throttle(newValue) {\n        const state = this.throttleState;\n        const elapsed = +new Date() - state.last;\n        if (elapsed >= state.delay) {\n            clearTimeout(state.timeoutId);\n            state.timeoutId = null;\n            state.last = +new Date();\n            this.throttledMethod(newValue);\n            return;\n        }\n        state.newValue = newValue;\n        if (state.timeoutId === null) {\n            state.timeoutId = setTimeout(() => {\n                state.timeoutId = null;\n                state.last = +new Date();\n                this.throttledMethod(state.newValue);\n            }, state.delay - elapsed);\n        }\n    }\n    exports.ThrottleBindingBehavior = class ThrottleBindingBehavior {\n        bind(flags, scope, binding, delay = 200) {\n            let methodToThrottle;\n            if (binding instanceof exports.Binding) {\n                if (binding.mode === exports.BindingMode.twoWay) {\n                    methodToThrottle = 'updateSource';\n                }\n                else {\n                    methodToThrottle = 'updateTarget';\n                }\n            }\n            else {\n                methodToThrottle = 'callSource';\n            }\n            // stash the original method and it's name.\n            // note: a generic name like \"originalMethod\" is not used to avoid collisions\n            // with other binding behavior types.\n            binding.throttledMethod = binding[methodToThrottle];\n            binding.throttledMethod.originalName = methodToThrottle;\n            // replace the original method with the throttling version.\n            binding[methodToThrottle] = throttle;\n            // create the throttle state.\n            binding.throttleState = {\n                delay: delay,\n                last: 0,\n                timeoutId: null\n            };\n        }\n        unbind(flags, scope, binding) {\n            // restore the state of the binding.\n            const methodToRestore = binding.throttledMethod.originalName;\n            binding[methodToRestore] = binding.throttledMethod;\n            binding.throttledMethod = null;\n            clearTimeout(binding.throttleState.timeoutId);\n            binding.throttleState = null;\n        }\n    };\n    exports.ThrottleBindingBehavior = __decorate([\n        bindingBehavior('throttle')\n    ], exports.ThrottleBindingBehavior);\n\n    function flush$1() {\n        this.callBatchedSubscribers(this.indexMap);\n        this.resetIndexMap();\n    }\n    function dispose$2() {\n        this.collection.$observer = undefined;\n        this.collection = null;\n        this.indexMap = null;\n    }\n    function resetIndexMapIndexed() {\n        const len = this.collection.length;\n        const indexMap = (this.indexMap = Array(len));\n        let i = 0;\n        while (i < len) {\n            indexMap[i] = i++;\n        }\n        indexMap.deletedItems = [];\n    }\n    function resetIndexMapKeyed() {\n        const len = this.collection.size;\n        const indexMap = (this.indexMap = Array(len));\n        let i = 0;\n        while (i < len) {\n            indexMap[i] = i++;\n        }\n        indexMap.deletedItems = [];\n    }\n    function getLengthObserver() {\n        return this.lengthObserver || (this.lengthObserver = new exports.CollectionLengthObserver(this, this.lengthPropertyName));\n    }\n    function collectionObserver(kind) {\n        return function (target) {\n            subscriberCollection(exports.MutationKind.collection)(target);\n            batchedSubscriberCollection()(target);\n            const proto = target.prototype;\n            proto.$nextFlush = null;\n            proto.collection = null;\n            proto.indexMap = null;\n            proto.hasChanges = false;\n            proto.lengthPropertyName = kind & 8 /* indexed */ ? 'length' : 'size';\n            proto.collectionKind = kind;\n            proto.resetIndexMap = kind & 8 /* indexed */ ? resetIndexMapIndexed : resetIndexMapKeyed;\n            proto.flush = flush$1;\n            proto.dispose = dispose$2;\n            proto.getLengthObserver = getLengthObserver;\n            proto.subscribe = proto.subscribe || proto.addSubscriber;\n            proto.unsubscribe = proto.unsubscribe || proto.removeSubscriber;\n            proto.subscribeBatched = proto.subscribeBatched || proto.addBatchedSubscriber;\n            proto.unsubscribeBatched = proto.unsubscribeBatched || proto.removeBatchedSubscriber;\n        };\n    }\n    exports.CollectionLengthObserver = class CollectionLengthObserver {\n        constructor(obj, propertyKey) {\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n            this.currentValue = obj[propertyKey];\n        }\n        getValue() {\n            return this.obj[this.propertyKey];\n        }\n        setValueCore(newValue) {\n            this.obj[this.propertyKey] = newValue;\n        }\n        subscribe(subscriber) {\n            this.addSubscriber(subscriber);\n        }\n        unsubscribe(subscriber) {\n            this.removeSubscriber(subscriber);\n        }\n    };\n    exports.CollectionLengthObserver = __decorate([\n        targetObserver()\n    ], exports.CollectionLengthObserver);\n\n    const proto = Array.prototype;\n    const nativePush = proto.push; // TODO: probably want to make these internal again\n    const nativeUnshift = proto.unshift;\n    const nativePop = proto.pop;\n    const nativeShift = proto.shift;\n    const nativeSplice = proto.splice;\n    const nativeReverse = proto.reverse;\n    const nativeSort = proto.sort;\n    // https://tc39.github.io/ecma262/#sec-array.prototype.push\n    function observePush() {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativePush.apply(this, arguments);\n        }\n        const len = this.length;\n        const argCount = arguments.length;\n        if (argCount === 0) {\n            return len;\n        }\n        this.length = o.indexMap.length = len + argCount;\n        let i = len;\n        while (i < this.length) {\n            this[i] = arguments[i - len];\n            o.indexMap[i] = -2;\n            i++;\n        }\n        o.callSubscribers('push', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return this.length;\n    }\n    // https://tc39.github.io/ecma262/#sec-array.prototype.unshift\n    function observeUnshift() {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeUnshift.apply(this, arguments);\n        }\n        const argCount = arguments.length;\n        const inserts = new Array(argCount);\n        let i = 0;\n        while (i < argCount) {\n            inserts[i++] = -2;\n        }\n        nativeUnshift.apply(o.indexMap, inserts);\n        const len = nativeUnshift.apply(this, arguments);\n        o.callSubscribers('unshift', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return len;\n    }\n    // https://tc39.github.io/ecma262/#sec-array.prototype.pop\n    function observePop() {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativePop.call(this);\n        }\n        const indexMap = o.indexMap;\n        const element = nativePop.call(this);\n        // only mark indices as deleted if they actually existed in the original array\n        const index = indexMap.length - 1;\n        if (indexMap[index] > -1) {\n            nativePush.call(indexMap.deletedItems, element);\n        }\n        nativePop.call(indexMap);\n        o.callSubscribers('pop', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return element;\n    }\n    // https://tc39.github.io/ecma262/#sec-array.prototype.shift\n    function observeShift() {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeShift.call(this);\n        }\n        const indexMap = o.indexMap;\n        const element = nativeShift.call(this);\n        // only mark indices as deleted if they actually existed in the original array\n        if (indexMap[0] > -1) {\n            nativePush.call(indexMap.deletedItems, element);\n        }\n        nativeShift.call(indexMap);\n        o.callSubscribers('shift', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return element;\n    }\n    // https://tc39.github.io/ecma262/#sec-array.prototype.splice\n    function observeSplice(start, deleteCount) {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeSplice.apply(this, arguments);\n        }\n        const indexMap = o.indexMap;\n        if (deleteCount > 0) {\n            let i = isNaN(start) ? 0 : start;\n            const to = i + deleteCount;\n            while (i < to) {\n                if (indexMap[i] > -1) {\n                    nativePush.call(indexMap.deletedItems, this[i]);\n                }\n                i++;\n            }\n        }\n        const argCount = arguments.length;\n        if (argCount > 2) {\n            const itemCount = argCount - 2;\n            const inserts = new Array(itemCount);\n            let i = 0;\n            while (i < itemCount) {\n                inserts[i++] = -2;\n            }\n            nativeSplice.call(indexMap, start, deleteCount, ...inserts);\n        }\n        else if (argCount === 2) {\n            nativeSplice.call(indexMap, start, deleteCount);\n        }\n        const deleted = nativeSplice.apply(this, arguments);\n        o.callSubscribers('splice', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return deleted;\n    }\n    // https://tc39.github.io/ecma262/#sec-array.prototype.reverse\n    function observeReverse() {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeReverse.call(this);\n        }\n        const len = this.length;\n        const middle = (len / 2) | 0;\n        let lower = 0;\n        while (lower !== middle) {\n            const upper = len - lower - 1;\n            const lowerValue = this[lower];\n            const lowerIndex = o.indexMap[lower];\n            const upperValue = this[upper];\n            const upperIndex = o.indexMap[upper];\n            this[lower] = upperValue;\n            o.indexMap[lower] = upperIndex;\n            this[upper] = lowerValue;\n            o.indexMap[upper] = lowerIndex;\n            lower++;\n        }\n        o.callSubscribers('reverse', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return this;\n    }\n    // https://tc39.github.io/ecma262/#sec-array.prototype.sort\n    // https://github.com/v8/v8/blob/master/src/js/array.js\n    function observeSort(compareFn) {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeSort.call(this, compareFn);\n        }\n        const len = this.length;\n        if (len < 2) {\n            return this;\n        }\n        quickSort(this, o.indexMap, 0, len, preSortCompare);\n        let i = 0;\n        while (i < len) {\n            if (this[i] === undefined) {\n                break;\n            }\n            i++;\n        }\n        if (compareFn === undefined || typeof compareFn !== 'function' /*spec says throw a TypeError, should we do that too?*/) {\n            compareFn = sortCompare;\n        }\n        quickSort(this, o.indexMap, 0, i, compareFn);\n        o.callSubscribers('sort', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return this;\n    }\n    // https://tc39.github.io/ecma262/#sec-sortcompare\n    function sortCompare(x, y) {\n        if (x === y) {\n            return 0;\n        }\n        x = x === null ? 'null' : x.toString();\n        y = y === null ? 'null' : y.toString();\n        return x < y ? -1 : 1;\n    }\n    function preSortCompare(x, y) {\n        if (x === undefined) {\n            if (y === undefined) {\n                return 0;\n            }\n            else {\n                return 1;\n            }\n        }\n        if (y === undefined) {\n            return -1;\n        }\n        return 0;\n    }\n    function insertionSort(arr, indexMap, fromIndex, toIndex, compareFn) {\n        let velement, ielement, vtmp, itmp, order;\n        let i, j;\n        for (i = fromIndex + 1; i < toIndex; i++) {\n            velement = arr[i];\n            ielement = indexMap[i];\n            for (j = i - 1; j >= fromIndex; j--) {\n                vtmp = arr[j];\n                itmp = indexMap[j];\n                order = compareFn(vtmp, velement);\n                if (order > 0) {\n                    arr[j + 1] = vtmp;\n                    indexMap[j + 1] = itmp;\n                }\n                else {\n                    break;\n                }\n            }\n            arr[j + 1] = velement;\n            indexMap[j + 1] = ielement;\n        }\n    }\n    function quickSort(arr, indexMap, fromIndex, toIndex, compareFn) {\n        let thirdIndex = 0, i = 0;\n        let v0, v1, v2;\n        let i0, i1, i2;\n        let c01, c02, c12;\n        let vtmp, itmp;\n        let vpivot, ipivot, lowEnd, highStart;\n        let velement, ielement, order, vtopElement;\n        // tslint:disable-next-line:no-constant-condition\n        while (true) {\n            if (toIndex - fromIndex <= 10) {\n                insertionSort(arr, indexMap, fromIndex, toIndex, compareFn);\n                return;\n            }\n            thirdIndex = fromIndex + ((toIndex - fromIndex) >> 1);\n            v0 = arr[fromIndex];\n            i0 = indexMap[fromIndex];\n            v1 = arr[toIndex - 1];\n            i1 = indexMap[toIndex - 1];\n            v2 = arr[thirdIndex];\n            i2 = indexMap[thirdIndex];\n            c01 = compareFn(v0, v1);\n            if (c01 > 0) {\n                vtmp = v0;\n                itmp = i0;\n                v0 = v1;\n                i0 = i1;\n                v1 = vtmp;\n                i1 = itmp;\n            }\n            c02 = compareFn(v0, v2);\n            if (c02 >= 0) {\n                vtmp = v0;\n                itmp = i0;\n                v0 = v2;\n                i0 = i2;\n                v2 = v1;\n                i2 = i1;\n                v1 = vtmp;\n                i1 = itmp;\n            }\n            else {\n                c12 = compareFn(v1, v2);\n                if (c12 > 0) {\n                    vtmp = v1;\n                    itmp = i1;\n                    v1 = v2;\n                    i1 = i2;\n                    v2 = vtmp;\n                    i2 = itmp;\n                }\n            }\n            arr[fromIndex] = v0;\n            indexMap[fromIndex] = i0;\n            arr[toIndex - 1] = v2;\n            indexMap[toIndex - 1] = i2;\n            vpivot = v1;\n            ipivot = i1;\n            lowEnd = fromIndex + 1;\n            highStart = toIndex - 1;\n            arr[thirdIndex] = arr[lowEnd];\n            indexMap[thirdIndex] = indexMap[lowEnd];\n            arr[lowEnd] = vpivot;\n            indexMap[lowEnd] = ipivot;\n            partition: for (i = lowEnd + 1; i < highStart; i++) {\n                velement = arr[i];\n                ielement = indexMap[i];\n                order = compareFn(velement, vpivot);\n                if (order < 0) {\n                    arr[i] = arr[lowEnd];\n                    indexMap[i] = indexMap[lowEnd];\n                    arr[lowEnd] = velement;\n                    indexMap[lowEnd] = ielement;\n                    lowEnd++;\n                }\n                else if (order > 0) {\n                    do {\n                        highStart--;\n                        // tslint:disable-next-line:triple-equals\n                        if (highStart == i) {\n                            break partition;\n                        }\n                        vtopElement = arr[highStart];\n                        order = compareFn(vtopElement, vpivot);\n                    } while (order > 0);\n                    arr[i] = arr[highStart];\n                    indexMap[i] = indexMap[highStart];\n                    arr[highStart] = velement;\n                    indexMap[highStart] = ielement;\n                    if (order < 0) {\n                        velement = arr[i];\n                        ielement = indexMap[i];\n                        arr[i] = arr[lowEnd];\n                        indexMap[i] = indexMap[lowEnd];\n                        arr[lowEnd] = velement;\n                        indexMap[lowEnd] = ielement;\n                        lowEnd++;\n                    }\n                }\n            }\n            if (toIndex - highStart < lowEnd - fromIndex) {\n                quickSort(arr, indexMap, highStart, toIndex, compareFn);\n                toIndex = lowEnd;\n            }\n            else {\n                quickSort(arr, indexMap, fromIndex, lowEnd, compareFn);\n                fromIndex = highStart;\n            }\n        }\n    }\n    for (const observe of [observePush, observeUnshift, observePop, observeShift, observeSplice, observeReverse, observeSort]) {\n        Object.defineProperty(observe, 'observing', { value: true, writable: false, configurable: false, enumerable: false });\n    }\n    function enableArrayObservation() {\n        if (proto.push['observing'] !== true)\n            proto.push = observePush;\n        if (proto.unshift['observing'] !== true)\n            proto.unshift = observeUnshift;\n        if (proto.pop['observing'] !== true)\n            proto.pop = observePop;\n        if (proto.shift['observing'] !== true)\n            proto.shift = observeShift;\n        if (proto.splice['observing'] !== true)\n            proto.splice = observeSplice;\n        if (proto.reverse['observing'] !== true)\n            proto.reverse = observeReverse;\n        if (proto.sort['observing'] !== true)\n            proto.sort = observeSort;\n    }\n    enableArrayObservation();\n    function disableArrayObservation() {\n        if (proto.push['observing'] === true)\n            proto.push = nativePush;\n        if (proto.unshift['observing'] === true)\n            proto.unshift = nativeUnshift;\n        if (proto.pop['observing'] === true)\n            proto.pop = nativePop;\n        if (proto.shift['observing'] === true)\n            proto.shift = nativeShift;\n        if (proto.splice['observing'] === true)\n            proto.splice = nativeSplice;\n        if (proto.reverse['observing'] === true)\n            proto.reverse = nativeReverse;\n        if (proto.sort['observing'] === true)\n            proto.sort = nativeSort;\n    }\n    exports.ArrayObserver = class ArrayObserver {\n        constructor(lifecycle, array) {\n            this.lifecycle = lifecycle;\n            array.$observer = this;\n            this.collection = array;\n            this.resetIndexMap();\n        }\n    };\n    exports.ArrayObserver = __decorate([\n        collectionObserver(9 /* array */)\n    ], exports.ArrayObserver);\n    function getArrayObserver(lifecycle, array) {\n        return array.$observer || new exports.ArrayObserver(lifecycle, array);\n    }\n\n    function computed(config) {\n        return function (target, key) {\n            (target.computed || (target.computed = {}))[key] = config;\n        };\n    }\n    const noProxy = !(typeof Proxy !== undefined);\n    const computedOverrideDefaults = { static: false, volatile: false };\n    /* @internal */\n    function createComputedObserver(observerLocator, dirtyChecker, lifecycle, \n    // tslint:disable-next-line:no-reserved-keywords\n    instance, propertyName, descriptor) {\n        if (descriptor.configurable === false) {\n            return dirtyChecker.createProperty(instance, propertyName);\n        }\n        if (descriptor.get) {\n            const overrides = instance.constructor.computed\n                ? instance.constructor.computed[propertyName] || computedOverrideDefaults\n                : computedOverrideDefaults;\n            if (descriptor.set) {\n                if (overrides.volatile) {\n                    return noProxy\n                        ? dirtyChecker.createProperty(instance, propertyName)\n                        : new exports.GetterObserver(overrides, instance, propertyName, descriptor, observerLocator, lifecycle);\n                }\n                return new exports.CustomSetterObserver(instance, propertyName, descriptor, lifecycle);\n            }\n            return noProxy\n                ? dirtyChecker.createProperty(instance, propertyName)\n                : new exports.GetterObserver(overrides, instance, propertyName, descriptor, observerLocator, lifecycle);\n        }\n        throw kernel.Reporter.error(18, propertyName);\n    }\n    // Used when the getter is dependent solely on changes that happen within the setter.\n    exports.CustomSetterObserver = class CustomSetterObserver {\n        constructor(obj, propertyKey, descriptor, lifecycle) {\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n            this.descriptor = descriptor;\n            this.lifecycle = lifecycle;\n            this.$nextFlush = null;\n            this.observing = false;\n        }\n        getValue() {\n            return this.obj[this.propertyKey];\n        }\n        setValue(newValue) {\n            this.obj[this.propertyKey] = newValue;\n        }\n        flush(flags) {\n            const oldValue = this.oldValue;\n            const newValue = this.currentValue;\n            this.callSubscribers(newValue, oldValue, flags | exports.LifecycleFlags.updateTargetInstance);\n        }\n        subscribe(subscriber) {\n            if (!this.observing) {\n                this.convertProperty();\n            }\n            this.addSubscriber(subscriber);\n        }\n        unsubscribe(subscriber) {\n            this.removeSubscriber(subscriber);\n        }\n        convertProperty() {\n            const setter = this.descriptor.set;\n            const that = this;\n            this.observing = true;\n            this.currentValue = this.obj[this.propertyKey];\n            Reflect.defineProperty(this.obj, this.propertyKey, {\n                set: function (newValue) {\n                    setter.call(that.obj, newValue);\n                    const oldValue = this.currentValue;\n                    if (oldValue !== newValue) {\n                        that.oldValue = oldValue;\n                        this.lifecycle.queueFlush(that);\n                        that.currentValue = newValue;\n                    }\n                }\n            });\n        }\n    };\n    exports.CustomSetterObserver = __decorate([\n        subscriberCollection(exports.MutationKind.instance)\n    ], exports.CustomSetterObserver);\n    exports.CustomSetterObserver.prototype.dispose = kernel.PLATFORM.noop;\n    // Used when there is no setter, and the getter is dependent on other properties of the object;\n    // Used when there is a setter but the value of the getter can change based on properties set outside of the setter.\n    /*@internal*/\n    exports.GetterObserver = class GetterObserver {\n        constructor(overrides, obj, propertyKey, descriptor, observerLocator, lifecycle) {\n            this.overrides = overrides;\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n            this.descriptor = descriptor;\n            this.observerLocator = observerLocator;\n            this.lifecycle = lifecycle;\n            this.controller = new GetterController(overrides, obj, propertyKey, descriptor, this, observerLocator, lifecycle);\n        }\n        getValue() {\n            return this.controller.value;\n        }\n        // tslint:disable-next-line:no-empty\n        setValue(newValue) { }\n        flush(flags) {\n            const oldValue = this.controller.value;\n            const newValue = this.controller.getValueAndCollectDependencies();\n            if (oldValue !== newValue) {\n                this.callSubscribers(newValue, oldValue, flags | exports.LifecycleFlags.updateTargetInstance);\n            }\n        }\n        subscribe(subscriber) {\n            this.addSubscriber(subscriber);\n            this.controller.onSubscriberAdded();\n        }\n        unsubscribe(subscriber) {\n            this.removeSubscriber(subscriber);\n            this.controller.onSubscriberRemoved();\n        }\n    };\n    exports.GetterObserver = __decorate([\n        subscriberCollection(exports.MutationKind.instance)\n    ], exports.GetterObserver);\n    exports.GetterObserver.prototype.dispose = kernel.PLATFORM.noop;\n    /*@internal*/\n    class GetterController {\n        constructor(overrides, instance, propertyName, descriptor, owner, observerLocator, lifecycle) {\n            this.overrides = overrides;\n            this.instance = instance;\n            this.propertyName = propertyName;\n            this.owner = owner;\n            this.lifecycle = lifecycle;\n            this.isCollecting = false;\n            this.dependencies = [];\n            this.subscriberCount = 0;\n            const proxy = new Proxy(instance, createGetterTraps(observerLocator, this));\n            const getter = descriptor.get;\n            const ctrl = this;\n            Reflect.defineProperty(instance, propertyName, {\n                get: function () {\n                    if (ctrl.subscriberCount < 1 || ctrl.isCollecting) {\n                        ctrl.value = getter.apply(proxy);\n                    }\n                    return ctrl.value;\n                }\n            });\n        }\n        addDependency(subscribable) {\n            if (this.dependencies.includes(subscribable)) {\n                return;\n            }\n            this.dependencies.push(subscribable);\n        }\n        onSubscriberAdded() {\n            this.subscriberCount++;\n            if (this.subscriberCount > 1) {\n                return;\n            }\n            this.getValueAndCollectDependencies(true);\n        }\n        getValueAndCollectDependencies(requireCollect = false) {\n            const dynamicDependencies = !this.overrides.static || requireCollect;\n            if (dynamicDependencies) {\n                this.unsubscribeAllDependencies();\n                this.isCollecting = true;\n            }\n            this.value = this.instance[this.propertyName]; // triggers observer collection\n            if (dynamicDependencies) {\n                this.isCollecting = false;\n                this.dependencies.forEach(x => { x.subscribe(this); });\n            }\n            return this.value;\n        }\n        onSubscriberRemoved() {\n            this.subscriberCount--;\n            if (this.subscriberCount === 0) {\n                this.unsubscribeAllDependencies();\n            }\n        }\n        handleChange() {\n            this.lifecycle.enqueueFlush(this.owner);\n        }\n        unsubscribeAllDependencies() {\n            this.dependencies.forEach(x => { x.unsubscribe(this); });\n            this.dependencies.length = 0;\n        }\n    }\n    function createGetterTraps(observerLocator, controller) {\n        return {\n            get: function (instance, key) {\n                const value = instance[key];\n                if (key === '$observers' || typeof value === 'function' || !controller.isCollecting) {\n                    return value;\n                }\n                // TODO: fix this\n                if (instance instanceof Array) {\n                    controller.addDependency(observerLocator.getArrayObserver(instance));\n                    if (key === 'length') {\n                        controller.addDependency(observerLocator.getArrayObserver(instance).getLengthObserver());\n                    }\n                }\n                else if (instance instanceof Map) {\n                    controller.addDependency(observerLocator.getMapObserver(instance));\n                    if (key === 'size') {\n                        controller.addDependency(observerLocator.getMapObserver(instance).getLengthObserver());\n                    }\n                }\n                else if (instance instanceof Set) {\n                    controller.addDependency(observerLocator.getSetObserver(instance));\n                    if (key === 'size') {\n                        return observerLocator.getSetObserver(instance).getLengthObserver();\n                    }\n                }\n                else {\n                    controller.addDependency(observerLocator.getObserver(instance, key));\n                }\n                return proxyOrValue(observerLocator, controller, value);\n            }\n        };\n    }\n    function proxyOrValue(observerLocator, controller, value) {\n        if (!(value instanceof Object)) {\n            return value;\n        }\n        return new Proxy(value, createGetterTraps(observerLocator, controller));\n    }\n\n    const IDirtyChecker = kernel.DI.createInterface()\n        .withDefault(x => x.singleton(DirtyChecker));\n    /*@internal*/\n    class DirtyChecker {\n        constructor() {\n            this.tracked = [];\n            this.checkDelay = 120;\n        }\n        createProperty(obj, propertyName) {\n            return new exports.DirtyCheckProperty(this, obj, propertyName);\n        }\n        addProperty(property) {\n            const tracked = this.tracked;\n            tracked.push(property);\n            if (tracked.length === 1) {\n                this.scheduleDirtyCheck();\n            }\n        }\n        removeProperty(property) {\n            const tracked = this.tracked;\n            tracked.splice(tracked.indexOf(property), 1);\n        }\n        scheduleDirtyCheck() {\n            setTimeout(() => { this.check(); }, this.checkDelay);\n        }\n        check() {\n            const tracked = this.tracked;\n            let i = tracked.length;\n            while (i--) {\n                const current = tracked[i];\n                if (current.isDirty()) {\n                    current.flush(exports.LifecycleFlags.fromFlush);\n                }\n            }\n            if (tracked.length) {\n                this.scheduleDirtyCheck();\n            }\n        }\n    }\n    /*@internal*/\n    exports.DirtyCheckProperty = class DirtyCheckProperty {\n        constructor(dirtyChecker, obj, propertyKey) {\n            this.dirtyChecker = dirtyChecker;\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n        }\n        isDirty() {\n            return this.oldValue !== this.obj[this.propertyKey];\n        }\n        getValue() {\n            return this.obj[this.propertyKey];\n        }\n        setValue(newValue) {\n            this.obj[this.propertyKey] = newValue;\n        }\n        flush(flags) {\n            const oldValue = this.oldValue;\n            const newValue = this.getValue();\n            this.callSubscribers(newValue, oldValue, flags | exports.LifecycleFlags.updateTargetInstance);\n            this.oldValue = newValue;\n        }\n        subscribe(subscriber) {\n            if (!this.hasSubscribers()) {\n                this.oldValue = this.getValue();\n                this.dirtyChecker.addProperty(this);\n            }\n            this.addSubscriber(subscriber);\n        }\n        unsubscribe(subscriber) {\n            if (this.removeSubscriber(subscriber) && !this.hasSubscribers()) {\n                this.dirtyChecker.removeProperty(this);\n            }\n        }\n    };\n    exports.DirtyCheckProperty = __decorate([\n        propertyObserver()\n    ], exports.DirtyCheckProperty);\n\n    const inputValueDefaults = {\n        ['button']: '',\n        ['checkbox']: 'on',\n        ['color']: '#000000',\n        ['date']: '',\n        ['datetime-local']: '',\n        ['email']: '',\n        ['file']: '',\n        ['hidden']: '',\n        ['image']: '',\n        ['month']: '',\n        ['number']: '',\n        ['password']: '',\n        ['radio']: 'on',\n        ['range']: '50',\n        ['reset']: '',\n        ['search']: '',\n        ['submit']: '',\n        ['tel']: '',\n        ['text']: '',\n        ['time']: '',\n        ['url']: '',\n        ['week']: ''\n    };\n    const handleEventFlags = exports.LifecycleFlags.fromDOMEvent | exports.LifecycleFlags.updateSourceExpression;\n    exports.ValueAttributeObserver = class ValueAttributeObserver {\n        constructor(lifecycle, obj, propertyKey, handler) {\n            // note: input.files can be assigned and this was fixed in Firefox 57:\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1384030\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n            this.propertyKey = propertyKey;\n            this.handler = handler;\n            // input.value (for type='file') however, can only be assigned an empty string\n            if (propertyKey === 'value') {\n                const nodeType = obj['type'];\n                this.defaultValue = inputValueDefaults[nodeType || 'text'];\n                if (nodeType === 'file') {\n                    this.flush = this.flushFileChanges;\n                }\n            }\n            else {\n                this.defaultValue = '';\n            }\n            this.oldValue = this.currentValue = obj[propertyKey];\n        }\n        getValue() {\n            return this.obj[this.propertyKey];\n        }\n        setValueCore(newValue, flags) {\n            this.obj[this.propertyKey] = newValue;\n            if (flags & exports.LifecycleFlags.fromBind) {\n                return;\n            }\n            this.callSubscribers(this.currentValue, this.oldValue, flags);\n        }\n        handleEvent() {\n            const oldValue = this.oldValue = this.currentValue;\n            const newValue = this.currentValue = this.getValue();\n            if (oldValue !== newValue) {\n                this.callSubscribers(newValue, oldValue, handleEventFlags);\n                this.oldValue = newValue;\n            }\n        }\n        subscribe(subscriber) {\n            if (!this.hasSubscribers()) {\n                this.oldValue = this.getValue();\n                this.handler.subscribe(this.obj, this);\n            }\n            this.addSubscriber(subscriber);\n        }\n        unsubscribe(subscriber) {\n            if (this.removeSubscriber(subscriber) && !this.hasSubscribers()) {\n                this.handler.dispose();\n            }\n        }\n        flushFileChanges() {\n            const currentValue = this.currentValue;\n            if (this.oldValue !== currentValue) {\n                if (currentValue === '') {\n                    this.setValueCore(currentValue, this.currentFlags);\n                    this.oldValue = this.currentValue;\n                }\n            }\n        }\n    };\n    exports.ValueAttributeObserver = __decorate([\n        targetObserver('')\n    ], exports.ValueAttributeObserver);\n    exports.ValueAttributeObserver.prototype.propertyKey = '';\n    exports.ValueAttributeObserver.prototype.handler = null;\n    const defaultHandleBatchedChangeFlags = exports.LifecycleFlags.fromFlush | exports.LifecycleFlags.updateTargetInstance;\n    exports.CheckedObserver = class CheckedObserver {\n        constructor(lifecycle, obj, handler, observerLocator) {\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n            this.handler = handler;\n            this.observerLocator = observerLocator;\n        }\n        getValue() {\n            return this.currentValue;\n        }\n        setValueCore(newValue, flags) {\n            if (!this.valueObserver) {\n                this.valueObserver = this.obj['$observers'] && (this.obj['$observers'].model || this.obj['$observers'].value);\n                if (this.valueObserver) {\n                    this.valueObserver.subscribe(this);\n                }\n            }\n            if (this.arrayObserver) {\n                this.arrayObserver.unsubscribeBatched(this);\n                this.arrayObserver = null;\n            }\n            if (this.obj.type === 'checkbox' && Array.isArray(newValue)) {\n                this.arrayObserver = this.observerLocator.getArrayObserver(newValue);\n                this.arrayObserver.subscribeBatched(this);\n            }\n            this.synchronizeElement();\n        }\n        // handleBatchedCollectionChange (todo: rename to make this explicit?)\n        handleBatchedChange() {\n            this.synchronizeElement();\n            this.notify(defaultHandleBatchedChangeFlags);\n        }\n        // handlePropertyChange (todo: rename normal subscribe methods in target observers to batched, since that's what they really are)\n        handleChange(newValue, previousValue, flags) {\n            this.synchronizeElement();\n            this.notify(flags);\n        }\n        synchronizeElement() {\n            const value = this.currentValue;\n            const element = this.obj;\n            const elementValue = element.hasOwnProperty('model') ? element['model'] : element.value;\n            const isRadio = element.type === 'radio';\n            const matcher = element['matcher'] || ((a, b) => a === b);\n            if (isRadio) {\n                element.checked = !!matcher(value, elementValue);\n            }\n            else if (value === true) {\n                element.checked = true;\n            }\n            else if (Array.isArray(value)) {\n                element.checked = value.findIndex(item => !!matcher(item, elementValue)) !== -1;\n            }\n            else {\n                element.checked = false;\n            }\n        }\n        notify(flags) {\n            if (flags & exports.LifecycleFlags.fromBind) {\n                return;\n            }\n            const oldValue = this.oldValue;\n            const newValue = this.currentValue;\n            if (newValue === oldValue) {\n                return;\n            }\n            this.callSubscribers(this.currentValue, this.oldValue, flags);\n        }\n        handleEvent() {\n            let value = this.currentValue;\n            const element = this.obj;\n            const elementValue = element.hasOwnProperty('model') ? element['model'] : element.value;\n            let index;\n            const matcher = element['matcher'] || defaultMatcher;\n            if (element.type === 'checkbox') {\n                if (Array.isArray(value)) {\n                    index = value.findIndex(item => !!matcher(item, elementValue));\n                    if (element.checked && index === -1) {\n                        value.push(elementValue);\n                    }\n                    else if (!element.checked && index !== -1) {\n                        value.splice(index, 1);\n                    }\n                    // when existing value is array, do not invoke callback as only the array element has changed\n                    return;\n                }\n                value = element.checked;\n            }\n            else if (element.checked) {\n                value = elementValue;\n            }\n            else {\n                return;\n            }\n            this.oldValue = this.currentValue;\n            this.currentValue = value;\n            this.notify(handleEventFlags);\n        }\n        subscribe(subscriber) {\n            if (!this.hasSubscribers()) {\n                this.handler.subscribe(this.obj, this);\n            }\n            this.addSubscriber(subscriber);\n        }\n        unsubscribe(subscriber) {\n            if (this.removeSubscriber(subscriber) && !this.hasSubscribers()) {\n                this.handler.dispose();\n            }\n        }\n        unbind() {\n            if (this.arrayObserver) {\n                this.arrayObserver.unsubscribeBatched(this);\n                this.arrayObserver = null;\n            }\n            if (this.valueObserver) {\n                this.valueObserver.unsubscribe(this);\n            }\n        }\n    };\n    exports.CheckedObserver = __decorate([\n        targetObserver()\n    ], exports.CheckedObserver);\n    exports.CheckedObserver.prototype.handler = null;\n    exports.CheckedObserver.prototype.observerLocator = null;\n    const childObserverOptions = {\n        childList: true,\n        subtree: true,\n        characterData: true\n    };\n    function defaultMatcher(a, b) {\n        return a === b;\n    }\n    exports.SelectValueObserver = class SelectValueObserver {\n        constructor(lifecycle, obj, handler, observerLocator) {\n            this.lifecycle = lifecycle;\n            this.obj = obj;\n            this.handler = handler;\n            this.observerLocator = observerLocator;\n        }\n        getValue() {\n            return this.currentValue;\n        }\n        setValueCore(newValue, flags) {\n            const isArray = Array.isArray(newValue);\n            if (!isArray && newValue !== null && newValue !== undefined && this.obj.multiple) {\n                throw new Error('Only null or Array instances can be bound to a multi-select.');\n            }\n            if (this.arrayObserver) {\n                this.arrayObserver.unsubscribeBatched(this);\n                this.arrayObserver = null;\n            }\n            if (isArray) {\n                this.arrayObserver = this.observerLocator.getArrayObserver(newValue);\n                this.arrayObserver.subscribeBatched(this);\n            }\n            this.synchronizeOptions();\n            this.notify(flags);\n        }\n        // called when the array mutated (items sorted/added/removed, etc)\n        handleBatchedChange(indexMap) {\n            // we don't need to go through the normal setValue logic and can directly call synchronizeOptions here,\n            // because the change already waited one tick (batched) and there's no point in calling notify when the instance didn't change\n            this.synchronizeOptions(indexMap);\n        }\n        // called when a different value was assigned\n        handleChange(newValue, previousValue, flags) {\n            this.setValue(newValue, flags);\n        }\n        notify(flags) {\n            if (flags & exports.LifecycleFlags.fromBind) {\n                return;\n            }\n            const oldValue = this.oldValue;\n            const newValue = this.currentValue;\n            if (newValue === oldValue) {\n                return;\n            }\n            this.callSubscribers(newValue, oldValue, flags);\n        }\n        handleEvent() {\n            // \"from-view\" changes are always synchronous now, so immediately sync the value and notify subscribers\n            const shouldNotify = this.synchronizeValue();\n            if (shouldNotify) {\n                this.notify(handleEventFlags);\n            }\n        }\n        synchronizeOptions(indexMap) {\n            const currentValue = this.currentValue;\n            const isArray = Array.isArray(currentValue);\n            const obj = this.obj;\n            const matcher = obj.matcher || defaultMatcher;\n            const options = obj.options;\n            let i = options.length;\n            while (i--) {\n                const option = options[i];\n                const optionValue = option.hasOwnProperty('model') ? option.model : option.value;\n                if (isArray) {\n                    option.selected = currentValue.findIndex(item => !!matcher(optionValue, item)) !== -1;\n                    continue;\n                }\n                option.selected = !!matcher(optionValue, currentValue);\n            }\n        }\n        synchronizeValue() {\n            // Spec for synchronizing value from `SelectObserver` to `<select/>`\n            // When synchronizing value to observed <select/> element, do the following steps:\n            // A. If `<select/>` is multiple\n            //    1. Check if current value, called `currentValue` is an array\n            //      a. If not an array, return true to signal value has changed\n            //      b. If is an array:\n            //        i. gather all current selected <option/>, in to array called `values`\n            //        ii. loop through the `currentValue` array and remove items that are nolonger selected based on matcher\n            //        iii. loop through the `values` array and add items that are selected based on matcher\n            //        iv. Return false to signal value hasn't changed\n            // B. If the select is single\n            //    1. Let `value` equal the first selected option, if no option selected, then `value` is `null`\n            //    2. assign `this.currentValue` to `this.oldValue`\n            //    3. assign `value` to `this.currentValue`\n            //    4. return `true` to signal value has changed\n            const obj = this.obj;\n            const options = obj.options;\n            const len = options.length;\n            const currentValue = this.currentValue;\n            let i = 0;\n            if (obj.multiple) {\n                // A.\n                if (!Array.isArray(currentValue)) {\n                    // A.1.a\n                    return true;\n                }\n                // A.1.b\n                // multi select\n                let option;\n                const matcher = obj.matcher || defaultMatcher;\n                // A.1.b.i\n                const values = [];\n                while (i < len) {\n                    option = options[i];\n                    if (option.selected) {\n                        values.push(option.hasOwnProperty('model')\n                            ? option.model\n                            : option.value);\n                    }\n                    ++i;\n                }\n                // A.1.b.ii\n                i = 0;\n                while (i < currentValue.length) {\n                    const a = currentValue[i];\n                    // Todo: remove arrow fn\n                    if (values.findIndex(b => !!matcher(a, b)) === -1) {\n                        currentValue.splice(i, 1);\n                    }\n                    else {\n                        ++i;\n                    }\n                }\n                // A.1.b.iii\n                i = 0;\n                while (i < values.length) {\n                    const a = values[i];\n                    // Todo: remove arrow fn\n                    if (currentValue.findIndex(b => !!matcher(a, b)) === -1) {\n                        currentValue.push(a);\n                    }\n                    ++i;\n                }\n                // A.1.b.iv\n                return false;\n            }\n            // B. single select\n            // B.1\n            let value = null;\n            while (i < len) {\n                const option = options[i];\n                if (option.selected) {\n                    value = option.hasOwnProperty('model')\n                        ? option.model\n                        : option.value;\n                    break;\n                }\n                ++i;\n            }\n            // B.2\n            this.oldValue = this.currentValue;\n            // B.3\n            this.currentValue = value;\n            // B.4\n            return true;\n        }\n        subscribe(subscriber) {\n            if (!this.hasSubscribers()) {\n                this.handler.subscribe(this.obj, this);\n            }\n            this.addSubscriber(subscriber);\n        }\n        unsubscribe(subscriber) {\n            if (this.removeSubscriber(subscriber) && !this.hasSubscribers()) {\n                this.handler.dispose();\n            }\n        }\n        bind() {\n            this.nodeObserver = DOM.createNodeObserver(this.obj, this.handleNodeChange.bind(this), childObserverOptions);\n        }\n        unbind() {\n            this.nodeObserver.disconnect();\n            this.nodeObserver = null;\n            if (this.arrayObserver) {\n                this.arrayObserver.unsubscribeBatched(this);\n                this.arrayObserver = null;\n            }\n        }\n        handleNodeChange() {\n            this.synchronizeOptions();\n            const shouldNotify = this.synchronizeValue();\n            if (shouldNotify) {\n                this.notify(handleEventFlags);\n            }\n        }\n    };\n    exports.SelectValueObserver = __decorate([\n        targetObserver()\n    ], exports.SelectValueObserver);\n    exports.SelectValueObserver.prototype.handler = null;\n    exports.SelectValueObserver.prototype.observerLocator = null;\n\n    const proto$1 = Map.prototype;\n    const nativeSet = proto$1.set; // TODO: probably want to make these internal again\n    const nativeClear = proto$1.clear;\n    const nativeDelete = proto$1.delete;\n    // note: we can't really do much with Map due to the internal data structure not being accessible so we're just using the native calls\n    // fortunately, map/delete/clear are easy to reconstruct for the indexMap\n    // https://tc39.github.io/ecma262/#sec-map.prototype.map\n    function observeSet(key, value) {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeSet.call(this, key, value);\n        }\n        const oldSize = this.size;\n        nativeSet.call(this, key, value);\n        const newSize = this.size;\n        if (newSize === oldSize) {\n            let i = 0;\n            for (const entry of this.entries()) {\n                if (entry[0] === key) {\n                    if (entry[1] !== value) {\n                        o.indexMap[i] = -2;\n                    }\n                    return this;\n                }\n                i++;\n            }\n            return this;\n        }\n        o.indexMap[oldSize] = -2;\n        o.callSubscribers('set', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return this;\n    }\n    // https://tc39.github.io/ecma262/#sec-map.prototype.clear\n    function observeClear() {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeClear.call(this);\n        }\n        const size = this.size;\n        if (size > 0) {\n            const indexMap = o.indexMap;\n            let i = 0;\n            for (const entry of this.keys()) {\n                if (indexMap[i] > -1) {\n                    nativePush.call(indexMap.deletedItems, entry);\n                }\n                i++;\n            }\n            nativeClear.call(this);\n            indexMap.length = 0;\n            o.callSubscribers('clear', arguments, exports.LifecycleFlags.isCollectionMutation);\n        }\n        return undefined;\n    }\n    // https://tc39.github.io/ecma262/#sec-map.prototype.delete\n    function observeDelete(value) {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeDelete.call(this, value);\n        }\n        const size = this.size;\n        if (size === 0) {\n            return false;\n        }\n        let i = 0;\n        const indexMap = o.indexMap;\n        for (const entry of this.keys()) {\n            if (entry === value) {\n                if (indexMap[i] > -1) {\n                    nativePush.call(indexMap.deletedItems, entry);\n                }\n                nativeSplice.call(indexMap, i, 1);\n                return nativeDelete.call(this, value);\n            }\n            i++;\n        }\n        o.callSubscribers('delete', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return false;\n    }\n    for (const observe of [observeSet, observeClear, observeDelete]) {\n        Object.defineProperty(observe, 'observing', { value: true, writable: false, configurable: false, enumerable: false });\n    }\n    function enableMapObservation() {\n        if (proto$1.set['observing'] !== true)\n            proto$1.set = observeSet;\n        if (proto$1.clear['observing'] !== true)\n            proto$1.clear = observeClear;\n        if (proto$1.delete['observing'] !== true)\n            proto$1.delete = observeDelete;\n    }\n    enableMapObservation();\n    function disableMapObservation() {\n        if (proto$1.set['observing'] === true)\n            proto$1.set = nativeSet;\n        if (proto$1.clear['observing'] === true)\n            proto$1.clear = nativeClear;\n        if (proto$1.delete['observing'] === true)\n            proto$1.delete = nativeDelete;\n    }\n    exports.MapObserver = class MapObserver {\n        constructor(lifecycle, map) {\n            this.lifecycle = lifecycle;\n            map.$observer = this;\n            this.collection = map;\n            this.resetIndexMap();\n        }\n    };\n    exports.MapObserver = __decorate([\n        collectionObserver(6 /* map */)\n    ], exports.MapObserver);\n    function getMapObserver(lifecycle, map) {\n        return map.$observer || new exports.MapObserver(lifecycle, map);\n    }\n\n    const proto$2 = Set.prototype;\n    const nativeAdd = proto$2.add; // TODO: probably want to make these internal again\n    const nativeClear$1 = proto$2.clear;\n    const nativeDelete$1 = proto$2.delete;\n    // note: we can't really do much with Set due to the internal data structure not being accessible so we're just using the native calls\n    // fortunately, add/delete/clear are easy to reconstruct for the indexMap\n    // https://tc39.github.io/ecma262/#sec-set.prototype.add\n    function observeAdd(value) {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeAdd.call(this, value);\n        }\n        const oldSize = this.size;\n        nativeAdd.call(this, value);\n        const newSize = this.size;\n        if (newSize === oldSize) {\n            return this;\n        }\n        o.indexMap[oldSize] = -2;\n        o.callSubscribers('add', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return this;\n    }\n    // https://tc39.github.io/ecma262/#sec-set.prototype.clear\n    function observeClear$1() {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeClear$1.call(this);\n        }\n        const size = this.size;\n        if (size > 0) {\n            const indexMap = o.indexMap;\n            let i = 0;\n            for (const entry of this.keys()) {\n                if (indexMap[i] > -1) {\n                    nativePush.call(indexMap.deletedItems, entry);\n                }\n                i++;\n            }\n            nativeClear$1.call(this);\n            indexMap.length = 0;\n            o.callSubscribers('clear', arguments, exports.LifecycleFlags.isCollectionMutation);\n        }\n        return undefined;\n    }\n    // https://tc39.github.io/ecma262/#sec-set.prototype.delete\n    function observeDelete$1(value) {\n        const o = this.$observer;\n        if (o === undefined) {\n            return nativeDelete$1.call(this, value);\n        }\n        const size = this.size;\n        if (size === 0) {\n            return false;\n        }\n        let i = 0;\n        const indexMap = o.indexMap;\n        for (const entry of this.keys()) {\n            if (entry === value) {\n                if (indexMap[i] > -1) {\n                    nativePush.call(indexMap.deletedItems, entry);\n                }\n                nativeSplice.call(indexMap, i, 1);\n                return nativeDelete$1.call(this, value);\n            }\n            i++;\n        }\n        o.callSubscribers('delete', arguments, exports.LifecycleFlags.isCollectionMutation);\n        return false;\n    }\n    for (const observe of [observeAdd, observeClear$1, observeDelete$1]) {\n        Object.defineProperty(observe, 'observing', { value: true, writable: false, configurable: false, enumerable: false });\n    }\n    function enableSetObservation() {\n        if (proto$2.add['observing'] !== true)\n            proto$2.add = observeAdd;\n        if (proto$2.clear['observing'] !== true)\n            proto$2.clear = observeClear$1;\n        if (proto$2.delete['observing'] !== true)\n            proto$2.delete = observeDelete$1;\n    }\n    enableSetObservation();\n    function disableSetObservation() {\n        if (proto$2.add['observing'] === true)\n            proto$2.add = nativeAdd;\n        if (proto$2.clear['observing'] === true)\n            proto$2.clear = nativeClear$1;\n        if (proto$2.delete['observing'] === true)\n            proto$2.delete = nativeDelete$1;\n    }\n    exports.SetObserver = class SetObserver {\n        constructor(lifecycle, observedSet) {\n            this.lifecycle = lifecycle;\n            observedSet.$observer = this;\n            this.collection = observedSet;\n            this.resetIndexMap();\n        }\n    };\n    exports.SetObserver = __decorate([\n        collectionObserver(7 /* set */)\n    ], exports.SetObserver);\n    function getSetObserver(lifecycle, observedSet) {\n        return observedSet.$observer || new exports.SetObserver(lifecycle, observedSet);\n    }\n\n    const ISVGAnalyzer = kernel.DI.createInterface()\n        .withDefault(x => x.singleton(class {\n        isStandardSvgAttribute(node, attributeName) {\n            return false;\n        }\n    }));\n\n    const toStringTag$1 = Object.prototype.toString;\n    const IObserverLocator = kernel.DI.createInterface()\n        .withDefault(x => x.singleton(exports.ObserverLocator));\n    function getPropertyDescriptor(subject, name) {\n        let pd = Object.getOwnPropertyDescriptor(subject, name);\n        let proto = Object.getPrototypeOf(subject);\n        while (pd === undefined && proto !== null) {\n            pd = Object.getOwnPropertyDescriptor(proto, name);\n            proto = Object.getPrototypeOf(proto);\n        }\n        return pd;\n    }\n    exports.ObserverLocator = \n    /*@internal*/\n    class ObserverLocator {\n        constructor(lifecycle, eventManager, dirtyChecker, svgAnalyzer) {\n            this.lifecycle = lifecycle;\n            this.eventManager = eventManager;\n            this.dirtyChecker = dirtyChecker;\n            this.svgAnalyzer = svgAnalyzer;\n            this.adapters = [];\n        }\n        getObserver(obj, propertyName) {\n            if (obj.$synthetic === true) {\n                return obj.getObservers().getOrCreate(obj, propertyName);\n            }\n            let observersLookup = obj.$observers;\n            let observer;\n            if (observersLookup && propertyName in observersLookup) {\n                return observersLookup[propertyName];\n            }\n            observer = this.createPropertyObserver(obj, propertyName);\n            if (!observer.doNotCache) {\n                if (observersLookup === undefined) {\n                    observersLookup = this.getOrCreateObserversLookup(obj);\n                }\n                observersLookup[propertyName] = observer;\n            }\n            return observer;\n        }\n        addAdapter(adapter) {\n            this.adapters.push(adapter);\n        }\n        getAccessor(obj, propertyName) {\n            if (DOM.isNodeInstance(obj)) {\n                const tagName = obj['tagName'];\n                // this check comes first for hot path optimization\n                if (propertyName === 'textContent') {\n                    return new exports.ElementPropertyAccessor(this.lifecycle, obj, propertyName);\n                }\n                // TODO: optimize and make pluggable\n                if (propertyName === 'class' || propertyName === 'style' || propertyName === 'css'\n                    || propertyName === 'value' && (tagName === 'INPUT' || tagName === 'SELECT')\n                    || propertyName === 'checked' && tagName === 'INPUT'\n                    || propertyName === 'model' && tagName === 'INPUT'\n                    || /^xlink:.+$/.exec(propertyName)) {\n                    return this.getObserver(obj, propertyName);\n                }\n                if (/^\\w+:|^data-|^aria-/.test(propertyName)\n                    || this.svgAnalyzer.isStandardSvgAttribute(obj, propertyName)\n                    || tagName === 'IMG' && propertyName === 'src'\n                    || tagName === 'A' && propertyName === 'href') {\n                    return new exports.DataAttributeAccessor(this.lifecycle, obj, propertyName);\n                }\n                return new exports.ElementPropertyAccessor(this.lifecycle, obj, propertyName);\n            }\n            return new PropertyAccessor(obj, propertyName);\n        }\n        getArrayObserver(observedArray) {\n            return getArrayObserver(this.lifecycle, observedArray);\n        }\n        getMapObserver(observedMap) {\n            return getMapObserver(this.lifecycle, observedMap);\n        }\n        getSetObserver(observedSet) {\n            return getSetObserver(this.lifecycle, observedSet);\n        }\n        getOrCreateObserversLookup(obj) {\n            return obj.$observers || this.createObserversLookup(obj);\n        }\n        createObserversLookup(obj) {\n            const value = {};\n            if (!Reflect.defineProperty(obj, '$observers', {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: value\n            })) {\n                kernel.Reporter.write(0, obj);\n            }\n            return value;\n        }\n        getAdapterObserver(obj, propertyName, descriptor) {\n            for (let i = 0, ii = this.adapters.length; i < ii; i++) {\n                const adapter = this.adapters[i];\n                const observer = adapter.getObserver(obj, propertyName, descriptor);\n                if (observer) {\n                    return observer;\n                }\n            }\n            return null;\n        }\n        createPropertyObserver(obj, propertyName) {\n            if (!(obj instanceof Object)) {\n                return new PrimitiveObserver(obj, propertyName);\n            }\n            let isNode;\n            if (DOM.isNodeInstance(obj)) {\n                if (propertyName === 'class') {\n                    return new exports.ClassAttributeAccessor(this.lifecycle, obj);\n                }\n                if (propertyName === 'style' || propertyName === 'css') {\n                    return new exports.StyleAttributeAccessor(this.lifecycle, obj);\n                }\n                const tagName = obj['tagName'];\n                const handler = this.eventManager.getElementHandler(obj, propertyName);\n                if (propertyName === 'value' && tagName === 'SELECT') {\n                    return new exports.SelectValueObserver(this.lifecycle, obj, handler, this);\n                }\n                if (propertyName === 'checked' && tagName === 'INPUT') {\n                    return new exports.CheckedObserver(this.lifecycle, obj, handler, this);\n                }\n                if (handler) {\n                    return new exports.ValueAttributeObserver(this.lifecycle, obj, propertyName, handler);\n                }\n                const xlinkResult = /^xlink:(.+)$/.exec(propertyName);\n                if (xlinkResult) {\n                    return new exports.XLinkAttributeAccessor(this.lifecycle, obj, propertyName, xlinkResult[1]);\n                }\n                if (propertyName === 'role'\n                    || /^\\w+:|^data-|^aria-/.test(propertyName)\n                    || this.svgAnalyzer.isStandardSvgAttribute(obj, propertyName)) {\n                    return new exports.DataAttributeAccessor(this.lifecycle, obj, propertyName);\n                }\n                isNode = true;\n            }\n            const tag = toStringTag$1.call(obj);\n            switch (tag) {\n                case '[object Array]':\n                    if (propertyName === 'length') {\n                        return this.getArrayObserver(obj).getLengthObserver();\n                    }\n                    return this.dirtyChecker.createProperty(obj, propertyName);\n                case '[object Map]':\n                    if (propertyName === 'size') {\n                        return this.getMapObserver(obj).getLengthObserver();\n                    }\n                    return this.dirtyChecker.createProperty(obj, propertyName);\n                case '[object Set]':\n                    if (propertyName === 'size') {\n                        return this.getSetObserver(obj).getLengthObserver();\n                    }\n                    return this.dirtyChecker.createProperty(obj, propertyName);\n            }\n            const descriptor = getPropertyDescriptor(obj, propertyName);\n            if (descriptor) {\n                if (descriptor.get || descriptor.set) {\n                    if (descriptor.get && descriptor.get.getObserver) {\n                        return descriptor.get.getObserver(obj);\n                    }\n                    // attempt to use an adapter before resorting to dirty checking.\n                    const adapterObserver = this.getAdapterObserver(obj, propertyName, descriptor);\n                    if (adapterObserver) {\n                        return adapterObserver;\n                    }\n                    if (isNode) {\n                        // TODO: use MutationObserver\n                        return this.dirtyChecker.createProperty(obj, propertyName);\n                    }\n                    return createComputedObserver(this, this.dirtyChecker, this.lifecycle, obj, propertyName, descriptor);\n                }\n            }\n            return new exports.SetterObserver(obj, propertyName);\n        }\n    };\n    exports.ObserverLocator = __decorate([\n        kernel.inject(ILifecycle, IEventManager, IDirtyChecker, ISVGAnalyzer)\n        /*@internal*/\n    ], exports.ObserverLocator);\n    function getCollectionObserver(lifecycle, collection) {\n        switch (toStringTag$1.call(collection)) {\n            case '[object Array]':\n                return getArrayObserver(lifecycle, collection);\n            case '[object Map]':\n                return getMapObserver(lifecycle, collection);\n            case '[object Set]':\n                return getSetObserver(lifecycle, collection);\n        }\n        return null;\n    }\n\n    exports.UpdateTriggerBindingBehavior = class UpdateTriggerBindingBehavior {\n        constructor(observerLocator) {\n            this.observerLocator = observerLocator;\n        }\n        bind(flags, scope, binding, ...events) {\n            if (events.length === 0) {\n                throw kernel.Reporter.error(9);\n            }\n            if (binding.mode !== exports.BindingMode.twoWay && binding.mode !== exports.BindingMode.fromView) {\n                throw kernel.Reporter.error(10);\n            }\n            // ensure the binding's target observer has been set.\n            const targetObserver = this.observerLocator.getObserver(binding.target, binding.targetProperty);\n            if (!targetObserver.handler) {\n                throw kernel.Reporter.error(10);\n            }\n            binding.targetObserver = targetObserver;\n            // stash the original element subscribe function.\n            targetObserver.originalHandler = binding.targetObserver.handler;\n            // replace the element subscribe function with one that uses the correct events.\n            targetObserver.handler = new EventSubscriber(events);\n        }\n        unbind(flags, scope, binding) {\n            // restore the state of the binding.\n            binding.targetObserver.handler.dispose();\n            binding.targetObserver.handler = binding.targetObserver.originalHandler;\n            binding.targetObserver.originalHandler = null;\n        }\n    };\n    exports.UpdateTriggerBindingBehavior = __decorate([\n        bindingBehavior('updateTrigger'),\n        kernel.inject(IObserverLocator)\n    ], exports.UpdateTriggerBindingBehavior);\n\n    class Call {\n        constructor(sourceExpression, target, targetProperty, observerLocator, locator) {\n            this.sourceExpression = sourceExpression;\n            this.locator = locator;\n            this.$nextBind = null;\n            this.$prevBind = null;\n            this.$state = 0 /* none */;\n            this.targetObserver = observerLocator.getObserver(target, targetProperty);\n        }\n        callSource(args) {\n            const overrideContext = this.$scope.overrideContext;\n            Object.assign(overrideContext, args);\n            const result = this.sourceExpression.evaluate(exports.LifecycleFlags.mustEvaluate, this.$scope, this.locator);\n            for (const prop in args) {\n                delete overrideContext[prop];\n            }\n            return result;\n        }\n        $bind(flags, scope) {\n            if (this.$state & 2 /* isBound */) {\n                if (this.$scope === scope) {\n                    return;\n                }\n                this.$unbind(flags | exports.LifecycleFlags.fromBind);\n            }\n            // add isBinding flag\n            this.$state |= 1 /* isBinding */;\n            this.$scope = scope;\n            const sourceExpression = this.sourceExpression;\n            if (hasBind(sourceExpression)) {\n                sourceExpression.bind(flags, scope, this);\n            }\n            this.targetObserver.setValue($args => this.callSource($args), flags);\n            // add isBound flag and remove isBinding flag\n            this.$state |= 2 /* isBound */;\n            this.$state &= ~1 /* isBinding */;\n        }\n        $unbind(flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            const sourceExpression = this.sourceExpression;\n            if (hasUnbind(sourceExpression)) {\n                sourceExpression.unbind(flags, this.$scope, this);\n            }\n            this.$scope = null;\n            this.targetObserver.setValue(null, flags);\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n        }\n        // tslint:disable:no-empty no-any\n        observeProperty(obj, propertyName) { }\n        handleChange(newValue, previousValue, flags) { }\n    }\n\n    const IExpressionParser = kernel.DI.createInterface()\n        .withDefault(x => x.singleton(ExpressionParser));\n    /*@internal*/\n    class ExpressionParser {\n        constructor() {\n            this.expressionLookup = Object.create(null);\n            this.interpolationLookup = Object.create(null);\n            this.forOfLookup = Object.create(null);\n        }\n        parse(expression, bindingType) {\n            switch (bindingType) {\n                case 2048 /* Interpolation */:\n                    {\n                        let found = this.interpolationLookup[expression];\n                        if (found === undefined) {\n                            found = this.interpolationLookup[expression] = this.parseCore(expression, bindingType);\n                        }\n                        return found;\n                    }\n                case 539 /* ForCommand */:\n                    {\n                        let found = this.forOfLookup[expression];\n                        if (found === undefined) {\n                            found = this.forOfLookup[expression] = this.parseCore(expression, bindingType);\n                        }\n                        return found;\n                    }\n                default:\n                    {\n                        // Allow empty strings for normal bindings and those that are empty by default (such as a custom attribute without an equals sign)\n                        // But don't cache it, because empty strings are always invalid for any other type of binding\n                        if (expression.length === 0 && (bindingType & (53 /* BindCommand */ | 49 /* OneTimeCommand */ | 50 /* ToViewCommand */))) {\n                            return PrimitiveLiteral.$empty;\n                        }\n                        let found = this.expressionLookup[expression];\n                        if (found === undefined) {\n                            found = this.expressionLookup[expression] = this.parseCore(expression, bindingType);\n                        }\n                        return found;\n                    }\n            }\n        }\n        cache(expressions) {\n            const { forOfLookup, expressionLookup, interpolationLookup } = this;\n            for (const expression in expressions) {\n                const expr = expressions[expression];\n                switch (expr.$kind) {\n                    case 24 /* Interpolation */:\n                        interpolationLookup[expression] = expr;\n                        break;\n                    case 55 /* ForOfStatement */:\n                        forOfLookup[expression] = expr;\n                        break;\n                    default:\n                        expressionLookup[expression] = expr;\n                }\n            }\n        }\n        parseCore(expression, bindingType) {\n            try {\n                const parts = expression.split('.');\n                const firstPart = parts[0];\n                let current;\n                if (firstPart.endsWith('()')) {\n                    current = new CallScope(firstPart.replace('()', ''), kernel.PLATFORM.emptyArray);\n                }\n                else {\n                    current = new AccessScope(parts[0]);\n                }\n                let index = 1;\n                while (index < parts.length) {\n                    const currentPart = parts[index];\n                    if (currentPart.endsWith('()')) {\n                        current = new CallMember(current, currentPart.replace('()', ''), kernel.PLATFORM.emptyArray);\n                    }\n                    else {\n                        current = new AccessMember(current, parts[index]);\n                    }\n                    index++;\n                }\n                return current;\n            }\n            catch (e) {\n                throw kernel.Reporter.error(3, e);\n            }\n        }\n    }\n\n    // tslint:disable:no-any\n    const { toView: toView$2, oneTime: oneTime$2 } = exports.BindingMode;\n    class MultiInterpolationBinding {\n        constructor(observerLocator, interpolation, target, targetProperty, mode, locator) {\n            this.observerLocator = observerLocator;\n            this.interpolation = interpolation;\n            this.target = target;\n            this.targetProperty = targetProperty;\n            this.mode = mode;\n            this.locator = locator;\n            this.$nextBind = null;\n            this.$prevBind = null;\n            this.$state = 0 /* none */;\n            this.$scope = null;\n            // Note: the child expressions of an Interpolation expression are full Aurelia expressions, meaning they may include\n            // value converters and binding behaviors.\n            // Each expression represents one ${interpolation}, and for each we create a child TextBinding unless there is only one,\n            // in which case the renderer will create the TextBinding directly\n            const expressions = interpolation.expressions;\n            const parts = this.parts = Array(expressions.length);\n            for (let i = 0, ii = expressions.length; i < ii; ++i) {\n                parts[i] = new exports.InterpolationBinding(expressions[i], interpolation, target, targetProperty, mode, observerLocator, locator, i === 0);\n            }\n        }\n        $bind(flags, scope) {\n            if (this.$state & 2 /* isBound */) {\n                if (this.$scope === scope) {\n                    return;\n                }\n                this.$unbind(flags);\n            }\n            this.$state |= 2 /* isBound */;\n            this.$scope = scope;\n            const parts = this.parts;\n            for (let i = 0, ii = parts.length; i < ii; ++i) {\n                parts[i].$bind(flags, scope);\n            }\n        }\n        $unbind(flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            this.$state &= ~2 /* isBound */;\n            this.$scope = null;\n            const parts = this.parts;\n            for (let i = 0, ii = parts.length; i < ii; ++i) {\n                parts[i].$unbind(flags);\n            }\n        }\n    }\n    exports.InterpolationBinding = class InterpolationBinding {\n        constructor(sourceExpression, interpolation, target, targetProperty, mode, observerLocator, locator, isFirst) {\n            this.sourceExpression = sourceExpression;\n            this.interpolation = interpolation;\n            this.target = target;\n            this.targetProperty = targetProperty;\n            this.mode = mode;\n            this.observerLocator = observerLocator;\n            this.locator = locator;\n            this.isFirst = isFirst;\n            this.$state = 0 /* none */;\n            this.targetObserver = observerLocator.getAccessor(target, targetProperty);\n        }\n        updateTarget(value, flags) {\n            this.targetObserver.setValue(value, flags | exports.LifecycleFlags.updateTargetInstance);\n        }\n        handleChange(newValue, previousValue, flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            previousValue = this.targetObserver.getValue();\n            newValue = this.interpolation.evaluate(flags, this.$scope, this.locator);\n            if (newValue !== previousValue) {\n                this.updateTarget(newValue, flags);\n            }\n            if ((this.mode & oneTime$2) === 0) {\n                this.version++;\n                this.sourceExpression.connect(flags, this.$scope, this);\n                this.unobserve(false);\n            }\n        }\n        $bind(flags, scope) {\n            if (this.$state & 2 /* isBound */) {\n                if (this.$scope === scope) {\n                    return;\n                }\n                this.$unbind(flags);\n            }\n            this.$state |= 2 /* isBound */;\n            this.$scope = scope;\n            const sourceExpression = this.sourceExpression;\n            if (sourceExpression.bind) {\n                sourceExpression.bind(flags, scope, this);\n            }\n            // since the interpolation already gets the whole value, we only need to let the first\n            // text binding do the update if there are multiple\n            if (this.isFirst) {\n                this.updateTarget(this.interpolation.evaluate(flags, scope, this.locator), flags);\n            }\n            if (this.mode & toView$2) {\n                sourceExpression.connect(flags, scope, this);\n            }\n        }\n        $unbind(flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            this.$state &= ~2 /* isBound */;\n            const sourceExpression = this.sourceExpression;\n            if (sourceExpression.unbind) {\n                sourceExpression.unbind(flags, this.$scope, this);\n            }\n            this.$scope = null;\n            this.unobserve(true);\n        }\n    };\n    exports.InterpolationBinding = __decorate([\n        connectable()\n    ], exports.InterpolationBinding);\n\n    exports.LetBinding = class LetBinding {\n        constructor(sourceExpression, targetProperty, observerLocator, locator, toViewModel = false) {\n            this.sourceExpression = sourceExpression;\n            this.targetProperty = targetProperty;\n            this.observerLocator = observerLocator;\n            this.locator = locator;\n            this.toViewModel = toViewModel;\n            this.$nextBind = null;\n            this.$prevBind = null;\n            this.$state = 0 /* none */;\n            this.$scope = null;\n            this.target = null;\n            this.$lifecycle = locator.get(ILifecycle);\n        }\n        handleChange(newValue, previousValue, flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            if (flags & exports.LifecycleFlags.updateTargetInstance) {\n                const { target, targetProperty } = this;\n                previousValue = target[targetProperty];\n                newValue = this.sourceExpression.evaluate(flags, this.$scope, this.locator);\n                if (newValue !== previousValue) {\n                    target[targetProperty] = newValue;\n                }\n                return;\n            }\n            throw kernel.Reporter.error(15, flags);\n        }\n        $bind(flags, scope) {\n            if (this.$state & 2 /* isBound */) {\n                if (this.$scope === scope) {\n                    return;\n                }\n                this.$unbind(flags | exports.LifecycleFlags.fromBind);\n            }\n            // add isBinding flag\n            this.$state |= 1 /* isBinding */;\n            this.$scope = scope;\n            this.target = this.toViewModel ? scope.bindingContext : scope.overrideContext;\n            const sourceExpression = this.sourceExpression;\n            if (sourceExpression.bind) {\n                sourceExpression.bind(flags, scope, this);\n            }\n            // sourceExpression might have been changed during bind\n            this.target[this.targetProperty] = this.sourceExpression.evaluate(exports.LifecycleFlags.fromBind, scope, this.locator);\n            this.sourceExpression.connect(flags, scope, this);\n            // add isBound flag and remove isBinding flag\n            this.$state |= 2 /* isBound */;\n            this.$state &= ~1 /* isBinding */;\n        }\n        $unbind(flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            const sourceExpression = this.sourceExpression;\n            if (sourceExpression.unbind) {\n                sourceExpression.unbind(flags, this.$scope, this);\n            }\n            this.$scope = null;\n            this.unobserve(true);\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n        }\n    };\n    exports.LetBinding = __decorate([\n        connectable()\n    ], exports.LetBinding);\n\n    class Listener {\n        constructor(targetEvent, delegationStrategy, sourceExpression, target, preventDefault, eventManager, locator) {\n            this.targetEvent = targetEvent;\n            this.delegationStrategy = delegationStrategy;\n            this.sourceExpression = sourceExpression;\n            this.target = target;\n            this.preventDefault = preventDefault;\n            this.eventManager = eventManager;\n            this.locator = locator;\n            this.$nextBind = null;\n            this.$prevBind = null;\n            this.$state = 0 /* none */;\n        }\n        callSource(event) {\n            const overrideContext = this.$scope.overrideContext;\n            overrideContext['$event'] = event;\n            const result = this.sourceExpression.evaluate(exports.LifecycleFlags.mustEvaluate, this.$scope, this.locator);\n            delete overrideContext['$event'];\n            if (result !== true && this.preventDefault) {\n                event.preventDefault();\n            }\n            return result;\n        }\n        handleEvent(event) {\n            this.callSource(event);\n        }\n        $bind(flags, scope) {\n            if (this.$state & 2 /* isBound */) {\n                if (this.$scope === scope) {\n                    return;\n                }\n                this.$unbind(flags | exports.LifecycleFlags.fromBind);\n            }\n            // add isBinding flag\n            this.$state |= 1 /* isBinding */;\n            this.$scope = scope;\n            const sourceExpression = this.sourceExpression;\n            if (hasBind(sourceExpression)) {\n                sourceExpression.bind(flags, scope, this);\n            }\n            this.handler = this.eventManager.addEventListener(this.target, this.targetEvent, this, this.delegationStrategy);\n            // add isBound flag and remove isBinding flag\n            this.$state |= 2 /* isBound */;\n            this.$state &= ~1 /* isBinding */;\n        }\n        $unbind(flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            const sourceExpression = this.sourceExpression;\n            if (hasUnbind(sourceExpression)) {\n                sourceExpression.unbind(flags, this.$scope, this);\n            }\n            this.$scope = null;\n            this.handler.dispose();\n            this.handler = null;\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n        }\n        // tslint:disable:no-empty no-any\n        observeProperty(obj, propertyName) { }\n        handleChange(newValue, previousValue, flags) { }\n    }\n\n    class Ref {\n        constructor(sourceExpression, target, locator) {\n            this.sourceExpression = sourceExpression;\n            this.target = target;\n            this.locator = locator;\n            this.$nextBind = null;\n            this.$prevBind = null;\n            this.$state = 0 /* none */;\n        }\n        $bind(flags, scope) {\n            if (this.$state & 2 /* isBound */) {\n                if (this.$scope === scope) {\n                    return;\n                }\n                this.$unbind(flags | exports.LifecycleFlags.fromBind);\n            }\n            // add isBinding flag\n            this.$state |= 1 /* isBinding */;\n            this.$scope = scope;\n            const sourceExpression = this.sourceExpression;\n            if (hasBind(sourceExpression)) {\n                sourceExpression.bind(flags, scope, this);\n            }\n            this.sourceExpression.assign(flags, this.$scope, this.locator, this.target);\n            // add isBound flag and remove isBinding flag\n            this.$state |= 2 /* isBound */;\n            this.$state &= ~1 /* isBinding */;\n        }\n        $unbind(flags) {\n            if (!(this.$state & 2 /* isBound */)) {\n                return;\n            }\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            if (this.sourceExpression.evaluate(flags, this.$scope, this.locator) === this.target) {\n                this.sourceExpression.assign(flags, this.$scope, this.locator, null);\n            }\n            const sourceExpression = this.sourceExpression;\n            if (hasUnbind(sourceExpression)) {\n                sourceExpression.unbind(flags, this.$scope, this);\n            }\n            this.$scope = null;\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n        }\n        // tslint:disable:no-empty no-any\n        observeProperty(obj, propertyName) { }\n        handleChange(newValue, previousValue, flags) { }\n    }\n\n    // tslint:disable:no-reserved-keywords\n    /*@internal*/\n    const customElementName = 'custom-element';\n    /*@internal*/\n    function customElementKey(name) {\n        return `${customElementName}:${name}`;\n    }\n    /*@internal*/\n    function customElementBehavior(node) {\n        return node.$customElement || null;\n    }\n    /*@internal*/\n    const customAttributeName = 'custom-attribute';\n    /*@internal*/\n    function customAttributeKey(name) {\n        return `${customAttributeName}:${name}`;\n    }\n    const instructionTypeValues = 'abcdefghijkl';\n    const ITargetedInstruction = kernel.DI.createInterface();\n    function isTargetedInstruction(value) {\n        const type = value.type;\n        return typeof type === 'string' && instructionTypeValues.indexOf(type) !== -1;\n    }\n    /*@internal*/\n    const buildRequired = Object.freeze({\n        required: true,\n        compiler: 'default'\n    });\n    const buildNotRequired = Object.freeze({\n        required: false,\n        compiler: 'default'\n    });\n    // Note: this is a little perf thing; having one predefined class with the properties always\n    // assigned in the same order ensures the browser can keep reusing the same generated hidden\n    // class\n    class DefaultTemplateDefinition {\n        constructor() {\n            this.name = 'unnamed';\n            this.template = null;\n            this.cache = 0;\n            this.build = buildNotRequired;\n            this.bindables = kernel.PLATFORM.emptyObject;\n            this.instructions = kernel.PLATFORM.emptyArray;\n            this.dependencies = kernel.PLATFORM.emptyArray;\n            this.surrogates = kernel.PLATFORM.emptyArray;\n            this.containerless = false;\n            this.shadowOptions = null;\n            this.hasSlots = false;\n        }\n    }\n    const templateDefinitionAssignables = [\n        'name',\n        'template',\n        'cache',\n        'build',\n        'containerless',\n        'shadowOptions',\n        'hasSlots'\n    ];\n    const templateDefinitionArrays = [\n        'instructions',\n        'dependencies',\n        'surrogates'\n    ];\n    function buildTemplateDefinition(ctor, nameOrDef, template, cache, build, bindables, instructions, dependencies, surrogates, containerless, shadowOptions, hasSlots) {\n        const def = new DefaultTemplateDefinition();\n        // all cases fall through intentionally\n        const argLen = arguments.length;\n        switch (argLen) {\n            case 12: if (hasSlots !== null)\n                def.hasSlots = hasSlots;\n            case 11: if (shadowOptions !== null)\n                def.shadowOptions = shadowOptions;\n            case 10: if (containerless !== null)\n                def.containerless = containerless;\n            case 9: if (surrogates !== null)\n                def.surrogates = kernel.PLATFORM.toArray(surrogates);\n            case 8: if (dependencies !== null)\n                def.dependencies = kernel.PLATFORM.toArray(dependencies);\n            case 7: if (instructions !== null)\n                def.instructions = kernel.PLATFORM.toArray(instructions);\n            case 6: if (bindables !== null)\n                def.bindables = Object.assign({}, bindables);\n            case 5: if (build !== null)\n                def.build = build === true ? buildRequired : build === false ? buildNotRequired : Object.assign({}, build);\n            case 4: if (cache !== null)\n                def.cache = cache;\n            case 3: if (template !== null)\n                def.template = template;\n            case 2:\n                if (ctor !== null) {\n                    if (ctor['bindables']) {\n                        def.bindables = Object.assign({}, ctor.bindables);\n                    }\n                    if (ctor['containerless']) {\n                        def.containerless = ctor.containerless;\n                    }\n                    if (ctor['shadowOptions']) {\n                        def.shadowOptions = ctor.shadowOptions;\n                    }\n                }\n                if (typeof nameOrDef === 'string') {\n                    if (nameOrDef.length > 0) {\n                        def.name = nameOrDef;\n                    }\n                }\n                else if (nameOrDef !== null) {\n                    templateDefinitionAssignables.forEach(prop => {\n                        if (nameOrDef[prop]) {\n                            def[prop] = nameOrDef[prop];\n                        }\n                    });\n                    templateDefinitionArrays.forEach(prop => {\n                        if (nameOrDef[prop]) {\n                            def[prop] = kernel.PLATFORM.toArray(nameOrDef[prop]);\n                        }\n                    });\n                    if (nameOrDef['bindables']) {\n                        if (def.bindables === kernel.PLATFORM.emptyObject) {\n                            def.bindables = Object.assign({}, nameOrDef.bindables);\n                        }\n                        else {\n                            Object.assign(def.bindables, nameOrDef.bindables);\n                        }\n                    }\n                }\n        }\n        // special handling for invocations that quack like a @customElement decorator\n        if (argLen === 2 && ctor !== null) {\n            if (typeof nameOrDef === 'string' || !('build' in nameOrDef)) {\n                def.build = buildRequired;\n            }\n        }\n        return def;\n    }\n\n    function bindable(configOrTarget, prop) {\n        let config;\n        const decorator = function decorate($target, $prop) {\n            const Type = $target.constructor;\n            let bindables = Type.bindables;\n            if (bindables === undefined) {\n                bindables = Type.bindables = {};\n            }\n            if (!config.attribute) {\n                config.attribute = kernel.PLATFORM.kebabCase($prop);\n            }\n            if (!config.callback) {\n                config.callback = `${$prop}Changed`;\n            }\n            if (!config.mode) {\n                config.mode = exports.BindingMode.toView;\n            }\n            if (arguments.length > 1) {\n                // Non invocation:\n                // - @bindable\n                // Invocation with or w/o opts:\n                // - @bindable()\n                // - @bindable({...opts})\n                config.property = $prop;\n            }\n            bindables[config.property] = config;\n        };\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @bindable\n            config = {};\n            return decorator(configOrTarget, prop);\n        }\n        else if (typeof configOrTarget === 'string') {\n            // ClassDecorator\n            // - @bindable('bar')\n            // Direct call:\n            // - @bindable('bar')(Foo)\n            config = {};\n            return decorator;\n        }\n        // Invocation with or w/o opts:\n        // - @bindable()\n        // - @bindable({...opts})\n        config = (configOrTarget || {});\n        return decorator;\n    }\n\n    function createElement(tagOrType, props, children) {\n        if (typeof tagOrType === 'string') {\n            return createElementForTag(tagOrType, props, children);\n        }\n        else {\n            return createElementForType(tagOrType, props, children);\n        }\n    }\n    class RenderPlan {\n        constructor(node, instructions, dependencies) {\n            this.node = node;\n            this.instructions = instructions;\n            this.dependencies = dependencies;\n        }\n        get definition() {\n            return this.lazyDefinition || (this.lazyDefinition =\n                buildTemplateDefinition(null, null, this.node, null, typeof this.node === 'string', null, this.instructions, this.dependencies));\n        }\n        getElementTemplate(engine, Type) {\n            return engine.getElementTemplate(this.definition, Type);\n        }\n        createView(engine, parentContext) {\n            return this.getViewFactory(engine, parentContext).create();\n        }\n        getViewFactory(engine, parentContext) {\n            return engine.getViewFactory(this.definition, parentContext);\n        }\n        /*@internal*/\n        mergeInto(parent, instructions, dependencies) {\n            DOM.appendChild(parent, this.node);\n            instructions.push(...this.instructions);\n            dependencies.push(...this.dependencies);\n        }\n    }\n    function createElementForTag(tagName, props, children) {\n        const instructions = [];\n        const allInstructions = [];\n        const dependencies = [];\n        const element = DOM.createElement(tagName);\n        let hasInstructions = false;\n        if (props) {\n            Object.keys(props)\n                .forEach(to => {\n                const value = props[to];\n                if (isTargetedInstruction(value)) {\n                    hasInstructions = true;\n                    instructions.push(value);\n                }\n                else {\n                    DOM.setAttribute(element, to, value);\n                }\n            });\n        }\n        if (hasInstructions) {\n            DOM.setAttribute(element, 'class', 'au');\n            allInstructions.push(instructions);\n        }\n        if (children) {\n            addChildren(element, children, allInstructions, dependencies);\n        }\n        return new RenderPlan(element, allInstructions, dependencies);\n    }\n    function createElementForType(Type, props, children) {\n        const tagName = Type.description.name;\n        const instructions = [];\n        const allInstructions = [instructions];\n        const dependencies = [];\n        const childInstructions = [];\n        const bindables = Type.description.bindables;\n        const element = DOM.createElement(tagName);\n        DOM.setAttribute(element, 'class', 'au');\n        if (!dependencies.includes(Type)) {\n            dependencies.push(Type);\n        }\n        instructions.push({\n            type: \"k\" /* hydrateElement */,\n            res: tagName,\n            instructions: childInstructions\n        });\n        if (props) {\n            Object.keys(props)\n                .forEach(to => {\n                const value = props[to];\n                if (isTargetedInstruction(value)) {\n                    childInstructions.push(value);\n                }\n                else {\n                    const bindable = bindables[to];\n                    if (bindable) {\n                        childInstructions.push({\n                            type: \"i\" /* setProperty */,\n                            to,\n                            value\n                        });\n                    }\n                    else {\n                        childInstructions.push({\n                            type: \"j\" /* setAttribute */,\n                            to,\n                            value\n                        });\n                    }\n                }\n            });\n        }\n        if (children) {\n            addChildren(element, children, allInstructions, dependencies);\n        }\n        return new RenderPlan(element, allInstructions, dependencies);\n    }\n    function addChildren(parent, children, allInstructions, dependencies) {\n        for (let i = 0, ii = children.length; i < ii; ++i) {\n            const current = children[i];\n            if (typeof current === 'string') {\n                DOM.appendChild(parent, DOM.createTextNode(current));\n            }\n            else if (DOM.isNodeInstance(current)) {\n                DOM.appendChild(parent, current);\n            }\n            else {\n                current.mergeInto(parent, allInstructions, dependencies);\n            }\n        }\n    }\n\n    /*@internal*/\n    function $attachAttribute(flags) {\n        if (this.$state & 8 /* isAttached */) {\n            return;\n        }\n        const lifecycle = this.$lifecycle;\n        lifecycle.beginAttach();\n        // add isAttaching flag\n        this.$state |= 4 /* isAttaching */;\n        flags |= exports.LifecycleFlags.fromAttach;\n        const hooks = this.$hooks;\n        if (hooks & 16 /* hasAttaching */) {\n            this.attaching(flags);\n        }\n        // add isAttached flag, remove isAttaching flag\n        this.$state |= 8 /* isAttached */;\n        this.$state &= ~4 /* isAttaching */;\n        if (hooks & 32 /* hasAttached */) {\n            lifecycle.enqueueAttached(this);\n        }\n        lifecycle.endAttach(flags);\n    }\n    /*@internal*/\n    function $attachElement(flags) {\n        if (this.$state & 8 /* isAttached */) {\n            return;\n        }\n        const lifecycle = this.$lifecycle;\n        lifecycle.beginAttach();\n        // add isAttaching flag\n        this.$state |= 4 /* isAttaching */;\n        flags |= exports.LifecycleFlags.fromAttach;\n        const hooks = this.$hooks;\n        if (hooks & 16 /* hasAttaching */) {\n            this.attaching(flags);\n        }\n        let current = this.$attachableHead;\n        while (current !== null) {\n            current.$attach(flags);\n            current = current.$nextAttach;\n        }\n        if (!(this.$state & 16 /* isMounted */)) {\n            lifecycle.enqueueMount(this);\n        }\n        // add isAttached flag, remove isAttaching flag\n        this.$state |= 8 /* isAttached */;\n        this.$state &= ~4 /* isAttaching */;\n        if (hooks & 32 /* hasAttached */) {\n            lifecycle.enqueueAttached(this);\n        }\n        lifecycle.endAttach(flags);\n    }\n    /*@internal*/\n    function $attachView(flags) {\n        if (this.$state & 8 /* isAttached */) {\n            return;\n        }\n        // add isAttaching flag\n        this.$state |= 4 /* isAttaching */;\n        flags |= exports.LifecycleFlags.fromAttach;\n        let current = this.$attachableHead;\n        while (current !== null) {\n            current.$attach(flags);\n            current = current.$nextAttach;\n        }\n        if (!(this.$state & 16 /* isMounted */)) {\n            this.$lifecycle.enqueueMount(this);\n        }\n        // add isAttached flag, remove isAttaching flag\n        this.$state |= 8 /* isAttached */;\n        this.$state &= ~4 /* isAttaching */;\n    }\n    /*@internal*/\n    function $detachAttribute(flags) {\n        if (this.$state & 8 /* isAttached */) {\n            const lifecycle = this.$lifecycle;\n            lifecycle.beginDetach();\n            // add isDetaching flag\n            this.$state |= 32 /* isDetaching */;\n            flags |= exports.LifecycleFlags.fromDetach;\n            const hooks = this.$hooks;\n            if (hooks & 64 /* hasDetaching */) {\n                this.detaching(flags);\n            }\n            // remove isAttached and isDetaching flags\n            this.$state &= ~(8 /* isAttached */ | 32 /* isDetaching */);\n            if (hooks & 128 /* hasDetached */) {\n                lifecycle.enqueueDetached(this);\n            }\n            lifecycle.endDetach(flags);\n        }\n    }\n    /*@internal*/\n    function $detachElement(flags) {\n        if (this.$state & 8 /* isAttached */) {\n            const lifecycle = this.$lifecycle;\n            lifecycle.beginDetach();\n            // add isDetaching flag\n            this.$state |= 32 /* isDetaching */;\n            flags |= exports.LifecycleFlags.fromDetach;\n            if (this.$state & 16 /* isMounted */) {\n                // Only unmount if either:\n                // - No parent view/element is queued for unmount yet, or\n                // - Aurelia is stopping (in which case all nodes need to return to their fragments for a clean mount on next start)\n                if (((flags & exports.LifecycleFlags.parentUnmountQueued) ^ exports.LifecycleFlags.parentUnmountQueued) | (flags & exports.LifecycleFlags.fromStopTask)) {\n                    lifecycle.enqueueUnmount(this);\n                    flags |= exports.LifecycleFlags.parentUnmountQueued;\n                }\n            }\n            const hooks = this.$hooks;\n            if (hooks & 64 /* hasDetaching */) {\n                this.detaching(flags);\n            }\n            let current = this.$attachableTail;\n            while (current !== null) {\n                current.$detach(flags);\n                current = current.$prevAttach;\n            }\n            // remove isAttached and isDetaching flags\n            this.$state &= ~(8 /* isAttached */ | 32 /* isDetaching */);\n            if (hooks & 128 /* hasDetached */) {\n                lifecycle.enqueueDetached(this);\n            }\n            lifecycle.endDetach(flags);\n        }\n    }\n    /*@internal*/\n    function $detachView(flags) {\n        if (this.$state & 8 /* isAttached */) {\n            // add isDetaching flag\n            this.$state |= 32 /* isDetaching */;\n            flags |= exports.LifecycleFlags.fromDetach;\n            if (this.$state & 16 /* isMounted */) {\n                // Only unmount if either:\n                // - No parent view/element is queued for unmount yet, or\n                // - Aurelia is stopping (in which case all nodes need to return to their fragments for a clean mount on next start)\n                if (((flags & exports.LifecycleFlags.parentUnmountQueued) ^ exports.LifecycleFlags.parentUnmountQueued) | (flags & exports.LifecycleFlags.fromStopTask)) {\n                    this.$lifecycle.enqueueUnmount(this);\n                    flags |= exports.LifecycleFlags.parentUnmountQueued;\n                }\n            }\n            let current = this.$attachableTail;\n            while (current !== null) {\n                current.$detach(flags);\n                current = current.$prevAttach;\n            }\n            // remove isAttached and isDetaching flags\n            this.$state &= ~(8 /* isAttached */ | 32 /* isDetaching */);\n        }\n    }\n    /*@internal*/\n    function $cacheAttribute(flags) {\n        flags |= exports.LifecycleFlags.fromCache;\n        if (this.$hooks & 2048 /* hasCaching */) {\n            this.caching(flags);\n        }\n    }\n    /*@internal*/\n    function $cacheElement(flags) {\n        flags |= exports.LifecycleFlags.fromCache;\n        if (this.$hooks & 2048 /* hasCaching */) {\n            this.caching(flags);\n        }\n        let current = this.$attachableTail;\n        while (current !== null) {\n            current.$cache(flags);\n            current = current.$prevAttach;\n        }\n    }\n    /*@internal*/\n    function $cacheView(flags) {\n        flags |= exports.LifecycleFlags.fromCache;\n        let current = this.$attachableTail;\n        while (current !== null) {\n            current.$cache(flags);\n            current = current.$prevAttach;\n        }\n    }\n    /*@internal*/\n    function $mountElement(flags) {\n        this.$state |= 16 /* isMounted */;\n        this.$projector.project(this.$nodes);\n    }\n    /*@internal*/\n    function $unmountElement(flags) {\n        this.$state &= ~16 /* isMounted */;\n        this.$projector.take(this.$nodes);\n    }\n    /*@internal*/\n    function $mountView(flags) {\n        this.$state |= 16 /* isMounted */;\n        this.$state &= ~256 /* needsMount */;\n        this.$nodes.insertBefore(this.location);\n    }\n    /*@internal*/\n    function $unmountView(flags) {\n        this.$state &= ~16 /* isMounted */;\n        this.$state |= 256 /* needsMount */;\n        this.$nodes.remove();\n        if (this.isFree) {\n            this.isFree = false;\n            if (this.cache.tryReturnToCache(this)) {\n                this.$state |= 128 /* isCached */;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /*@internal*/\n    function $bindAttribute(flags, scope) {\n        flags |= exports.LifecycleFlags.fromBind;\n        if (this.$state & 2 /* isBound */) {\n            if (this.$scope === scope) {\n                return;\n            }\n            this.$unbind(flags);\n        }\n        const lifecycle = this.$lifecycle;\n        lifecycle.beginBind();\n        // add isBinding flag\n        this.$state |= 1 /* isBinding */;\n        const hooks = this.$hooks;\n        if (hooks & 8 /* hasBound */) {\n            lifecycle.enqueueBound(this);\n        }\n        this.$scope = scope;\n        if (hooks & 4 /* hasBinding */) {\n            this.binding(flags);\n        }\n        // add isBound flag and remove isBinding flag\n        this.$state |= 2 /* isBound */;\n        this.$state &= ~1 /* isBinding */;\n        lifecycle.endBind(flags);\n    }\n    /*@internal*/\n    function $bindElement(flags) {\n        if (this.$state & 2 /* isBound */) {\n            return;\n        }\n        const lifecycle = this.$lifecycle;\n        lifecycle.beginBind();\n        // add isBinding flag\n        this.$state |= 1 /* isBinding */;\n        const hooks = this.$hooks;\n        flags |= exports.LifecycleFlags.fromBind;\n        if (hooks & 8 /* hasBound */) {\n            lifecycle.enqueueBound(this);\n        }\n        if (hooks & 4 /* hasBinding */) {\n            this.binding(flags);\n        }\n        const scope = this.$scope;\n        let current = this.$bindableHead;\n        while (current !== null) {\n            current.$bind(flags, scope);\n            current = current.$nextBind;\n        }\n        // add isBound flag and remove isBinding flag\n        this.$state |= 2 /* isBound */;\n        this.$state &= ~1 /* isBinding */;\n        lifecycle.endBind(flags);\n    }\n    /*@internal*/\n    function $bindView(flags, scope) {\n        flags |= exports.LifecycleFlags.fromBind;\n        if (this.$state & 2 /* isBound */) {\n            if (this.$scope === scope) {\n                return;\n            }\n            this.$unbind(flags);\n        }\n        // add isBinding flag\n        this.$state |= 1 /* isBinding */;\n        this.$scope = scope;\n        let current = this.$bindableHead;\n        while (current !== null) {\n            current.$bind(flags, scope);\n            current = current.$nextBind;\n        }\n        // add isBound flag and remove isBinding flag\n        this.$state |= 2 /* isBound */;\n        this.$state &= ~1 /* isBinding */;\n    }\n    /*@internal*/\n    function $unbindAttribute(flags) {\n        if (this.$state & 2 /* isBound */) {\n            const lifecycle = this.$lifecycle;\n            lifecycle.beginUnbind();\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            const hooks = this.$hooks;\n            flags |= exports.LifecycleFlags.fromUnbind;\n            if (hooks & 512 /* hasUnbound */) {\n                lifecycle.enqueueUnbound(this);\n            }\n            if (hooks & 256 /* hasUnbinding */) {\n                this.unbinding(flags);\n            }\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n            lifecycle.endUnbind(flags);\n        }\n    }\n    /*@internal*/\n    function $unbindElement(flags) {\n        if (this.$state & 2 /* isBound */) {\n            const lifecycle = this.$lifecycle;\n            lifecycle.beginUnbind();\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            const hooks = this.$hooks;\n            flags |= exports.LifecycleFlags.fromUnbind;\n            if (hooks & 512 /* hasUnbound */) {\n                lifecycle.enqueueUnbound(this);\n            }\n            if (hooks & 256 /* hasUnbinding */) {\n                this.unbinding(flags);\n            }\n            let current = this.$bindableTail;\n            while (current !== null) {\n                current.$unbind(flags);\n                current = current.$prevBind;\n            }\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n            lifecycle.endUnbind(flags);\n        }\n    }\n    /*@internal*/\n    function $unbindView(flags) {\n        if (this.$state & 2 /* isBound */) {\n            // add isUnbinding flag\n            this.$state |= 64 /* isUnbinding */;\n            flags |= exports.LifecycleFlags.fromUnbind;\n            let current = this.$bindableTail;\n            while (current !== null) {\n                current.$unbind(flags);\n                current = current.$prevBind;\n            }\n            // remove isBound and isUnbinding flags\n            this.$state &= ~(2 /* isBound */ | 64 /* isUnbinding */);\n            this.$scope = null;\n        }\n    }\n\n    /*@internal*/\n    class View {\n        constructor($lifecycle, cache) {\n            this.$lifecycle = $lifecycle;\n            this.cache = cache;\n            this.$bindableHead = null;\n            this.$bindableTail = null;\n            this.$nextBind = null;\n            this.$prevBind = null;\n            this.$attachableHead = null;\n            this.$attachableTail = null;\n            this.$nextAttach = null;\n            this.$prevAttach = null;\n            this.$nextMount = null;\n            this.$mountFlags = 0;\n            this.$nextUnmount = null;\n            this.$unmountFlags = 0;\n            this.$nextUnbindAfterDetach = null;\n            this.$state = 0 /* none */;\n            this.$scope = null;\n            this.isFree = false;\n        }\n        hold(location, flags) {\n            if (!location.parentNode) { // unmet invariant: location must be a child of some other node\n                throw kernel.Reporter.error(60); // TODO: organize error codes\n            }\n            this.location = location;\n            const lastChild = this.$nodes.lastChild;\n            if (lastChild && lastChild.nextSibling === location) {\n                this.$state &= ~256 /* needsMount */;\n            }\n            else {\n                this.$state |= 256 /* needsMount */;\n            }\n        }\n        lockScope(scope) {\n            this.$scope = scope;\n            this.$bind = lockedBind;\n        }\n        release(flags) {\n            this.isFree = true;\n            if (this.$state & 8 /* isAttached */) {\n                return this.cache.canReturnToCache(this);\n            }\n            return this.$unmount(flags);\n        }\n    }\n    /*@internal*/\n    class ViewFactory {\n        constructor(name, template, lifecycle) {\n            this.name = name;\n            this.template = template;\n            this.lifecycle = lifecycle;\n            this.isCaching = false;\n            this.cacheSize = -1;\n            this.cache = null;\n        }\n        setCacheSize(size, doNotOverrideIfAlreadySet) {\n            if (size) {\n                if (size === '*') {\n                    size = ViewFactory.maxCacheSize;\n                }\n                else if (typeof size === 'string') {\n                    size = parseInt(size, 10);\n                }\n                if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {\n                    this.cacheSize = size;\n                }\n            }\n            if (this.cacheSize > 0) {\n                this.cache = [];\n            }\n            else {\n                this.cache = null;\n            }\n            this.isCaching = this.cacheSize > 0;\n        }\n        canReturnToCache(view) {\n            return this.cache !== null && this.cache.length < this.cacheSize;\n        }\n        tryReturnToCache(view) {\n            if (this.canReturnToCache(view)) {\n                view.$cache(exports.LifecycleFlags.none);\n                this.cache.push(view);\n                return true;\n            }\n            return false;\n        }\n        create() {\n            const cache = this.cache;\n            let view;\n            if (cache !== null && cache.length > 0) {\n                view = cache.pop();\n                view.$state &= ~128 /* isCached */;\n                return view;\n            }\n            view = new View(this.lifecycle, this);\n            this.template.render(view);\n            if (!view.$nodes) {\n                throw kernel.Reporter.error(90);\n            }\n            return view;\n        }\n    }\n    ViewFactory.maxCacheSize = 0xFFFF;\n    function lockedBind(flags) {\n        if (this.$state & 2 /* isBound */) {\n            return;\n        }\n        flags |= exports.LifecycleFlags.fromBind;\n        const lockedScope = this.$scope;\n        let current = this.$bindableHead;\n        while (current !== null) {\n            current.$bind(flags, lockedScope);\n            current = current.$nextBind;\n        }\n        this.$state |= 2 /* isBound */;\n    }\n    ((proto) => {\n        proto.$bind = $bindView;\n        proto.$unbind = $unbindView;\n        proto.$attach = $attachView;\n        proto.$detach = $detachView;\n        proto.$cache = $cacheView;\n        proto.$mount = $mountView;\n        proto.$unmount = $unmountView;\n    })(View.prototype);\n\n    function renderStrategy(nameOrSource) {\n        return target => RenderStrategyResource.define(nameOrSource, target);\n    }\n    const RenderStrategyResource = {\n        name: 'render-strategy',\n        keyFrom(name) {\n            return `${this.name}:${name}`;\n        },\n        isType(Type) {\n            return Type.kind === this;\n        },\n        define(nameOrSource, ctor) {\n            const description = typeof nameOrSource === 'string' ? { name: nameOrSource } : nameOrSource;\n            const Type = ctor;\n            Type.kind = RenderStrategyResource;\n            Type.description = description;\n            Type.register = registerRenderStrategy;\n            return Type;\n        }\n    };\n    /*@internal*/\n    function registerRenderStrategy(container) {\n        const resourceKey = RenderStrategyResource.keyFrom(this.description.name);\n        container.register(kernel.Registration.singleton(resourceKey, this));\n    }\n    const ITemplateCompiler = kernel.DI.createInterface().noDefault();\n    (function (ViewCompileFlags) {\n        ViewCompileFlags[ViewCompileFlags[\"none\"] = 1] = \"none\";\n        ViewCompileFlags[ViewCompileFlags[\"surrogate\"] = 2] = \"surrogate\";\n        ViewCompileFlags[ViewCompileFlags[\"shadowDOM\"] = 4] = \"shadowDOM\";\n    })(exports.ViewCompileFlags || (exports.ViewCompileFlags = {}));\n    /*@internal*/\n    function $hydrateAttribute(renderingEngine) {\n        const Type = this.constructor;\n        renderingEngine.applyRuntimeBehavior(Type, this);\n        if (this.$hooks & 2 /* hasCreated */) {\n            this.created();\n        }\n    }\n    /*@internal*/\n    function $hydrateElement(renderingEngine, host, options = kernel.PLATFORM.emptyObject) {\n        const Type = this.constructor;\n        const description = Type.description;\n        this.$scope = Scope.create(this, null);\n        renderingEngine.applyRuntimeBehavior(Type, this);\n        if (this.$hooks & 1024 /* hasRender */) {\n            const result = this.render(host, options.parts);\n            if (result && 'getElementTemplate' in result) {\n                const template = result.getElementTemplate(renderingEngine, Type);\n                template.render(this, host, options.parts);\n            }\n        }\n        else {\n            const template = renderingEngine.getElementTemplate(description, Type);\n            template.render(this, host, options.parts);\n        }\n        this.$host = host;\n        this.$projector = determineProjector(this, host, description);\n        if (this.$hooks & 2 /* hasCreated */) {\n            this.created();\n        }\n    }\n    /*@internal*/\n    const defaultShadowOptions = {\n        mode: 'open'\n    };\n    function determineProjector($customElement, host, definition) {\n        if (definition.shadowOptions || definition.hasSlots) {\n            if (definition.containerless) {\n                throw kernel.Reporter.error(21);\n            }\n            return new ShadowDOMProjector($customElement, host, definition);\n        }\n        if (definition.containerless) {\n            return new ContainerlessProjector($customElement, host);\n        }\n        return new HostProjector($customElement, host);\n    }\n    const IRenderingEngine = kernel.DI.createInterface()\n        .withDefault(x => x.singleton(exports.RenderingEngine));\n    const defaultCompilerName = 'default';\n    exports.RenderingEngine = \n    /*@internal*/\n    class RenderingEngine {\n        constructor(container, lifecycle, observerLocator, eventManager, parser, templateCompilers) {\n            this.container = container;\n            this.lifecycle = lifecycle;\n            this.observerLocator = observerLocator;\n            this.eventManager = eventManager;\n            this.parser = parser;\n            this.templateLookup = new Map();\n            this.factoryLookup = new Map();\n            this.behaviorLookup = new Map();\n            this.compilers = templateCompilers.reduce((acc, item) => {\n                acc[item.name] = item;\n                return acc;\n            }, Object.create(null));\n        }\n        getElementTemplate(definition, componentType) {\n            if (!definition) {\n                return null;\n            }\n            let found = this.templateLookup.get(definition);\n            if (!found) {\n                found = this.templateFromSource(definition);\n                //If the element has a view, support Recursive Components by adding self to own view template container.\n                if (found.renderContext !== null && componentType) {\n                    componentType.register(found.renderContext);\n                }\n                this.templateLookup.set(definition, found);\n            }\n            return found;\n        }\n        getViewFactory(definition, parentContext) {\n            if (!definition) {\n                return null;\n            }\n            let factory = this.factoryLookup.get(definition);\n            if (!factory) {\n                const validSource = buildTemplateDefinition(null, definition);\n                const template = this.templateFromSource(validSource, parentContext);\n                factory = new ViewFactory(validSource.name, template, this.lifecycle);\n                factory.setCacheSize(validSource.cache, true);\n                this.factoryLookup.set(definition, factory);\n            }\n            return factory;\n        }\n        applyRuntimeBehavior(Type, instance) {\n            let found = this.behaviorLookup.get(Type);\n            if (!found) {\n                found = RuntimeBehavior.create(Type, instance);\n                this.behaviorLookup.set(Type, found);\n            }\n            found.applyTo(instance, this.lifecycle);\n        }\n        createRenderer(context) {\n            return new Renderer(context, this.observerLocator, this.eventManager, this.parser, this);\n        }\n        templateFromSource(definition, parentContext) {\n            parentContext = parentContext || this.container;\n            if (definition && definition.template) {\n                if (definition.build.required) {\n                    const compilerName = definition.build.compiler || defaultCompilerName;\n                    const compiler = this.compilers[compilerName];\n                    if (!compiler) {\n                        throw kernel.Reporter.error(20, compilerName);\n                    }\n                    definition = compiler.compile(definition, new RuntimeCompilationResources(parentContext), exports.ViewCompileFlags.surrogate);\n                }\n                return new CompiledTemplate(this, parentContext, definition);\n            }\n            return noViewTemplate;\n        }\n    };\n    exports.RenderingEngine = __decorate([\n        kernel.inject(kernel.IContainer, ILifecycle, IObserverLocator, IEventManager, IExpressionParser, kernel.all(ITemplateCompiler))\n        /*@internal*/\n    ], exports.RenderingEngine);\n    const childObserverOptions$1 = { childList: true };\n    /*@internal*/\n    class ShadowDOMProjector {\n        constructor($customElement, host, definition) {\n            this.host = host;\n            this.shadowRoot = DOM.attachShadow(host, definition.shadowOptions || defaultShadowOptions);\n            host.$customElement = $customElement;\n            this.shadowRoot.$customElement = $customElement;\n        }\n        get children() {\n            return this.host.childNodes;\n        }\n        subscribeToChildrenChange(callback) {\n            DOM.createNodeObserver(this.host, callback, childObserverOptions$1);\n        }\n        provideEncapsulationSource(parentEncapsulationSource) {\n            return this.shadowRoot;\n        }\n        project(nodes) {\n            nodes.appendTo(this.host);\n            this.project = kernel.PLATFORM.noop;\n        }\n        take(nodes) {\n            // No special behavior is required because the host element removal\n            // will result in the projected nodes being removed, since they are in\n            // the ShadowDOM.\n        }\n    }\n    /*@internal*/\n    class ContainerlessProjector {\n        constructor($customElement, host) {\n            this.$customElement = $customElement;\n            if (host.childNodes.length) {\n                this.childNodes = kernel.PLATFORM.toArray(host.childNodes);\n            }\n            else {\n                this.childNodes = kernel.PLATFORM.emptyArray;\n            }\n            this.host = DOM.convertToRenderLocation(host);\n            this.host.$customElement = $customElement;\n        }\n        get children() {\n            return this.childNodes;\n        }\n        subscribeToChildrenChange(callback) {\n            // Do nothing since this scenario will never have children.\n        }\n        provideEncapsulationSource(parentEncapsulationSource) {\n            if (!parentEncapsulationSource) {\n                throw kernel.Reporter.error(22);\n            }\n            return parentEncapsulationSource;\n        }\n        project(nodes) {\n            if (this.$customElement.$state & 256 /* needsMount */) {\n                this.$customElement.$state &= ~256 /* needsMount */;\n                nodes.insertBefore(this.host);\n            }\n        }\n        take(nodes) {\n            this.$customElement.$state |= 256 /* needsMount */;\n            nodes.remove();\n        }\n    }\n    /*@internal*/\n    class HostProjector {\n        constructor($customElement, host) {\n            this.host = host;\n            host.$customElement = $customElement;\n            this.isAppHost = host.hasOwnProperty('$au');\n        }\n        get children() {\n            return kernel.PLATFORM.emptyArray;\n        }\n        subscribeToChildrenChange(callback) {\n            // Do nothing since this scenario will never have children.\n        }\n        provideEncapsulationSource(parentEncapsulationSource) {\n            return parentEncapsulationSource || this.host;\n        }\n        project(nodes) {\n            nodes.appendTo(this.host);\n            if (!this.isAppHost) {\n                this.project = kernel.PLATFORM.noop;\n            }\n        }\n        take(nodes) {\n            // No special behavior is required because the host element removal\n            // will result in the projected nodes being removed, since they are children.\n            if (this.isAppHost) {\n                // The only exception to that is the app host, which is not part of a removable node sequence\n                nodes.remove();\n            }\n        }\n    }\n    /** @internal */\n    class RuntimeBehavior {\n        constructor() { }\n        static create(Component, instance) {\n            const behavior = new RuntimeBehavior();\n            behavior.bindables = Component.description.bindables;\n            return behavior;\n        }\n        applyTo(instance, lifecycle) {\n            instance.$lifecycle = lifecycle;\n            if ('$projector' in instance) {\n                this.applyToElement(lifecycle, instance);\n            }\n            else {\n                this.applyToCore(instance);\n            }\n        }\n        applyToElement(lifecycle, instance) {\n            const observers = this.applyToCore(instance);\n            observers.$children = new exports.ChildrenObserver(lifecycle, instance);\n            Reflect.defineProperty(instance, '$children', {\n                enumerable: false,\n                get: function () {\n                    return this.$observers.$children.getValue();\n                }\n            });\n        }\n        applyToCore(instance) {\n            const observers = {};\n            const bindables = this.bindables;\n            const observableNames = Object.getOwnPropertyNames(bindables);\n            for (let i = 0, ii = observableNames.length; i < ii; ++i) {\n                const name = observableNames[i];\n                observers[name] = new exports.Observer(instance, name, bindables[name].callback);\n                createGetterSetter(instance, name);\n            }\n            Reflect.defineProperty(instance, '$observers', {\n                enumerable: false,\n                value: observers\n            });\n            return observers;\n        }\n    }\n    function createGetterSetter(instance, name) {\n        Reflect.defineProperty(instance, name, {\n            enumerable: true,\n            get: function () { return this.$observers[name].getValue(); },\n            set: function (value) { this.$observers[name].setValue(value, exports.LifecycleFlags.updateTargetInstance); }\n        });\n    }\n    /*@internal*/\n    exports.ChildrenObserver = class ChildrenObserver {\n        constructor(lifecycle, customElement) {\n            this.lifecycle = lifecycle;\n            this.customElement = customElement;\n            this.hasChanges = false;\n            this.children = null;\n            this.observing = false;\n        }\n        getValue() {\n            if (!this.observing) {\n                this.observing = true;\n                this.customElement.$projector.subscribeToChildrenChange(() => this.onChildrenChanged());\n                this.children = findElements(this.customElement.$projector.children);\n            }\n            return this.children;\n        }\n        setValue(newValue) { }\n        flush(flags) {\n            this.callSubscribers(this.children, undefined, flags | exports.LifecycleFlags.updateTargetInstance);\n            this.hasChanges = false;\n        }\n        subscribe(subscriber) {\n            this.addSubscriber(subscriber);\n        }\n        unsubscribe(subscriber) {\n            this.removeSubscriber(subscriber);\n        }\n        onChildrenChanged() {\n            this.children = findElements(this.customElement.$projector.children);\n            if ('$childrenChanged' in this.customElement) {\n                this.customElement.$childrenChanged();\n            }\n            this.lifecycle.enqueueFlush(this);\n            this.hasChanges = true;\n        }\n    };\n    exports.ChildrenObserver = __decorate([\n        subscriberCollection(exports.MutationKind.instance)\n    ], exports.ChildrenObserver);\n    /*@internal*/\n    function findElements(nodes) {\n        const components = [];\n        for (let i = 0, ii = nodes.length; i < ii; ++i) {\n            const current = nodes[i];\n            const component = customElementBehavior(current);\n            if (component !== null) {\n                components.push(component);\n            }\n        }\n        return components;\n    }\n    /*@internal*/\n    class RuntimeCompilationResources {\n        constructor(context) {\n            this.context = context;\n        }\n        find(kind, name) {\n            const key = kind.keyFrom(name);\n            const resolver = this.context.getResolver(key, false);\n            if (resolver !== null && resolver.getFactory) {\n                const factory = resolver.getFactory(this.context);\n                if (factory !== null) {\n                    return factory.type.description || null;\n                }\n            }\n            return null;\n        }\n        create(kind, name) {\n            const key = kind.keyFrom(name);\n            if (this.context.has(key, false)) {\n                return this.context.get(key) || null;\n            }\n            return null;\n        }\n    }\n    // This is the main implementation of ITemplate.\n    // It is used to create instances of IView based on a compiled TemplateDefinition.\n    // TemplateDefinitions are hand-coded today, but will ultimately be the output of the\n    // TemplateCompiler either through a JIT or AOT process.\n    // Essentially, CompiledTemplate wraps up the small bit of code that is needed to take a TemplateDefinition\n    // and create instances of it on demand.\n    /*@internal*/\n    class CompiledTemplate {\n        constructor(renderingEngine, parentRenderContext, templateDefinition) {\n            this.templateDefinition = templateDefinition;\n            this.factory = NodeSequenceFactory.createFor(templateDefinition.template);\n            this.renderContext = createRenderContext(renderingEngine, parentRenderContext, templateDefinition.dependencies);\n        }\n        render(renderable, host, parts) {\n            const nodes = renderable.$nodes = this.factory.createNodeSequence();\n            renderable.$context = this.renderContext;\n            this.renderContext.render(renderable, nodes.findTargets(), this.templateDefinition, host, parts);\n        }\n    }\n    // This is an implementation of ITemplate that always returns a node sequence representing \"no DOM\" to render.\n    /*@internal*/\n    const noViewTemplate = {\n        renderContext: null,\n        render(renderable) {\n            renderable.$nodes = NodeSequence.empty;\n            renderable.$context = null;\n        }\n    };\n    function createRenderContext(renderingEngine, parentRenderContext, dependencies) {\n        const context = parentRenderContext.createChild();\n        const renderableProvider = new InstanceProvider();\n        const elementProvider = new InstanceProvider();\n        const instructionProvider = new InstanceProvider();\n        const factoryProvider = new ViewFactoryProvider(renderingEngine);\n        const renderLocationProvider = new InstanceProvider();\n        const renderer = renderingEngine.createRenderer(context);\n        DOM.registerElementResolver(context, elementProvider);\n        context.registerResolver(IViewFactory, factoryProvider);\n        context.registerResolver(IRenderable, renderableProvider);\n        context.registerResolver(ITargetedInstruction, instructionProvider);\n        context.registerResolver(IRenderLocation, renderLocationProvider);\n        if (dependencies) {\n            context.register(...dependencies);\n        }\n        context.render = function (renderable, targets, templateDefinition, host, parts) {\n            renderer.render(renderable, targets, templateDefinition, host, parts);\n        };\n        context.beginComponentOperation = function (renderable, target, instruction, factory, parts, location) {\n            renderableProvider.prepare(renderable);\n            elementProvider.prepare(target);\n            instructionProvider.prepare(instruction);\n            if (factory) {\n                factoryProvider.prepare(factory, parts);\n            }\n            if (location) {\n                renderLocationProvider.prepare(location);\n            }\n            return context;\n        };\n        context.dispose = function () {\n            factoryProvider.dispose();\n            renderableProvider.dispose();\n            instructionProvider.dispose();\n            elementProvider.dispose();\n            renderLocationProvider.dispose();\n        };\n        return context;\n    }\n    /*@internal*/\n    class InstanceProvider {\n        constructor() {\n            this.instance = null;\n        }\n        prepare(instance) {\n            this.instance = instance;\n        }\n        resolve(handler, requestor) {\n            if (this.instance === undefined) { // unmet precondition: call prepare\n                throw kernel.Reporter.error(50); // TODO: organize error codes\n            }\n            return this.instance;\n        }\n        dispose() {\n            this.instance = null;\n        }\n    }\n    /*@internal*/\n    class ViewFactoryProvider {\n        constructor(renderingEngine) {\n            this.renderingEngine = renderingEngine;\n        }\n        prepare(factory, parts) {\n            this.factory = factory;\n            this.replacements = parts || kernel.PLATFORM.emptyObject;\n        }\n        resolve(handler, requestor) {\n            const factory = this.factory;\n            if (factory === undefined) { // unmet precondition: call prepare\n                throw kernel.Reporter.error(50); // TODO: organize error codes\n            }\n            if (!factory.name || !factory.name.length) { // unmet invariant: factory must have a name\n                throw kernel.Reporter.error(51); // TODO: organize error codes\n            }\n            const found = this.replacements[factory.name];\n            if (found) {\n                return this.renderingEngine.getViewFactory(found, requestor);\n            }\n            return this.factory;\n        }\n        dispose() {\n            this.factory = null;\n            this.replacements = null;\n        }\n    }\n    function addBindable(renderable, bindable) {\n        bindable.$prevBind = renderable.$bindableTail;\n        bindable.$nextBind = null;\n        if (renderable.$bindableTail === null) {\n            renderable.$bindableHead = bindable;\n        }\n        else {\n            renderable.$bindableTail.$nextBind = bindable;\n        }\n        renderable.$bindableTail = bindable;\n    }\n    function addAttachable(renderable, attachable) {\n        attachable.$prevAttach = renderable.$attachableTail;\n        attachable.$nextAttach = null;\n        if (renderable.$attachableTail === null) {\n            renderable.$attachableHead = attachable;\n        }\n        else {\n            renderable.$attachableTail.$nextAttach = attachable;\n        }\n        renderable.$attachableTail = attachable;\n    }\n    // tslint:disable:function-name\n    // tslint:disable:no-any\n    /* @internal */\n    class Renderer {\n        constructor(context, observerLocator, eventManager, parser, renderingEngine) {\n            this.context = context;\n            this.observerLocator = observerLocator;\n            this.eventManager = eventManager;\n            this.parser = parser;\n            this.renderingEngine = renderingEngine;\n        }\n        render(renderable, targets, definition, host, parts) {\n            const targetInstructions = definition.instructions;\n            if (targets.length !== targetInstructions.length) {\n                if (targets.length > targetInstructions.length) {\n                    throw kernel.Reporter.error(30);\n                }\n                else {\n                    throw kernel.Reporter.error(31);\n                }\n            }\n            for (let i = 0, ii = targets.length; i < ii; ++i) {\n                const instructions = targetInstructions[i];\n                const target = targets[i];\n                for (let j = 0, jj = instructions.length; j < jj; ++j) {\n                    const current = instructions[j];\n                    this[current.type](renderable, target, current, parts);\n                }\n            }\n            if (host) {\n                const surrogateInstructions = definition.surrogates;\n                for (let i = 0, ii = surrogateInstructions.length; i < ii; ++i) {\n                    const current = surrogateInstructions[i];\n                    this[current.type](renderable, host, current, parts);\n                }\n            }\n        }\n        hydrateElementInstance(renderable, target, instruction, component) {\n            const childInstructions = instruction.instructions;\n            component.$hydrate(this.renderingEngine, target, instruction);\n            for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n                const current = childInstructions[i];\n                const currentType = current.type;\n                this[currentType](renderable, component, current);\n            }\n            addBindable(renderable, component);\n            addAttachable(renderable, component);\n        }\n        [\"a\" /* textBinding */](renderable, target, instruction) {\n            const next = target.nextSibling;\n            DOM.treatAsNonWhitespace(next);\n            DOM.remove(target);\n            const $from = instruction.from;\n            const expr = ($from.$kind ? $from : this.parser.parse($from, 2048 /* Interpolation */));\n            if (expr.isMulti) {\n                addBindable(renderable, new MultiInterpolationBinding(this.observerLocator, expr, next, 'textContent', exports.BindingMode.toView, this.context));\n            }\n            else {\n                addBindable(renderable, new exports.InterpolationBinding(expr.firstExpression, expr, next, 'textContent', exports.BindingMode.toView, this.observerLocator, this.context, true));\n            }\n        }\n        [\"b\" /* interpolation */](renderable, target, instruction) {\n            const $from = instruction.from;\n            const expr = ($from.$kind ? $from : this.parser.parse($from, 2048 /* Interpolation */));\n            if (expr.isMulti) {\n                addBindable(renderable, new MultiInterpolationBinding(this.observerLocator, expr, target, instruction.to, exports.BindingMode.toView, this.context));\n            }\n            else {\n                addBindable(renderable, new exports.InterpolationBinding(expr.firstExpression, expr, target, instruction.to, exports.BindingMode.toView, this.observerLocator, this.context, true));\n            }\n        }\n        [\"c\" /* propertyBinding */](renderable, target, instruction) {\n            const $from = instruction.from;\n            addBindable(renderable, new exports.Binding($from.$kind ? $from : this.parser.parse($from, 48 /* IsPropertyCommand */ | instruction.mode), target, instruction.to, instruction.mode, this.observerLocator, this.context));\n        }\n        [\"d\" /* iteratorBinding */](renderable, target, instruction) {\n            const $from = instruction.from;\n            addBindable(renderable, new exports.Binding($from.$kind ? $from : this.parser.parse($from, 539 /* ForCommand */), target, instruction.to, exports.BindingMode.toView, this.observerLocator, this.context));\n        }\n        [\"e\" /* listenerBinding */](renderable, target, instruction) {\n            const $from = instruction.from;\n            addBindable(renderable, new Listener(instruction.to, instruction.strategy, $from.$kind ? $from : this.parser.parse($from, 80 /* IsEventCommand */ | (instruction.strategy + 6 /* DelegationStrategyDelta */)), target, instruction.preventDefault, this.eventManager, this.context));\n        }\n        [\"f\" /* callBinding */](renderable, target, instruction) {\n            const $from = instruction.from;\n            addBindable(renderable, new Call($from.$kind ? $from : this.parser.parse($from, 153 /* CallCommand */), target, instruction.to, this.observerLocator, this.context));\n        }\n        [\"g\" /* refBinding */](renderable, target, instruction) {\n            const $from = instruction.from;\n            addBindable(renderable, new Ref($from.$kind ? $from : this.parser.parse($from, 1280 /* IsRef */), target, this.context));\n        }\n        [\"h\" /* stylePropertyBinding */](renderable, target, instruction) {\n            const $from = instruction.from;\n            addBindable(renderable, new exports.Binding($from.$kind ? $from : this.parser.parse($from, 48 /* IsPropertyCommand */ | exports.BindingMode.toView), target.style, instruction.to, exports.BindingMode.toView, this.observerLocator, this.context));\n        }\n        [\"i\" /* setProperty */](renderable, target, instruction) {\n            target[instruction.to] = instruction.value;\n        }\n        [\"j\" /* setAttribute */](renderable, target, instruction) {\n            DOM.setAttribute(target, instruction.to, instruction.value);\n        }\n        [\"k\" /* hydrateElement */](renderable, target, instruction) {\n            const context = this.context;\n            const operation = context.beginComponentOperation(renderable, target, instruction, null, null, target, true);\n            const component = context.get(customElementKey(instruction.res));\n            this.hydrateElementInstance(renderable, target, instruction, component);\n            operation.dispose();\n        }\n        [\"l\" /* hydrateAttribute */](renderable, target, instruction) {\n            const childInstructions = instruction.instructions;\n            const context = this.context;\n            const operation = context.beginComponentOperation(renderable, target, instruction);\n            const component = context.get(customAttributeKey(instruction.res));\n            component.$hydrate(this.renderingEngine);\n            for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n                const current = childInstructions[i];\n                this[current.type](renderable, component, current);\n            }\n            addBindable(renderable, component);\n            addAttachable(renderable, component);\n            operation.dispose();\n        }\n        [\"m\" /* hydrateTemplateController */](renderable, target, instruction, parts) {\n            const childInstructions = instruction.instructions;\n            const factory = this.renderingEngine.getViewFactory(instruction.def, this.context);\n            const context = this.context;\n            const operation = context.beginComponentOperation(renderable, target, instruction, factory, parts, DOM.convertToRenderLocation(target), false);\n            const component = context.get(customAttributeKey(instruction.res));\n            component.$hydrate(this.renderingEngine);\n            if (instruction.link) {\n                component.link(renderable.$attachableTail);\n            }\n            for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n                const current = childInstructions[i];\n                this[current.type](renderable, component, current);\n            }\n            addBindable(renderable, component);\n            addAttachable(renderable, component);\n            operation.dispose();\n        }\n        [\"z\" /* renderStrategy */](renderable, target, instruction) {\n            const strategyName = instruction.name;\n            if (this[strategyName] === undefined) {\n                const strategy = this.context.get(RenderStrategyResource.keyFrom(strategyName));\n                if (strategy === null || strategy === undefined) {\n                    throw new Error(`Unknown renderStrategy \"${strategyName}\"`);\n                }\n                this[strategyName] = strategy.render.bind(strategy);\n            }\n            this[strategyName](renderable, target, instruction);\n        }\n        [\"n\" /* letElement */](renderable, target, instruction) {\n            target.remove();\n            const childInstructions = instruction.instructions;\n            const toViewModel = instruction.toViewModel;\n            for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n                const childInstruction = childInstructions[i];\n                const $from = childInstruction.from;\n                addBindable(renderable, new exports.LetBinding($from.$kind ? $from : this.parser.parse($from, 48 /* IsPropertyCommand */), childInstruction.to, this.observerLocator, this.context, toViewModel));\n            }\n        }\n    }\n\n    /**\n     * Decorator: Indicates that the decorated class is a custom element.\n     */\n    function customElement(nameOrSource) {\n        return target => CustomElementResource.define(nameOrSource, target);\n    }\n    function useShadowDOM(targetOrOptions) {\n        const options = typeof targetOrOptions === 'function' || !targetOrOptions\n            ? defaultShadowOptions\n            : targetOrOptions;\n        function useShadowDOMDecorator(target) {\n            target.shadowOptions = options;\n            return target;\n        }\n        return typeof targetOrOptions === 'function' ? useShadowDOMDecorator(targetOrOptions) : useShadowDOMDecorator;\n    }\n    function containerlessDecorator(target) {\n        target.containerless = true;\n        return target;\n    }\n    function containerless(target) {\n        return target === undefined ? containerlessDecorator : containerlessDecorator(target);\n    }\n    const CustomElementResource = {\n        name: customElementName,\n        keyFrom: customElementKey,\n        isType(Type) {\n            return Type.kind === this;\n        },\n        behaviorFor: customElementBehavior,\n        define(nameOrSource, ctor = null) {\n            if (!nameOrSource) {\n                throw kernel.Reporter.error(70);\n            }\n            const Type = (ctor === null ? class HTMLOnlyElement {\n            } : ctor);\n            const description = buildTemplateDefinition(Type, nameOrSource);\n            const proto = Type.prototype;\n            Type.kind = CustomElementResource;\n            Type.description = description;\n            Type.register = registerElement;\n            proto.$hydrate = $hydrateElement;\n            proto.$bind = $bindElement;\n            proto.$attach = $attachElement;\n            proto.$detach = $detachElement;\n            proto.$unbind = $unbindElement;\n            proto.$cache = $cacheElement;\n            proto.$prevBind = null;\n            proto.$nextBind = null;\n            proto.$prevAttach = null;\n            proto.$nextAttach = null;\n            proto.$nextUnbindAfterDetach = null;\n            proto.$scope = null;\n            proto.$hooks = 0;\n            proto.$state = 256 /* needsMount */;\n            proto.$bindableHead = null;\n            proto.$bindableTail = null;\n            proto.$attachableHead = null;\n            proto.$attachableTail = null;\n            proto.$mount = $mountElement;\n            proto.$unmount = $unmountElement;\n            proto.$nextMount = null;\n            proto.$nextUnmount = null;\n            proto.$projector = null;\n            if ('flush' in proto) {\n                proto.$nextFlush = null;\n            }\n            if ('binding' in proto)\n                proto.$hooks |= 4 /* hasBinding */;\n            if ('bound' in proto) {\n                proto.$hooks |= 8 /* hasBound */;\n                proto.$nextBound = null;\n            }\n            if ('unbinding' in proto)\n                proto.$hooks |= 256 /* hasUnbinding */;\n            if ('unbound' in proto) {\n                proto.$hooks |= 512 /* hasUnbound */;\n                proto.$nextUnbound = null;\n            }\n            if ('render' in proto)\n                proto.$hooks |= 1024 /* hasRender */;\n            if ('created' in proto)\n                proto.$hooks |= 2 /* hasCreated */;\n            if ('attaching' in proto)\n                proto.$hooks |= 16 /* hasAttaching */;\n            if ('attached' in proto) {\n                proto.$hooks |= 32 /* hasAttached */;\n                proto.$nextAttached = null;\n            }\n            if ('detaching' in proto)\n                proto.$hooks |= 64 /* hasDetaching */;\n            if ('caching' in proto)\n                proto.$hooks |= 2048 /* hasCaching */;\n            if ('detached' in proto) {\n                proto.$hooks |= 128 /* hasDetached */;\n                proto.$nextDetached = null;\n            }\n            return Type;\n        }\n    };\n    /*@internal*/\n    function registerElement(container) {\n        const resourceKey = CustomElementResource.keyFrom(this.description.name);\n        container.register(kernel.Registration.transient(resourceKey, this));\n    }\n    // tslint:enable:align\n    // TODO\n    // ## DefaultSlotProjector\n    // An implementation of IElementProjector that can handle a subset of default\n    // slot projection scenarios without needing real Shadow DOM.\n    // ### Conditions\n    // We can do a one-time, static composition of the content and view,\n    // to emulate shadow DOM, if the following constraints are met:\n    // * There must be exactly one slot and it must be a default slot.\n    // * The default slot must not have any fallback content.\n    // * The default slot must not have a custom element as its immediate parent or\n    //   a slot attribute (re-projection).\n    // ### Projection\n    // The projector copies all content nodes to the slot's location.\n    // The copy process should inject a comment node before and after the slotted\n    // content, so that the bounds of the content can be clearly determined,\n    // even if the slotted content has template controllers or string interpolation.\n    // ### Encapsulation Source\n    // Uses the same strategy as HostProjector.\n    // ### Children\n    // The projector adds a mutation observer to the parent node of the\n    // slot comment. When direct children of that node change, the projector\n    // will gather up all nodes between the start and end slot comments.\n\n    const composeSource = {\n        name: 'au-compose',\n        containerless: true\n    };\n    const composeProps = ['subject', 'composing'];\n    exports.Compose = class Compose {\n        constructor(renderable, instruction, renderingEngine, coordinator) {\n            this.renderable = renderable;\n            this.renderingEngine = renderingEngine;\n            this.coordinator = coordinator;\n            this.subject = null;\n            this.composing = false;\n            this.properties = null;\n            this.lastSubject = null;\n            this.coordinator.onSwapComplete = () => {\n                this.composing = false;\n            };\n            this.properties = instruction.instructions\n                .filter((x) => !composeProps.includes(x.to))\n                .reduce((acc, item) => {\n                if (item.to) {\n                    acc[item.to] = item;\n                }\n                return acc;\n            }, {});\n        }\n        binding(flags) {\n            this.startComposition(this.subject, undefined, flags);\n            this.coordinator.binding(flags, this.$scope);\n        }\n        attaching(flags) {\n            this.coordinator.attaching(flags);\n        }\n        detaching(flags) {\n            this.coordinator.detaching(flags);\n        }\n        unbinding(flags) {\n            this.lastSubject = null;\n            this.coordinator.unbinding(flags);\n        }\n        caching(flags) {\n            this.coordinator.caching(flags);\n        }\n        subjectChanged(newValue, previousValue, flags) {\n            this.startComposition(newValue, previousValue, flags);\n        }\n        startComposition(subject, previousSubject, flags) {\n            if (this.lastSubject === subject) {\n                return;\n            }\n            this.lastSubject = subject;\n            if (subject instanceof Promise) {\n                subject = subject.then(x => this.resolveView(x, flags));\n            }\n            else {\n                subject = this.resolveView(subject, flags);\n            }\n            this.composing = true;\n            this.coordinator.compose(subject, flags);\n        }\n        resolveView(subject, flags) {\n            const view = this.provideViewFor(subject);\n            if (view) {\n                view.hold(this.$projector.host, flags);\n                view.lockScope(this.renderable.$scope);\n                return view;\n            }\n            return null;\n        }\n        provideViewFor(subject) {\n            if (!subject) {\n                return null;\n            }\n            if ('lockScope' in subject) { // IView\n                return subject;\n            }\n            if ('createView' in subject) { // RenderPlan\n                return subject.createView(this.renderingEngine, this.renderable.$context);\n            }\n            if ('create' in subject) { // IViewFactory\n                return subject.create();\n            }\n            if ('template' in subject) { // Raw Template Definition\n                return this.renderingEngine.getViewFactory(subject, this.renderable.$context).create();\n            }\n            // Constructable (Custom Element Constructor)\n            return createElement(subject, this.properties, this.$projector.children).createView(this.renderingEngine, this.renderable.$context);\n        }\n    };\n    __decorate([\n        bindable\n    ], exports.Compose.prototype, \"subject\", void 0);\n    __decorate([\n        bindable\n    ], exports.Compose.prototype, \"composing\", void 0);\n    exports.Compose = __decorate([\n        customElement(composeSource),\n        kernel.inject(IRenderable, ITargetedInstruction, IRenderingEngine, exports.CompositionCoordinator)\n    ], exports.Compose);\n\n    /**\n     * Decorator: Indicates that the decorated class is a custom attribute.\n     */\n    function customAttribute(nameOrDef) {\n        return target => CustomAttributeResource.define(nameOrDef, target);\n    }\n    /**\n     * Decorator: Applied to custom attributes. Indicates that whatever element the\n     * attribute is placed on should be converted into a template and that this\n     * attribute controls the instantiation of the template.\n     */\n    function templateController(nameOrDef) {\n        return target => CustomAttributeResource.define(typeof nameOrDef === 'string'\n            ? { isTemplateController: true, name: nameOrDef }\n            : Object.assign({ isTemplateController: true }, nameOrDef), target);\n    }\n    const CustomAttributeResource = {\n        name: customAttributeName,\n        keyFrom: customAttributeKey,\n        isType(Type) {\n            return Type.kind === this;\n        },\n        define(nameOrSource, ctor) {\n            const Type = ctor;\n            const description = createCustomAttributeDescription(typeof nameOrSource === 'string' ? { name: nameOrSource } : nameOrSource, Type);\n            const proto = Type.prototype;\n            Type.kind = CustomAttributeResource;\n            Type.description = description;\n            Type.register = registerAttribute;\n            proto.$hydrate = $hydrateAttribute;\n            proto.$bind = $bindAttribute;\n            proto.$attach = $attachAttribute;\n            proto.$detach = $detachAttribute;\n            proto.$unbind = $unbindAttribute;\n            proto.$cache = $cacheAttribute;\n            proto.$prevBind = null;\n            proto.$nextBind = null;\n            proto.$prevAttach = null;\n            proto.$nextAttach = null;\n            proto.$nextUnbindAfterDetach = null;\n            proto.$scope = null;\n            proto.$hooks = 0;\n            proto.$state = 0;\n            if ('flush' in proto) {\n                proto.$nextFlush = null;\n            }\n            if ('binding' in proto)\n                proto.$hooks |= 4 /* hasBinding */;\n            if ('bound' in proto) {\n                proto.$hooks |= 8 /* hasBound */;\n                proto.$nextBound = null;\n            }\n            if ('unbinding' in proto)\n                proto.$hooks |= 256 /* hasUnbinding */;\n            if ('unbound' in proto) {\n                proto.$hooks |= 512 /* hasUnbound */;\n                proto.$nextUnbound = null;\n            }\n            if ('created' in proto)\n                proto.$hooks |= 2 /* hasCreated */;\n            if ('attaching' in proto)\n                proto.$hooks |= 16 /* hasAttaching */;\n            if ('attached' in proto) {\n                proto.$hooks |= 32 /* hasAttached */;\n                proto.$nextAttached = null;\n            }\n            if ('detaching' in proto)\n                proto.$hooks |= 64 /* hasDetaching */;\n            if ('caching' in proto)\n                proto.$hooks |= 2048 /* hasCaching */;\n            if ('detached' in proto) {\n                proto.$hooks |= 128 /* hasDetached */;\n                proto.$nextDetached = null;\n            }\n            return Type;\n        }\n    };\n    /*@internal*/\n    function registerAttribute(container) {\n        const description = this.description;\n        const resourceKey = CustomAttributeResource.keyFrom(description.name);\n        const aliases = description.aliases;\n        container.register(kernel.Registration.transient(resourceKey, this));\n        for (let i = 0, ii = aliases.length; i < ii; ++i) {\n            const aliasKey = CustomAttributeResource.keyFrom(aliases[i]);\n            container.register(kernel.Registration.alias(resourceKey, aliasKey));\n        }\n    }\n    /*@internal*/\n    function createCustomAttributeDescription(def, Type) {\n        return {\n            name: def.name,\n            aliases: def.aliases || kernel.PLATFORM.emptyArray,\n            defaultBindingMode: def.defaultBindingMode || exports.BindingMode.toView,\n            isTemplateController: def.isTemplateController || false,\n            bindables: Object.assign({}, Type.bindables, def.bindables)\n        };\n    }\n\n    exports.If = class If {\n        constructor(ifFactory, location, coordinator) {\n            this.ifFactory = ifFactory;\n            this.location = location;\n            this.coordinator = coordinator;\n            this.value = false;\n            this.elseFactory = null;\n            this.ifView = null;\n            this.elseView = null;\n        }\n        binding(flags) {\n            const view = this.updateView(flags);\n            this.coordinator.compose(view, flags);\n            this.coordinator.binding(flags, this.$scope);\n        }\n        attaching(flags) {\n            this.coordinator.attaching(flags);\n        }\n        detaching(flags) {\n            this.coordinator.detaching(flags);\n        }\n        unbinding(flags) {\n            this.coordinator.unbinding(flags);\n        }\n        caching(flags) {\n            if (this.ifView !== null && this.ifView.release(flags)) {\n                this.ifView = null;\n            }\n            if (this.elseView !== null && this.elseView.release(flags)) {\n                this.elseView = null;\n            }\n            this.coordinator.caching(flags);\n        }\n        valueChanged(newValue, oldValue, flags) {\n            if (flags & exports.LifecycleFlags.fromFlush) {\n                const view = this.updateView(flags);\n                this.coordinator.compose(view, flags);\n            }\n            else {\n                this.$lifecycle.enqueueFlush(this);\n            }\n        }\n        flush(flags) {\n            const view = this.updateView(flags);\n            this.coordinator.compose(view, flags);\n        }\n        /*@internal*/\n        updateView(flags) {\n            let view;\n            if (this.value) {\n                view = this.ifView = this.ensureView(this.ifView, this.ifFactory, flags);\n            }\n            else if (this.elseFactory !== null) {\n                view = this.elseView = this.ensureView(this.elseView, this.elseFactory, flags);\n            }\n            else {\n                view = null;\n            }\n            return view;\n        }\n        /*@internal*/\n        ensureView(view, factory, flags) {\n            if (view === null) {\n                view = factory.create();\n            }\n            view.hold(this.location, flags);\n            return view;\n        }\n    };\n    __decorate([\n        bindable\n    ], exports.If.prototype, \"value\", void 0);\n    exports.If = __decorate([\n        templateController('if'),\n        kernel.inject(IViewFactory, IRenderLocation, exports.CompositionCoordinator)\n    ], exports.If);\n    exports.Else = class Else {\n        constructor(factory) {\n            this.factory = factory;\n        }\n        link(ifBehavior) {\n            ifBehavior.elseFactory = this.factory;\n        }\n    };\n    exports.Else = __decorate([\n        templateController('else'),\n        kernel.inject(IViewFactory)\n    ], exports.Else);\n\n    exports.Repeat = class Repeat {\n        constructor(location, renderable, factory) {\n            this.location = location;\n            this.renderable = renderable;\n            this.factory = factory;\n            this.encapsulationSource = null;\n            this.views = [];\n            this.observer = null;\n            this.hasPendingInstanceMutation = false;\n        }\n        binding(flags) {\n            this.checkCollectionObserver();\n        }\n        bound(flags) {\n            let current = this.renderable.$bindableHead;\n            while (current !== null) {\n                if (current.target === this && current.targetProperty === 'items') {\n                    this.forOf = current.sourceExpression;\n                    break;\n                }\n                current = current.$nextBind;\n            }\n            this.local = this.forOf.declaration.evaluate(flags, this.$scope, null);\n            this.processViews(null, flags);\n        }\n        attaching(flags) {\n            const { views, location } = this;\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const view = views[i];\n                view.hold(location, flags);\n                view.$attach(flags);\n            }\n        }\n        detaching(flags) {\n            const { views } = this;\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const view = views[i];\n                view.$detach(flags);\n                view.release(flags);\n            }\n        }\n        unbound(flags) {\n            this.checkCollectionObserver();\n            const { views } = this;\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const view = views[i];\n                view.$unbind(flags);\n            }\n        }\n        // called by SetterObserver (sync)\n        itemsChanged(newValue, oldValue, flags) {\n            this.checkCollectionObserver();\n            this.processViews(null, flags | exports.LifecycleFlags.updateTargetInstance);\n        }\n        // called by a CollectionObserver (async)\n        handleBatchedChange(indexMap) {\n            this.processViews(indexMap, exports.LifecycleFlags.fromFlush | exports.LifecycleFlags.updateTargetInstance);\n        }\n        // if the indexMap === null, it is an instance mutation, otherwise it's an items mutation\n        processViews(indexMap, flags) {\n            const { views, $lifecycle } = this;\n            if (this.$state & 2 /* isBound */) {\n                const { local, $scope, factory, forOf, items } = this;\n                const oldLength = views.length;\n                const newLength = forOf.count(items);\n                if (oldLength < newLength) {\n                    views.length = newLength;\n                    for (let i = oldLength; i < newLength; ++i) {\n                        views[i] = factory.create();\n                    }\n                }\n                else if (newLength < oldLength) {\n                    $lifecycle.beginDetach();\n                    for (let i = newLength, view = views[i]; i < oldLength; view = views[++i]) {\n                        view.release(flags);\n                        view.$detach(flags);\n                    }\n                    $lifecycle.endDetach(flags);\n                    $lifecycle.beginUnbind();\n                    for (let i = newLength, view = views[i]; i < oldLength; view = views[++i]) {\n                        view.$unbind(flags);\n                    }\n                    $lifecycle.endUnbind(flags);\n                    views.length = newLength;\n                    if (newLength === 0) {\n                        return;\n                    }\n                }\n                else if (newLength === 0) {\n                    return;\n                }\n                $lifecycle.beginBind();\n                if (indexMap === null) {\n                    forOf.iterate(items, (arr, i, item) => {\n                        const view = views[i];\n                        if (!!view.$scope && view.$scope.bindingContext[local] === item) {\n                            view.$bind(flags, Scope.fromParent($scope, view.$scope.bindingContext));\n                        }\n                        else {\n                            view.$bind(flags, Scope.fromParent($scope, BindingContext.create(local, item)));\n                        }\n                    });\n                }\n                else {\n                    forOf.iterate(items, (arr, i, item) => {\n                        const view = views[i];\n                        if (indexMap[i] === i && !!view.$scope) {\n                            view.$bind(flags, Scope.fromParent($scope, view.$scope.bindingContext));\n                        }\n                        else {\n                            view.$bind(flags, Scope.fromParent($scope, BindingContext.create(local, item)));\n                        }\n                    });\n                }\n                $lifecycle.endBind(flags);\n            }\n            if (this.$state & 8 /* isAttached */) {\n                const { location } = this;\n                $lifecycle.beginAttach();\n                if (indexMap === null) {\n                    for (let i = 0, ii = views.length; i < ii; ++i) {\n                        const view = views[i];\n                        view.hold(location, flags);\n                        view.$attach(flags);\n                    }\n                }\n                else {\n                    for (let i = 0, ii = views.length; i < ii; ++i) {\n                        if (indexMap[i] !== i) {\n                            const view = views[i];\n                            view.hold(location, flags);\n                            view.$attach(flags);\n                        }\n                    }\n                }\n                $lifecycle.endAttach(flags);\n            }\n        }\n        checkCollectionObserver() {\n            const oldObserver = this.observer;\n            if (this.$state & (2 /* isBound */ | 1 /* isBinding */)) {\n                const newObserver = this.observer = getCollectionObserver(this.$lifecycle, this.items);\n                if (oldObserver !== newObserver) {\n                    if (oldObserver) {\n                        oldObserver.unsubscribeBatched(this);\n                    }\n                }\n                if (newObserver) {\n                    newObserver.subscribeBatched(this);\n                }\n            }\n            else if (oldObserver) {\n                oldObserver.unsubscribeBatched(this);\n            }\n        }\n    };\n    __decorate([\n        bindable\n    ], exports.Repeat.prototype, \"items\", void 0);\n    exports.Repeat = __decorate([\n        kernel.inject(IRenderLocation, IRenderable, IViewFactory),\n        templateController('repeat')\n    ], exports.Repeat);\n\n    exports.Replaceable = class Replaceable {\n        constructor(factory, location) {\n            this.factory = factory;\n            this.currentView = this.factory.create();\n            this.currentView.hold(location, exports.LifecycleFlags.fromCreate);\n        }\n        binding(flags) {\n            this.currentView.$bind(flags, this.$scope);\n        }\n        attaching(flags) {\n            this.currentView.$attach(flags);\n        }\n        detaching(flags) {\n            this.currentView.$detach(flags);\n        }\n        unbinding(flags) {\n            this.currentView.$unbind(flags);\n        }\n    };\n    exports.Replaceable = __decorate([\n        templateController('replaceable'),\n        kernel.inject(IViewFactory, IRenderLocation)\n    ], exports.Replaceable);\n\n    exports.With = class With {\n        constructor(factory, location) {\n            this.factory = factory;\n            this.value = null;\n            this.currentView = null;\n            this.currentView = this.factory.create();\n            this.currentView.hold(location, exports.LifecycleFlags.fromCreate);\n        }\n        valueChanged() {\n            if (this.$state & 2 /* isBound */) {\n                this.bindChild(exports.LifecycleFlags.fromBindableHandler);\n            }\n        }\n        binding(flags) {\n            this.bindChild(flags);\n        }\n        attaching(flags) {\n            this.currentView.$attach(flags);\n        }\n        detaching(flags) {\n            this.currentView.$detach(flags);\n        }\n        unbinding(flags) {\n            this.currentView.$unbind(flags);\n        }\n        bindChild(flags) {\n            const scope = Scope.fromParent(this.$scope, this.value);\n            this.currentView.$bind(flags, scope);\n        }\n    };\n    __decorate([\n        bindable\n    ], exports.With.prototype, \"value\", void 0);\n    exports.With = __decorate([\n        templateController('with'),\n        kernel.inject(IViewFactory, IRenderLocation)\n    ], exports.With);\n\n    class Aurelia {\n        constructor(container = kernel.DI.createContainer()) {\n            this.container = container;\n            this.components = [];\n            this.startTasks = [];\n            this.stopTasks = [];\n            this.isStarted = false;\n            this._root = null;\n            kernel.Registration\n                .instance(Aurelia, this)\n                .register(container, Aurelia);\n        }\n        register(...params) {\n            this.container.register(...params);\n            return this;\n        }\n        app(config) {\n            const component = config.component;\n            const host = config.host;\n            const startTask = () => {\n                host.$au = this;\n                if (!this.components.includes(component)) {\n                    this._root = component;\n                    this.components.push(component);\n                    const re = this.container.get(IRenderingEngine);\n                    component.$hydrate(re, host);\n                }\n                component.$bind(exports.LifecycleFlags.fromStartTask | exports.LifecycleFlags.fromBind);\n                component.$attach(exports.LifecycleFlags.fromStartTask);\n            };\n            this.startTasks.push(startTask);\n            this.stopTasks.push(() => {\n                component.$detach(exports.LifecycleFlags.fromStopTask);\n                component.$unbind(exports.LifecycleFlags.fromStopTask | exports.LifecycleFlags.fromUnbind);\n                host.$au = null;\n            });\n            if (this.isStarted) {\n                startTask();\n            }\n            return this;\n        }\n        root() {\n            return this._root;\n        }\n        start() {\n            for (const runStartTask of this.startTasks) {\n                runStartTask();\n            }\n            this.isStarted = true;\n            return this;\n        }\n        stop() {\n            this.isStarted = false;\n            for (const runStopTask of this.stopTasks) {\n                runStopTask();\n            }\n            return this;\n        }\n    }\n    kernel.PLATFORM.global.Aurelia = Aurelia;\n\n    exports.enableArrayObservation = enableArrayObservation;\n    exports.disableArrayObservation = disableArrayObservation;\n    exports.nativePush = nativePush;\n    exports.nativePop = nativePop;\n    exports.nativeShift = nativeShift;\n    exports.nativeUnshift = nativeUnshift;\n    exports.nativeSplice = nativeSplice;\n    exports.nativeReverse = nativeReverse;\n    exports.nativeSort = nativeSort;\n    exports.enableMapObservation = enableMapObservation;\n    exports.disableMapObservation = disableMapObservation;\n    exports.nativeSet = nativeSet;\n    exports.nativeMapDelete = nativeDelete;\n    exports.nativeMapClear = nativeClear;\n    exports.enableSetObservation = enableSetObservation;\n    exports.disableSetObservation = disableSetObservation;\n    exports.nativeAdd = nativeAdd;\n    exports.nativeSetDelete = nativeDelete$1;\n    exports.nativeSetClear = nativeClear$1;\n    exports.BindingModeBehavior = BindingModeBehavior;\n    exports.debounceCallSource = debounceCallSource;\n    exports.debounceCall = debounceCall;\n    exports.ISanitizer = ISanitizer;\n    exports.handleSelfEvent = handleSelfEvent;\n    exports.throttle = throttle;\n    exports.connects = connects;\n    exports.observes = observes;\n    exports.callsFunction = callsFunction;\n    exports.hasAncestor = hasAncestor;\n    exports.isAssignable = isAssignable;\n    exports.isLeftHandSide = isLeftHandSide;\n    exports.isPrimary = isPrimary;\n    exports.isResource = isResource;\n    exports.hasBind = hasBind;\n    exports.hasUnbind = hasUnbind;\n    exports.isLiteral = isLiteral;\n    exports.arePureLiterals = arePureLiterals;\n    exports.isPureLiteral = isPureLiteral;\n    exports.BindingBehavior = BindingBehavior;\n    exports.ValueConverter = ValueConverter;\n    exports.Assign = Assign;\n    exports.Conditional = Conditional;\n    exports.AccessThis = AccessThis;\n    exports.AccessScope = AccessScope;\n    exports.AccessMember = AccessMember;\n    exports.AccessKeyed = AccessKeyed;\n    exports.CallScope = CallScope;\n    exports.CallMember = CallMember;\n    exports.CallFunction = CallFunction;\n    exports.Binary = Binary;\n    exports.Unary = Unary;\n    exports.PrimitiveLiteral = PrimitiveLiteral;\n    exports.HtmlLiteral = HtmlLiteral;\n    exports.ArrayLiteral = ArrayLiteral;\n    exports.ObjectLiteral = ObjectLiteral;\n    exports.Template = Template;\n    exports.TaggedTemplate = TaggedTemplate;\n    exports.ArrayBindingPattern = ArrayBindingPattern;\n    exports.ObjectBindingPattern = ObjectBindingPattern;\n    exports.BindingIdentifier = BindingIdentifier;\n    exports.ForOfStatement = ForOfStatement;\n    exports.Interpolation = Interpolation;\n    exports.IterateForOfStatement = IterateForOfStatement;\n    exports.CountForOfStatement = CountForOfStatement;\n    exports.bindingBehavior = bindingBehavior;\n    exports.BindingBehaviorResource = BindingBehaviorResource;\n    exports.InternalObserversLookup = InternalObserversLookup;\n    exports.BindingContext = BindingContext;\n    exports.Scope = Scope;\n    exports.OverrideContext = OverrideContext;\n    exports.Call = Call;\n    exports.collectionObserver = collectionObserver;\n    exports.computed = computed;\n    exports.createComputedObserver = createComputedObserver;\n    exports.GetterController = GetterController;\n    exports.IDirtyChecker = IDirtyChecker;\n    exports.DirtyChecker = DirtyChecker;\n    exports.findOriginalEventTarget = findOriginalEventTarget;\n    exports.ListenerTracker = ListenerTracker;\n    exports.DelegateOrCaptureSubscription = DelegateOrCaptureSubscription;\n    exports.TriggerSubscription = TriggerSubscription;\n    exports.EventSubscriber = EventSubscriber;\n    exports.IEventManager = IEventManager;\n    exports.EventManager = EventManager;\n    exports.IExpressionParser = IExpressionParser;\n    exports.ExpressionParser = ExpressionParser;\n    exports.MultiInterpolationBinding = MultiInterpolationBinding;\n    exports.Listener = Listener;\n    exports.IObserverLocator = IObserverLocator;\n    exports.getCollectionObserver = getCollectionObserver;\n    exports.PrimitiveObserver = PrimitiveObserver;\n    exports.Ref = Ref;\n    exports.ISignaler = ISignaler;\n    exports.Signaler = Signaler;\n    exports.subscriberCollection = subscriberCollection;\n    exports.batchedSubscriberCollection = batchedSubscriberCollection;\n    exports.ISVGAnalyzer = ISVGAnalyzer;\n    exports.PropertyAccessor = PropertyAccessor;\n    exports.targetObserver = targetObserver;\n    exports.valueConverter = valueConverter;\n    exports.ValueConverterResource = ValueConverterResource;\n    exports.bindable = bindable;\n    exports.createElement = createElement;\n    exports.RenderPlan = RenderPlan;\n    exports.customAttribute = customAttribute;\n    exports.templateController = templateController;\n    exports.CustomAttributeResource = CustomAttributeResource;\n    exports.registerAttribute = registerAttribute;\n    exports.createCustomAttributeDescription = createCustomAttributeDescription;\n    exports.customElement = customElement;\n    exports.useShadowDOM = useShadowDOM;\n    exports.containerless = containerless;\n    exports.CustomElementResource = CustomElementResource;\n    exports.registerElement = registerElement;\n    exports.$attachAttribute = $attachAttribute;\n    exports.$attachElement = $attachElement;\n    exports.$attachView = $attachView;\n    exports.$detachAttribute = $detachAttribute;\n    exports.$detachElement = $detachElement;\n    exports.$detachView = $detachView;\n    exports.$cacheAttribute = $cacheAttribute;\n    exports.$cacheElement = $cacheElement;\n    exports.$cacheView = $cacheView;\n    exports.$mountElement = $mountElement;\n    exports.$unmountElement = $unmountElement;\n    exports.$mountView = $mountView;\n    exports.$unmountView = $unmountView;\n    exports.$bindAttribute = $bindAttribute;\n    exports.$bindElement = $bindElement;\n    exports.$bindView = $bindView;\n    exports.$unbindAttribute = $unbindAttribute;\n    exports.$unbindElement = $unbindElement;\n    exports.$unbindView = $unbindView;\n    exports.renderStrategy = renderStrategy;\n    exports.RenderStrategyResource = RenderStrategyResource;\n    exports.registerRenderStrategy = registerRenderStrategy;\n    exports.ITemplateCompiler = ITemplateCompiler;\n    exports.$hydrateAttribute = $hydrateAttribute;\n    exports.$hydrateElement = $hydrateElement;\n    exports.defaultShadowOptions = defaultShadowOptions;\n    exports.IRenderingEngine = IRenderingEngine;\n    exports.ShadowDOMProjector = ShadowDOMProjector;\n    exports.ContainerlessProjector = ContainerlessProjector;\n    exports.HostProjector = HostProjector;\n    exports.RuntimeBehavior = RuntimeBehavior;\n    exports.findElements = findElements;\n    exports.RuntimeCompilationResources = RuntimeCompilationResources;\n    exports.CompiledTemplate = CompiledTemplate;\n    exports.noViewTemplate = noViewTemplate;\n    exports.createRenderContext = createRenderContext;\n    exports.InstanceProvider = InstanceProvider;\n    exports.ViewFactoryProvider = ViewFactoryProvider;\n    exports.addBindable = addBindable;\n    exports.addAttachable = addAttachable;\n    exports.Renderer = Renderer;\n    exports.View = View;\n    exports.ViewFactory = ViewFactory;\n    exports.Aurelia = Aurelia;\n    exports.customElementName = customElementName;\n    exports.customElementKey = customElementKey;\n    exports.customElementBehavior = customElementBehavior;\n    exports.customAttributeName = customAttributeName;\n    exports.customAttributeKey = customAttributeKey;\n    exports.ITargetedInstruction = ITargetedInstruction;\n    exports.isTargetedInstruction = isTargetedInstruction;\n    exports.buildRequired = buildRequired;\n    exports.buildTemplateDefinition = buildTemplateDefinition;\n    exports.ELEMENT_NODE = ELEMENT_NODE;\n    exports.ATTRIBUTE_NODE = ATTRIBUTE_NODE;\n    exports.TEXT_NODE = TEXT_NODE;\n    exports.COMMENT_NODE = COMMENT_NODE;\n    exports.DOCUMENT_FRAGMENT_NODE = DOCUMENT_FRAGMENT_NODE;\n    exports.INode = INode;\n    exports.IRenderLocation = IRenderLocation;\n    exports.DOM = DOM;\n    exports.NodeSequence = NodeSequence;\n    exports.TextNodeSequence = TextNodeSequence;\n    exports.FragmentNodeSequence = FragmentNodeSequence;\n    exports.NodeSequenceFactory = NodeSequenceFactory;\n    exports.AuMarker = AuMarker;\n    exports.IRenderable = IRenderable;\n    exports.IViewFactory = IViewFactory;\n    exports.ILifecycle = ILifecycle;\n    exports.IFlushLifecycle = IFlushLifecycle;\n    exports.IBindLifecycle = IBindLifecycle;\n    exports.IAttachLifecycle = IAttachLifecycle;\n    exports.Lifecycle = Lifecycle;\n    exports.LifecycleTask = LifecycleTask;\n    exports.AggregateLifecycleTask = AggregateLifecycleTask;\n    exports.PromiseSwap = PromiseSwap;\n    exports.PromiseTask = PromiseTask;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@aurelia/runtime/dist/index.umd.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/app.html":
/*!**********************!*\
  !*** ./src/app.html ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template>\\n  <div>${message}</div>\\n</template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmh0bWw/NTE5YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUMsUUFBUSIsImZpbGUiOiIuL3NyYy9hcHAuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGU+XFxuICA8ZGl2PiR7bWVzc2FnZX08L2Rpdj5cXG48L3RlbXBsYXRlPlxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/app.html\n");

/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/*! exports provided: App */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"App\", function() { return App; });\n/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ \"./node_modules/@aurelia/runtime/dist/index.umd.js\");\n/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _app_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app.html */ \"./src/app.html\");\n/* harmony import */ var _app_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_app_html__WEBPACK_IMPORTED_MODULE_1__);\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\nlet App = class App {\r\n    constructor() {\r\n        this.message = \"Hello World!\";\r\n    }\r\n};\r\nApp = __decorate([\r\n    Object(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__[\"customElement\"])({ name: \"app\", template: (_app_html__WEBPACK_IMPORTED_MODULE_1___default()) })\r\n], App);\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRzP2YxYjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0JBQWtCLFNBQUksSUFBSSxTQUFJO0FBQzlCO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ2lEO0FBQ2Y7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzRUFBYSxFQUFFLGNBQWMsNERBQVEsRUFBRTtBQUMzQztBQUNlIiwiZmlsZSI6Ii4vc3JjL2FwcC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tIFwiQGF1cmVsaWEvcnVudGltZVwiO1xyXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4vYXBwLmh0bWxcIjtcclxubGV0IEFwcCA9IGNsYXNzIEFwcCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBcIkhlbGxvIFdvcmxkIVwiO1xyXG4gICAgfVxyXG59O1xyXG5BcHAgPSBfX2RlY29yYXRlKFtcclxuICAgIGN1c3RvbUVsZW1lbnQoeyBuYW1lOiBcImFwcFwiLCB0ZW1wbGF0ZSB9KVxyXG5dLCBBcHApO1xyXG5leHBvcnQgeyBBcHAgfTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/app.ts\n");

/***/ }),

/***/ "./src/startup.ts":
/*!************************!*\
  !*** ./src/startup.ts ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _aurelia_jit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/jit */ \"./node_modules/@aurelia/jit/dist/index.umd.js\");\n/* harmony import */ var _aurelia_jit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aurelia_jit__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ \"./node_modules/@aurelia/runtime/dist/index.umd.js\");\n/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app */ \"./src/app.ts\");\n\r\n\r\n\r\nconst au = new _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__[\"Aurelia\"]();\r\nau.register(_aurelia_jit__WEBPACK_IMPORTED_MODULE_0__[\"BasicConfiguration\"]);\r\nconst config = {\r\n    host: document.querySelector(\"app\"),\r\n    component: new _app__WEBPACK_IMPORTED_MODULE_2__[\"App\"]()\r\n};\r\nau.app(config);\r\nau.start();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3RhcnR1cC50cz85YjcyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFrRDtBQUNQO0FBQ2Y7QUFDNUIsZUFBZSx3REFBTztBQUN0QixZQUFZLCtEQUFrQjtBQUM5QjtBQUNBO0FBQ0EsbUJBQW1CLHdDQUFHO0FBQ3RCO0FBQ0E7QUFDQSIsImZpbGUiOiIuL3NyYy9zdGFydHVwLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzaWNDb25maWd1cmF0aW9uIH0gZnJvbSBcIkBhdXJlbGlhL2ppdFwiO1xyXG5pbXBvcnQgeyBBdXJlbGlhIH0gZnJvbSBcIkBhdXJlbGlhL3J1bnRpbWVcIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XHJcbmNvbnN0IGF1ID0gbmV3IEF1cmVsaWEoKTtcclxuYXUucmVnaXN0ZXIoQmFzaWNDb25maWd1cmF0aW9uKTtcclxuY29uc3QgY29uZmlnID0ge1xyXG4gICAgaG9zdDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImFwcFwiKSxcclxuICAgIGNvbXBvbmVudDogbmV3IEFwcCgpXHJcbn07XHJcbmF1LmFwcChjb25maWcpO1xyXG5hdS5zdGFydCgpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/startup.ts\n");

/***/ })

/******/ });